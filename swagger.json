{
  "components": {
    "responses": {},
    "schemas": {
      "AskGo.CreateSessionRequest": {
        "additionalProperties": false,
        "description": "Create session request",
        "properties": {
          "ask": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "project_id": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "project_id"
        ],
        "title": "AskGo.CreateSessionRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.AskGo.CreateSessionRequest",
        "x-validate": null
      },
      "Automations.CreateTriggerRequest": {
        "additionalProperties": false,
        "description": "Create trigger request",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/Automations.Action"
          },
          "events": {
            "$ref": "#/components/schemas/Automations.EventsRequest"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          }
        },
        "required": [
          "project_id",
          "events"
        ],
        "title": "Automations.CreateTriggerRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Automations.CreateTriggerRequest",
        "x-validate": null
      },
      "Invitations.ProjectInvitationVerifyResponse": {
        "additionalProperties": false,
        "description": "Workspace invitation verification response",
        "properties": {
          "expires_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "status": {
            "enum": [
              "pending",
              "expired"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "InvitationVerifyStatus"
          }
        },
        "required": [
          "status",
          "expires_at"
        ],
        "title": "Invitations.ProjectInvitationVerifyResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.ProjectInvitationVerifyResponse",
        "x-validate": null
      },
      "Projects.ListEntities.FieldFileResponse": {
        "additionalProperties": false,
        "description": "Response for a file value",
        "properties": {
          "original_filename": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "pdf": {
            "$ref": "#/components/schemas/Projects.ListEntities.PDFVersion"
          },
          "updated_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Common.UUID"
              },
              {
                "$ref": "#/components/schemas/Projects.Common.PropertyTool"
              }
            ],
            "nullable": true,
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "UpdatedBy"
          },
          "value": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "value",
          "original_filename",
          "updated_by"
        ],
        "title": "Projects.ListEntities.FieldFileResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldFileResponse",
        "x-validate": null
      },
      "Projects.SelectMaxSelected": {
        "description": "Maximum number of options that can be selected on any field.\n0 for unlimited.\n",
        "minimum": 0,
        "nullable": true,
        "title": "Projects.SelectMaxSelected",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SelectMaxSelected",
        "x-validate": null
      },
      "Common.String": {
        "title": "Common.String",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.String",
        "x-validate": null
      },
      "Folders.ListFoldersOrderBy": {
        "description": "List of field names to order by",
        "example": [
          "name"
        ],
        "items": {
          "enum": [
            "id",
            "name"
          ],
          "type": "string",
          "x-struct": null,
          "x-validate": null
        },
        "nullable": true,
        "title": "Folders.ListFoldersOrderBy",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Folders.ListFoldersOrderBy",
        "x-validate": null
      },
      "Projects.UpdateProjectCoverImageRequest": {
        "additionalProperties": false,
        "description": "Upload of project cover image",
        "properties": {
          "file": {
            "format": "binary",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "file"
        ],
        "title": "Projects.UpdateProjectCoverImageRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateProjectCoverImageRequest",
        "x-validate": null,
        "x-speakeasy-schema-name": "UpdateProjectCoverImageRequest"
      },
      "Pagination.Last": {
        "description": "The number of records to return for before the provided cursor; used in combination with `before`",
        "example": 50,
        "nullable": true,
        "title": "Pagination.Last",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Pagination.Last",
        "x-validate": null
      },
      "Projects.PDFPropertyConfigResponse": {
        "additionalProperties": false,
        "description": "PDF property configuration",
        "properties": {
          "splitter": {
            "enum": [
              "none",
              "page_split"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "subproject_config": {
            "$ref": "#/components/schemas/Projects.SubProjectPropertyConfigResponse"
          }
        },
        "required": [
          "splitter",
          "subproject_config"
        ],
        "title": "Projects.PDFPropertyConfigResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PDFPropertyConfigResponse",
        "x-validate": null
      },
      "Imports.PrepareImportRequestNewProject": {
        "additionalProperties": false,
        "description": "Prepare import request",
        "properties": {
          "format": {
            "$ref": "#/components/schemas/Imports.Format"
          },
          "format_options": {
            "$ref": "#/components/schemas/Imports.FormatOptions"
          },
          "project_name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "settings": {
            "$ref": "#/components/schemas/Imports.Settings"
          }
        },
        "required": [
          "format",
          "format_options",
          "project_name"
        ],
        "title": "Imports.PrepareImportRequestNewProject",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Imports.PrepareImportRequestNewProject",
        "x-validate": null
      },
      "TYPED_URL": {
        "additionalProperties": false,
        "description": "Update a field value request",
        "properties": {
          "url": {
            "format": "uri",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "url"
        ],
        "title": "TYPED_URL",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateFieldValueFromURLRequest",
        "x-validate": null
      },
      "Projects.ListEntities.CollectionPreview": {
        "additionalProperties": false,
        "description": "Preview of a nested collection data",
        "nullable": true,
        "properties": {
          "entity_previews": {
            "items": {
              "$ref": "#/components/schemas/Projects.ListEntities.EntityPreview"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "total_entity_count": {
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "total_entity_count",
          "entity_previews"
        ],
        "title": "Projects.ListEntities.CollectionPreview",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "Templates.MainView": {
        "additionalProperties": false,
        "nullable": true,
        "properties": {
          "filters": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Templates.ViewFilter"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "num_pinned_properties": {
            "$ref": "#/components/schemas/Common.NonNegativeInteger"
          },
          "property_ids": {
            "items": {
              "$ref": "#/components/schemas/Templates.TemplateID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "property_layouts": {
            "items": {
              "$ref": "#/components/schemas/Templates.ViewPropertyLayout"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "property_options": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Templates.ViewPropertyOptions"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "property_layouts",
          "property_ids"
        ],
        "title": "Templates.MainView",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.MainView",
        "x-validate": null
      },
      "Projects.ListEntities.EntityResponse": {
        "additionalProperties": false,
        "description": "An entity",
        "properties": {
          "active_view_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "fields": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Projects.ListEntities.FieldResponse"
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "parent_entity_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "project_id",
          "fields"
        ],
        "title": "Projects.ListEntities.EntityResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.EntityResponse",
        "x-validate": null
      },
      "Projects.AddPropertyRequest": {
        "additionalProperties": false,
        "description": "Add property request",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Projects.AddBasicPropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.AddSingleSelectPropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.AddMultiSelectPropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.AddUserSelectPropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.AddCollectionPropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.AddFileCollectionPropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.AddReferencePropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.AddNumberPropertyRequest"
          }
        ],
        "title": "Projects.AddPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.AddPropertyRequest",
        "x-validate": null
      },
      "Pagination.OrderDirections": {
        "description": "List of order directions for the fields in `order_by`",
        "example": [
          "desc",
          "asc"
        ],
        "items": {
          "enum": [
            "asc",
            "desc"
          ],
          "type": "string",
          "x-struct": null,
          "x-validate": null
        },
        "nullable": true,
        "title": "Pagination.OrderDirections",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Pagination.OrderDirections",
        "x-validate": null
      },
      "Library.EntityResponseInList": {
        "additionalProperties": false,
        "description": "An entity",
        "properties": {
          "active_view_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "fields": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Projects.ListEntities.FieldResponse"
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "library_attributes": {
            "$ref": "#/components/schemas/Library.LibraryAttributesResponse"
          },
          "parent_entity_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "project_id",
          "fields",
          "library_attributes"
        ],
        "title": "Library.EntityResponseInList",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Library.EntityResponseInList",
        "x-validate": null
      },
      "Projects.ListEntities.FieldStaleness.Stale": {
        "additionalProperties": false,
        "description": "Field is stale",
        "properties": {
          "changes": {
            "items": {
              "enum": [
                "property_definition",
                "local_input_data",
                "remote_input_data"
              ],
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "status": {
            "enum": [
              "stale"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "status",
          "changes"
        ],
        "title": "Projects.ListEntities.FieldStaleness.Stale",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldStaleness.Stale",
        "x-validate": null
      },
      "Invitations.ListWorkspaceInvitationsResponse": {
        "additionalProperties": false,
        "description": "List invitations response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Invitations.WorkspaceInvitationResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Invitations.ListWorkspaceInvitationsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.ListWorkspaceInvitationsResponse",
        "x-validate": null
      },
      "Projects.UpdateFileCollectionPropertyRequest": {
        "additionalProperties": false,
        "description": "Update specified fields of a Property",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.UpdateFileCollectionPropertyConfig"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "NullableSkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "file_collection"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "FileCollectionPropertyType"
          }
        },
        "required": [
          "name",
          "description",
          "type",
          "tool"
        ],
        "title": "Projects.UpdateFileCollectionPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateFileCollectionPropertyRequest",
        "x-validate": null
      },
      "Invitations.WorkspaceInvitation": {
        "additionalProperties": false,
        "description": "A workspace invitation",
        "properties": {
          "email": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "expires_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "invite_url": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "role": {
            "$ref": "#/components/schemas/Invitations.Role"
          },
          "status": {
            "enum": [
              "accepted",
              "pending",
              "expired"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "InvitationStatus"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "workspace_id",
          "email",
          "role",
          "status",
          "expires_at",
          "invite_url"
        ],
        "title": "Invitations.WorkspaceInvitation",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.WorkspaceInvitation",
        "x-validate": null
      },
      "Billing.PlanProvider": {
        "description": "Provider of the plan",
        "enum": [
          "stripe",
          "local"
        ],
        "title": "Billing.PlanProvider",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.PlanProvider",
        "x-validate": null
      },
      "Number": {
        "title": "Number",
        "type": "number",
        "x-struct": null,
        "x-validate": "Elixir.AgiDbWeb.Schemas.Common.StrictNumber"
      },
      "Templates.SingleSelectProperty": {
        "additionalProperties": false,
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.SingleSelectPropertyConfig"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Templates.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "single_select"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SingleSelectPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "config"
        ],
        "title": "Templates.SingleSelectProperty",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.SingleSelectProperty",
        "x-validate": null
      },
      "AnyOf": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject have any of the values specified in the filter",
        "properties": {
          "name": {
            "enum": [
              "any_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "values"
        ],
        "title": "AnyOf",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.ActivateViewId.AnyOf",
        "x-validate": null
      },
      "Projects.PDFSplitMode": {
        "description": "For manual file_collection properties only.\nAllows to pick how uploaded PDF files should be split into collection items:\n- `:single_image` - split by pages and create a collection item for each page as image\n- `:semantic` - split into smaller PDFs of size of at most `pdf_split_size`, but with AI controlling actual split points for optimal content extraction\n- `:fixed_size` - split into smaller PDFs of size requested by `pdf_split_size`\n",
        "enum": [
          "semantic",
          "fixed_size",
          "single_image"
        ],
        "title": "Projects.PDFSplitMode",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PDFSplitMode",
        "x-validate": null
      },
      "Projects.CreateProjectRequest": {
        "additionalProperties": false,
        "description": "Create project request",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "parent_folder_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          }
        },
        "required": [
          "name"
        ],
        "title": "Projects.CreateProjectRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.CreateProjectRequest",
        "x-validate": null
      },
      "ApiKeys.ListApiKeysResponse": {
        "additionalProperties": false,
        "description": "List api keys response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApiKeys.ApiKeyResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "ApiKeys.ListApiKeysResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.ApiKeys.ListApiKeysResponse",
        "x-validate": null
      },
      "Invitations.WorkspaceInvitationResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Invitations.WorkspaceInvitation"
          },
          {
            "$ref": "#/components/schemas/Invitations.ProjectInvitation"
          }
        ],
        "title": "Invitations.WorkspaceInvitationResponse",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.WorkspaceInvitationResponse",
        "x-validate": null
      },
      "FieldSelectOptionValue": {
        "additionalProperties": false,
        "description": "Filter entities based on field's select value",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyAnyOfString"
              },
              {
                "$ref": "#/components/schemas/PropertyAllOfString"
              },
              {
                "$ref": "#/components/schemas/PropertyNoneOfString"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "field_select_option_value"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "FieldSelectOptionValue",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldSelectOptionValue",
        "x-validate": null
      },
      "Projects.UpdateNumberFormatCustom": {
        "additionalProperties": false,
        "description": "Custom number format",
        "nullable": true,
        "properties": {
          "decimal_places": {
            "oneOf": [
              {
                "maximum": 20,
                "minimum": 0,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              {
                "default": "auto",
                "enum": [
                  "auto"
                ],
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "negative_format": {
            "default": "minus",
            "enum": [
              "minus",
              "parentheses",
              "colored",
              "colored_parentheses"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "right_align": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "thousand_separator": {
            "default": "none",
            "enum": [
              "comma",
              "none"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Projects.UpdateNumberFormatCustom",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateNumberFormatCustom",
        "x-validate": null
      },
      "Cases.CaseMessage": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Cases.CaseMessagePartialResponse"
          },
          {
            "$ref": "#/components/schemas/Cases.CaseMessageResponse"
          },
          {
            "$ref": "#/components/schemas/Cases.CaseMessageQuery"
          },
          {
            "$ref": "#/components/schemas/Cases.CaseMessageAgentRun"
          },
          {
            "$ref": "#/components/schemas/Cases.CaseMessageToolRun"
          }
        ],
        "title": "Cases.CaseMessage",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.CaseMessage",
        "x-validate": null
      },
      "PropertyAnyOfFieldStatus": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject are in the values specified in the filter",
        "properties": {
          "case_sensitive": {
            "default": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "enum": [
              "property_any_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/Projects.ListEntities.FieldStatus"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "values"
        ],
        "title": "PropertyAnyOfFieldStatus",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldStatus.PropertyAnyOf",
        "x-validate": null
      },
      "Imports.FormatOptions": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Imports.FormatOptionsCSV"
          }
        ],
        "title": "Imports.FormatOptions",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Imports.FormatOptions",
        "x-validate": null
      },
      "Templates.CollectionProperty": {
        "additionalProperties": false,
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Templates.CollectionPropertyConfig"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Templates.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "collection"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "CollectionPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "config"
        ],
        "title": "Templates.CollectionProperty",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.CollectionProperty",
        "x-validate": null
      },
      "Tools.Integrations.MaxInputCount": {
        "oneOf": [
          {
            "description": "Maximum number of inputs allowed.",
            "minimum": 1,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          {
            "description": "Unlimited number of inputs allowed.",
            "enum": [
              "unlimited"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        ],
        "title": "Tools.Integrations.MaxInputCount",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.Integrations.MaxInputCount",
        "x-validate": null
      },
      "Templates.BasicProperty": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Templates.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "$ref": "#/components/schemas/Projects.BasicPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool"
        ],
        "title": "Templates.BasicProperty",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.BasicProperty",
        "x-validate": null
      },
      "FieldTextValue": {
        "additionalProperties": false,
        "description": "Filter entities based on field's text value",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyAnyOfString"
              },
              {
                "$ref": "#/components/schemas/PropertyNoneOfString"
              },
              {
                "$ref": "#/components/schemas/PropertyContainsAnyOf"
              },
              {
                "$ref": "#/components/schemas/PropertyContainsNoneOf"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "field_text_value"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "FieldTextValue",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldTextValue",
        "x-validate": null
      },
      "EntityId": {
        "additionalProperties": false,
        "description": "Filter entities based on entity id",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnyOf"
              },
              {
                "$ref": "#/components/schemas/NoneOf"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "entity_id"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "EntityId",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.EntityId",
        "x-validate": null
      },
      "Projects.SingleSelectPropertyConfigResponse": {
        "additionalProperties": false,
        "description": "Select property configuration",
        "properties": {
          "default_option": {
            "$ref": "#/components/schemas/Projects.SelectDefaultOption"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/Projects.SelectOptionResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "options",
          "default_option"
        ],
        "title": "Projects.SingleSelectPropertyConfigResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SingleSelectPropertyConfigResponse",
        "x-validate": null
      },
      "Tools.KeyManager.ListToolModelConfigsResponse": {
        "additionalProperties": false,
        "description": "Response with list of all configured and available tool model configurations.",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Tools.KeyManager.ToolModelConfigResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Tools.KeyManager.ListToolModelConfigsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.KeyManager.ListToolModelConfigsResponse",
        "x-validate": null
      },
      "TYPED_JSON": {
        "additionalProperties": false,
        "description": "Update a field value request",
        "properties": {
          "json": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "json"
        ],
        "title": "TYPED_JSON",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateFieldValueFromJSONRequest",
        "x-validate": null
      },
      "Templates.ExportProjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "projects": {
            "items": {
              "$ref": "#/components/schemas/Templates.Project"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "projects"
        ],
        "title": "Templates.ExportProjectsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.ExportProjectsResponse",
        "x-validate": null
      },
      "Projects.MultiSelectPropertyConfigResponse": {
        "additionalProperties": false,
        "description": "Select property configuration",
        "properties": {
          "default_option": {
            "$ref": "#/components/schemas/Projects.SelectDefaultOption"
          },
          "max_selected": {
            "$ref": "#/components/schemas/Projects.SelectMaxSelected"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/Projects.SelectOptionResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "options",
          "max_selected",
          "default_option"
        ],
        "title": "Projects.MultiSelectPropertyConfigResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.MultiSelectPropertyConfigResponse",
        "x-validate": null
      },
      "Templates.ViewFilter": {
        "additionalProperties": false,
        "description": "View filter",
        "properties": {
          "property_id": {
            "$ref": "#/components/schemas/Templates.TemplateID"
          },
          "select_option_value": {
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "property_id",
          "select_option_value"
        ],
        "title": "Templates.ViewFilter",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.ViewFilter",
        "x-validate": null
      },
      "Projects.AddCollectionPropertyRequest": {
        "additionalProperties": false,
        "description": "Add property request",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.AddCollectionPropertyConfig"
          },
          "default_view_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "collection"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "CollectionPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "description",
          "config"
        ],
        "title": "Projects.AddCollectionPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.AddCollectionPropertyRequest",
        "x-validate": null
      },
      "Imports.ImportResponse": {
        "additionalProperties": false,
        "description": "An import object.\n\n`project_id` may be `null` if the import is not associated with a project yet (import into new project).\n",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "error_details": {
            "$ref": "#/components/schemas/Imports.ErrorDetails"
          },
          "format": {
            "$ref": "#/components/schemas/Imports.Format"
          },
          "format_options": {
            "$ref": "#/components/schemas/Imports.FormatOptions"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "processed_entities": {
            "nullable": true,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "project_name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "settings": {
            "$ref": "#/components/schemas/Imports.Settings"
          },
          "status": {
            "enum": [
              "complete",
              "error",
              "processing",
              "queued",
              "pending"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "workspace_id",
          "project_name",
          "status",
          "format",
          "format_options",
          "settings",
          "created_at",
          "updated_at"
        ],
        "title": "Imports.ImportResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Imports.ImportResponse",
        "x-validate": null
      },
      "Cases.CaseMessageQuery": {
        "additionalProperties": false,
        "description": "A query for the case",
        "properties": {
          "agent_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "file_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "hub_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "search_web": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "text": {
            "$ref": "#/components/schemas/Common.String"
          },
          "type": {
            "enum": [
              "query"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "QueryMessageType"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "user_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "text",
          "user_id",
          "file_ids",
          "agent_id",
          "search_web"
        ],
        "title": "Cases.CaseMessageQuery",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.CaseMessageQuery",
        "x-validate": null
      },
      "Spaces.DataAttachmentURL": {
        "additionalProperties": false,
        "properties": {
          "attachment_url": {
            "$ref": "#/components/schemas/Common.URL"
          },
          "type": {
            "enum": [
              "attachment_url"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "type",
          "attachment_url"
        ],
        "title": "Spaces.DataAttachmentURL",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.DataAttachmentURL",
        "x-validate": null
      },
      "Billing.LimitAggregation": {
        "enum": [
          "total",
          "billing_period"
        ],
        "title": "Billing.LimitAggregation",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.LimitAggregation",
        "x-validate": null
      },
      "AskGo.AskRequest": {
        "additionalProperties": false,
        "description": "Ask request",
        "properties": {
          "ask": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "upload_entity_ids": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "ask"
        ],
        "title": "AskGo.AskRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.AskGo.AskRequest",
        "x-validate": null
      },
      "Tools.Integrations.GroundingFeature": {
        "additionalProperties": false,
        "description": "Grounding feature.",
        "properties": {
          "supported_inputs": {
            "$ref": "#/components/schemas/Tools.Integrations.SupportedInputs"
          },
          "supported_outputs": {
            "$ref": "#/components/schemas/Tools.Integrations.SupportedOutputs"
          }
        },
        "required": [
          "supported_inputs",
          "supported_outputs"
        ],
        "title": "Tools.Integrations.GroundingFeature",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.Integrations.GroundingFeature",
        "x-validate": null
      },
      "Projects.AddFileCollectionPropertyConfig": {
        "additionalProperties": false,
        "description": "Initial configuration for file collection property.",
        "properties": {
          "max_rows": {
            "$ref": "#/components/schemas/Projects.MaxRows"
          },
          "pdf_split_mode": {
            "$ref": "#/components/schemas/Projects.PDFSplitMode"
          },
          "pdf_split_size": {
            "$ref": "#/components/schemas/Projects.PDFSplitSize"
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Projects.CollectionSubproperty"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "properties"
        ],
        "title": "Projects.AddFileCollectionPropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.AddFileCollectionPropertyConfig",
        "x-validate": null
      },
      "Users.UserMeUpdateRequest": {
        "additionalProperties": false,
        "description": "Update information of the currently logged in user",
        "properties": {
          "accepted_terms_and_conditions": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "first_name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "last_name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "marketing_optin": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "show_tutorials": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "signup_completed": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Users.UserMeUpdateRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.UserMeUpdateRequest",
        "x-validate": null
      },
      "Templates.ViewPropertyLayout": {
        "additionalProperties": false,
        "properties": {
          "height": {
            "$ref": "#/components/schemas/Common.NonNegativeInteger"
          },
          "property_id": {
            "$ref": "#/components/schemas/Templates.TemplateID"
          },
          "width": {
            "$ref": "#/components/schemas/Common.NonNegativeInteger"
          },
          "x": {
            "$ref": "#/components/schemas/Common.Integer"
          },
          "y": {
            "$ref": "#/components/schemas/Common.Integer"
          }
        },
        "required": [
          "property_id",
          "x",
          "y",
          "width",
          "height"
        ],
        "title": "Templates.ViewPropertyLayout",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.ViewPropertyLayout",
        "x-validate": null
      },
      "Templates.ReferenceProperty": {
        "additionalProperties": false,
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Templates.ReferencePropertyConfig"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Templates.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "reference"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "ReferencePropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "config"
        ],
        "title": "Templates.ReferenceProperty",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.ReferenceProperty",
        "x-validate": null
      },
      "AskGo.SetMessageMetadataRequest": {
        "additionalProperties": false,
        "description": "Set message metadata request",
        "properties": {
          "message_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "metadata": {
            "$ref": "#/components/schemas/AskGo.MessageMetadata"
          }
        },
        "required": [
          "message_id",
          "metadata"
        ],
        "title": "AskGo.SetMessageMetadataRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.AskGo.SetMessageMetadataRequest",
        "x-validate": null
      },
      "Integrations.ConnectionStatus": {
        "description": "A status of connection.",
        "enum": [
          "not_started",
          "started",
          "project_gone"
        ],
        "title": "Integrations.ConnectionStatus",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Integrations.ConnectionStatus",
        "x-validate": null
      },
      "Invitations.InvitedUser": {
        "additionalProperties": false,
        "description": "Invited user",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Invitations.InvitedUserSuccess"
          },
          {
            "$ref": "#/components/schemas/Invitations.InvitedUserError"
          }
        ],
        "title": "Invitations.InvitedUser",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.InvitedUser",
        "x-validate": null
      },
      "Spaces.ErrorMessage": {
        "additionalProperties": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "parent_message_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "text": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "enum": [
              "error"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "ErrorMessageType"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "parent_message_id",
          "text"
        ],
        "title": "Spaces.ErrorMessage",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.ErrorMessage",
        "x-validate": null
      },
      "Integrations.ConnectionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Integrations.NotStartedConnectionResponse"
          },
          {
            "$ref": "#/components/schemas/Integrations.StartedConnectionResponse"
          },
          {
            "$ref": "#/components/schemas/Integrations.ProjectGoneConnectionResponse"
          }
        ],
        "title": "Integrations.ConnectionResponse",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Integrations.ConnectionResponse",
        "x-validate": null
      },
      "PropertyContainsNoneOf": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject contains the one specified in the filter",
        "properties": {
          "case_sensitive": {
            "default": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "enum": [
              "property_contains_none_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "values"
        ],
        "title": "PropertyContainsNoneOf",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldTextValue.PropertyContainsNoneOf",
        "x-validate": null
      },
      "Cases.CaseMessageToolRun": {
        "additionalProperties": false,
        "description": "A tool run message",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "in_progress": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "tool_name": {
            "$ref": "#/components/schemas/Cases.ToolRunToolName"
          },
          "type": {
            "enum": [
              "tool_run"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "tool_name",
          "in_progress"
        ],
        "title": "Cases.CaseMessageToolRun",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.CaseMessageToolRun",
        "x-validate": null
      },
      "Cases.AdoptEntityRequest": {
        "additionalProperties": false,
        "properties": {
          "entity_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "project_id",
          "entity_id"
        ],
        "title": "Cases.AdoptEntityRequest",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "Users.PermissionCondition": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Users.ConditionManagedRole"
          }
        ],
        "title": "Users.PermissionCondition",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.PermissionCondition",
        "x-validate": null
      },
      "Users.UserResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Users.User"
          },
          {
            "enum": [
              "anyone_in_folder",
              "anyone_in_workspace",
              "anyone"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        ],
        "title": "Users.UserResponse",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.UserResponse",
        "x-validate": null
      },
      "Projects.UpdateSingleSelectPropertyConfig": {
        "additionalProperties": false,
        "description": "Select property configuration.\nYou can send any combination of the available configuration options.\n",
        "properties": {
          "default_option": {
            "$ref": "#/components/schemas/Projects.SelectDefaultOption"
          },
          "max_selected": {
            "$ref": "#/components/schemas/Projects.SelectMaxSelected"
          },
          "remove_options": {
            "default": [],
            "description": "Remove select options.\nIf the value doesn't exist, it will be ignored.\n",
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "upsert_options": {
            "default": [],
            "description": "Add or update select options.\nIf the value already exists, it will be updated either with new color, or new value text.\nValues that don't already exist will be added.\nYou can have at most 1000 options at any time.\n",
            "items": {
              "properties": {
                "color": {
                  "$ref": "#/components/schemas/Projects.SelectOptionColor"
                },
                "new_value": {
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "tool_fallback": {
                  "nullable": true,
                  "type": "boolean",
                  "x-struct": null,
                  "x-validate": null
                },
                "value": {
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "required": [
                "value"
              ],
              "type": "object",
              "x-struct": null,
              "x-validate": null,
              "x-speakeasy-schema-name": "SelectPropertyConfigUpsertOptionsItems"
            },
            "maxItems": 1000,
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Projects.UpdateSingleSelectPropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateSingleSelectPropertyConfig",
        "x-validate": null,
        "x-speakeasy-schema-name": "SelectPropertyConfig"
      },
      "Projects.Entities.EntityBulkConfirmUploadResponse": {
        "additionalProperties": false,
        "description": "Entity bulk confirm upload response",
        "properties": {
          "affected_count": {
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "affected_count"
        ],
        "title": "Projects.Entities.EntityBulkConfirmUploadResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.EntityBulkConfirmUploadResponse",
        "x-validate": null
      },
      "ViewAllOfFieldStatuses": {
        "additionalProperties": false,
        "description": "Matches items in a view based on whether all of their field statuses are in the filter values",
        "properties": {
          "name": {
            "enum": [
              "view_all_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/Projects.ListEntities.FieldStatus"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "view_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "name",
          "view_id",
          "values"
        ],
        "title": "ViewAllOfFieldStatuses",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.EntityStatus.ViewAllOf",
        "x-validate": null
      },
      "Projects.UserSelectPropertyRequest": {
        "additionalProperties": false,
        "description": "Initial configuration for user-select property.\nAllows to provide initial users.\n",
        "properties": {
          "default_option": {
            "$ref": "#/components/schemas/Projects.SelectDefaultOption"
          },
          "options": {
            "items": {
              "properties": {
                "color": {
                  "$ref": "#/components/schemas/Projects.SelectOptionColor"
                },
                "tool_fallback": {
                  "default": false,
                  "type": "boolean",
                  "x-struct": null,
                  "x-validate": null
                },
                "value": {
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "required": [
                "value"
              ],
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "maxItems": 1000,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Projects.UserSelectPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UserSelectPropertyRequest",
        "x-validate": null
      },
      "Projects.SubProjectPropertyConfigResponse": {
        "additionalProperties": false,
        "description": "Sub-project property configuration",
        "properties": {
          "child_project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "primary_property_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          }
        },
        "required": [
          "child_project_id",
          "primary_property_id"
        ],
        "title": "Projects.SubProjectPropertyConfigResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SubProjectPropertyConfigResponse",
        "x-validate": null
      },
      "Projects.ProjectResponseInList": {
        "additionalProperties": false,
        "description": "A project",
        "properties": {
          "cover_image_urls": {
            "$ref": "#/components/schemas/Projects.ProjectCoverImageURLs"
          },
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "membership_info": {
            "$ref": "#/components/schemas/Projects.MembershipInfo"
          },
          "name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "parent_folder_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "parent_property": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Projects.PropertyResponse"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "workspace_id",
          "properties",
          "parent_property",
          "parent_folder_id",
          "cover_image_urls",
          "updated_at",
          "created_at"
        ],
        "title": "Projects.ProjectResponseInList",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ProjectResponseInList",
        "x-validate": null
      },
      "Projects.PropertyInputResponse": {
        "additionalProperties": false,
        "description": "A property input",
        "properties": {
          "entities_filter": {
            "$ref": "#/components/schemas/EntityFilters.NullableFilter"
          },
          "entity_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "via_property_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          }
        },
        "required": [
          "property_id"
        ],
        "title": "Projects.PropertyInputResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PropertyInputResponse",
        "x-validate": null
      },
      "Common.URL": {
        "example": "https://example.com",
        "pattern": "http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+",
        "title": "Common.URL",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.URL",
        "x-validate": null
      },
      "PropertyAnyOfString": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject are in the values specified in the filter",
        "properties": {
          "case_sensitive": {
            "default": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "enum": [
              "property_any_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "values"
        ],
        "title": "PropertyAnyOfString",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldSelectOptionValue.PropertyAnyOf",
        "x-validate": null
      },
      "Hubs.Hub": {
        "additionalProperties": false,
        "description": "A hub represents a collection of indexed files",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "description": {
            "description": "Description of the hub",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "entity_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "file_project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "index": {
            "$ref": "#/components/schemas/Projects.Entities.FieldResponse"
          },
          "name": {
            "description": "Name of the hub",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "summary": {
            "description": "Summary of the hub",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "description": "Resource type",
            "enum": [
              "hub"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "type",
          "name",
          "file_project_id",
          "created_at",
          "updated_at",
          "workspace_id"
        ],
        "title": "Hubs.Hub",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Hubs.Hub",
        "x-validate": null
      },
      "Projects.ListEntities.FieldPreview": {
        "additionalProperties": false,
        "description": "Preview of a field",
        "properties": {
          "manual_value": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldValueResponse"
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "property_type": {
            "$ref": "#/components/schemas/Projects.Common.PropertyType"
          },
          "tool_value": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldValueResponse"
          }
        },
        "required": [
          "property_id",
          "manual_value",
          "tool_value"
        ],
        "title": "Projects.ListEntities.FieldPreview",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldPreview",
        "x-validate": null
      },
      "Folders.CreateFolderRequest": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Folders.FolderName"
          },
          "parent_folder_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          }
        },
        "required": [
          "name",
          "parent_folder_id"
        ],
        "title": "Folders.CreateFolderRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Folders.CreateFolderRequest",
        "x-validate": null
      },
      "Projects.OnlyParentProjects": {
        "default": false,
        "description": "Only return parent projects",
        "title": "Projects.OnlyParentProjects",
        "type": "boolean",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.OnlyParentProjects",
        "x-validate": null
      },
      "Projects.UpdateReferencePropertyRequest": {
        "additionalProperties": false,
        "description": "Reference Property configuration.\nYou can send any combination of the available configuration options.\n",
        "properties": {
          "config": {
            "description": "Update reference property configuration.\nAllows to provide source project and entity limit (0 for to use system maximum).\nSource project can be changed only if the property doesn't have any values already set.\n",
            "properties": {
              "entity_limit": {
                "$ref": "#/components/schemas/Projects.NullableReferenceEntityLimit"
              },
              "project_id": {
                "$ref": "#/components/schemas/Common.NullableUUID"
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "NullableSkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "reference"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "ReferencePropertyType"
          }
        },
        "required": [
          "name",
          "description",
          "type",
          "tool",
          "config"
        ],
        "title": "Projects.UpdateReferencePropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateReferencePropertyRequest",
        "x-validate": null
      },
      "Templates.NumberProperty": {
        "additionalProperties": false,
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.NumberPropertyConfig"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Templates.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "number"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "NumberPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "config"
        ],
        "title": "Templates.NumberProperty",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.NumberProperty",
        "x-validate": null
      },
      "ApiKeys.CreateApiKeyRequest": {
        "additionalProperties": false,
        "description": "Create api key request",
        "properties": {
          "days_valid": {
            "maximum": 90,
            "minimum": 1,
            "nullable": true,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "days_valid",
          "name"
        ],
        "title": "ApiKeys.CreateApiKeyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.ApiKeys.CreateApiKeyRequest",
        "x-validate": null
      },
      "Folders.IncludeMembershipInfo": {
        "default": false,
        "description": "Include membership information for the calling user",
        "title": "Folders.IncludeMembershipInfo",
        "type": "boolean",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Folders.IncludeMembershipInfo",
        "x-validate": null
      },
      "Projects.UpdateCollectionPropertyRequest": {
        "additionalProperties": false,
        "description": "Update specified fields of a Property",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.UpdateCollectionPropertyConfig"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "NullableSkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "collection"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "CollectionPropertyType"
          }
        },
        "required": [
          "name",
          "description",
          "type",
          "tool"
        ],
        "title": "Projects.UpdateCollectionPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateCollectionPropertyRequest",
        "x-validate": null
      },
      "Invitations.CreateInvitationResponse": {
        "additionalProperties": false,
        "description": "Create invitation response. Describes each created invitation (or an error if it failed)",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Invitations.InvitedUser"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "data"
        ],
        "title": "Invitations.CreateInvitationResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.CreateInvitationResponse",
        "x-validate": null
      },
      "Projects.Entities.EntityBulkConfirmUploadRequest": {
        "additionalProperties": false,
        "description": "Request to confirm the file upload into multiple entities at once.",
        "properties": {
          "entity_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "entity_ids"
        ],
        "title": "Projects.Entities.EntityBulkConfirmUploadRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.EntityBulkConfirmUploadRequest",
        "x-validate": null
      },
      "Projects.PropertyLayoutId": {
        "additionalProperties": false,
        "properties": {
          "height": {
            "$ref": "#/components/schemas/Common.NonNegativeInteger"
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "width": {
            "$ref": "#/components/schemas/Common.NonNegativeInteger"
          },
          "x": {
            "$ref": "#/components/schemas/Common.Integer"
          },
          "y": {
            "$ref": "#/components/schemas/Common.Integer"
          }
        },
        "required": [
          "property_id",
          "x",
          "y",
          "width",
          "height"
        ],
        "title": "Projects.PropertyLayoutId",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PropertyLayoutId",
        "x-validate": null
      },
      "Projects.ListEntities.FieldResponse": {
        "additionalProperties": false,
        "description": "A field",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "entity_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "error_message": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "ground_truth": {
            "nullable": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "indexing_error_message": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "indexing_status": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldStatus"
          },
          "manual_metadata": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldManualMetadataResponse"
          },
          "manual_value": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldValueResponse"
          },
          "property_hash": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "property_type": {
            "$ref": "#/components/schemas/Projects.Common.PropertyType"
          },
          "staleness": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldStaleness"
          },
          "status": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldStatus"
          },
          "subproject_preview": {
            "$ref": "#/components/schemas/Projects.ListEntities.SubprojectPreviewResponse"
          },
          "tool_error_message": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "tool_metadata": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldToolMetadataResponse"
          },
          "tool_status": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldStatus"
          },
          "tool_value": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldValueResponse"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          }
        },
        "required": [
          "entity_id",
          "property_id",
          "property_type",
          "status",
          "manual_value",
          "tool_value",
          "error_message",
          "property_hash",
          "ground_truth",
          "staleness",
          "created_at",
          "updated_at"
        ],
        "title": "Projects.ListEntities.FieldResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldResponse",
        "x-validate": null
      },
      "Library.ListEntitiesOrderBy": {
        "description": "List of property slugs/ids to order by",
        "example": [
          "id"
        ],
        "items": {
          "type": "string",
          "x-struct": null,
          "x-validate": null
        },
        "nullable": true,
        "title": "Library.ListEntitiesOrderBy",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Library.ListEntitiesOrderBy",
        "x-validate": null
      },
      "Folders.UpdateFolderRequest": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Folders.FolderName"
          }
        },
        "title": "Folders.UpdateFolderRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Folders.UpdateFolderRequest",
        "x-validate": null
      },
      "ApiKeys.ApiKeyResponse": {
        "additionalProperties": false,
        "description": "An api key",
        "properties": {
          "expires_at": {
            "$ref": "#/components/schemas/Common.NullableDateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "key": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "last_used_at": {
            "$ref": "#/components/schemas/Common.NullableDateTime"
          },
          "name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "prefix": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "user_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "user_id",
          "name",
          "key",
          "prefix",
          "expires_at",
          "last_used_at"
        ],
        "title": "ApiKeys.ApiKeyResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.ApiKeys.ApiKeyResponse",
        "x-validate": null
      },
      "Templates.OptionalTemplateID": {
        "maxLength": 64,
        "minLength": 1,
        "nullable": true,
        "pattern": "[a-zA-Z0-9_\\-]{1,64}",
        "title": "Templates.OptionalTemplateID",
        "type": "string",
        "x-struct": null,
        "x-validate": null
      },
      "Projects.ListEntities.FieldStaleness.Unknown": {
        "additionalProperties": false,
        "description": "Field staleness is unknown (calculation data is incomplete due to provided reason)",
        "properties": {
          "reason": {
            "enum": [
              "other",
              "no_inputs",
              "inputs_incomplete",
              "inputs_incompatible",
              "inactive_view",
              "views_not_ready",
              "immutable_field",
              "auto_recalculations_disabled",
              "manual_override_present"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "status": {
            "enum": [
              "unknown"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "status",
          "reason"
        ],
        "title": "Projects.ListEntities.FieldStaleness.Unknown",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldStaleness.Unknown",
        "x-validate": null
      },
      "Exports.ExportResponse": {
        "additionalProperties": false,
        "description": "An export",
        "properties": {
          "format": {
            "$ref": "#/components/schemas/Exports.Format"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "inserted_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "status": {
            "enum": [
              "pending",
              "complete",
              "error"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "url": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "id",
          "project_id",
          "name",
          "url",
          "status",
          "inserted_at",
          "updated_at",
          "format"
        ],
        "title": "Exports.ExportResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Exports.ExportResponse",
        "x-validate": null
      },
      "Spaces.ProgressMessage": {
        "additionalProperties": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Spaces.SystemMessage"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "parent_message_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "pct_complete": {
            "maximum": 100,
            "minimum": 0,
            "nullable": true,
            "type": "number",
            "x-struct": null,
            "x-validate": null
          },
          "status": {
            "$ref": "#/components/schemas/Spaces.Status"
          },
          "text": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "enum": [
              "progress"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "status",
          "parent_message_id",
          "text",
          "pct_complete",
          "messages"
        ],
        "title": "Spaces.ProgressMessage",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.ProgressMessage",
        "x-validate": null
      },
      "EntityFilters.GroupFilter": {
        "additionalProperties": false,
        "description": "Groups `simple` or `group filters` together with `or`, `and` operators. You have to specify at least one `filter`.",
        "properties": {
          "conjunction": {
            "$ref": "#/components/schemas/EntityFilters.Conjunction"
          },
          "filters": {
            "description": "List of `simple` or `group` filters",
            "items": {
              "$ref": "#/components/schemas/EntityFilters.Filter"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "conjunction",
          "filters"
        ],
        "title": "EntityFilters.GroupFilter",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.GroupFilter",
        "x-validate": null
      },
      "TYPED_FILE_INTEGRATION": {
        "additionalProperties": false,
        "description": "Update a field value request",
        "properties": {
          "connection_id": {
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "file_id": {
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "file_name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "integration_id": {
            "enum": [
              "google_drive"
            ],
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "file_id",
          "integration_id",
          "connection_id"
        ],
        "title": "TYPED_FILE_INTEGRATION",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateFieldValueFromIntegrationRequest",
        "x-validate": null,
        "x-speakeasy-schema-name": "TypedFileIntegration"
      },
      "Workspaces.UpdateWorkspaceRequest": {
        "additionalProperties": false,
        "description": "Update workspace request.\nWhen metadata is provided, it will overwrite the existing metadata in its entirety.\n",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Workspaces.WorkspaceMetadata"
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Workspaces.UpdateWorkspaceRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Workspaces.UpdateWorkspaceRequest",
        "x-validate": null
      },
      "Spaces.DataText": {
        "additionalProperties": false,
        "properties": {
          "text": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "enum": [
              "text"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "type",
          "text"
        ],
        "title": "Spaces.DataText",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.DataText",
        "x-validate": null
      },
      "Pagination.TotalCount": {
        "description": "The total count of records for the given query. Always `null` when using cursor-based  pagination.",
        "example": 50,
        "nullable": true,
        "title": "Pagination.TotalCount",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Pagination.TotalCount",
        "x-validate": null
      },
      "FieldNumberValue": {
        "additionalProperties": false,
        "description": "Filter entities based on field's number value.\nFor all matches except `property_any_of` and `property_none_of` matchers,\nthe value can contain a unit which will be used to pre-filter values, i.e.\n`100 EUR` will find all entities with a number value greater/equal/less than `100`\nbut only for values with unit `EUR`.\n",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyAnyOf"
              },
              {
                "$ref": "#/components/schemas/PropertyNoneOf"
              },
              {
                "$ref": "#/components/schemas/PropertyGreaterThan"
              },
              {
                "$ref": "#/components/schemas/PropertyLessThan"
              },
              {
                "$ref": "#/components/schemas/PropertyGreaterThanOrEqualTo"
              },
              {
                "$ref": "#/components/schemas/PropertyLessThanOrEqualTo"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "field_number_value"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "FieldNumberValue",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldNumberValue",
        "x-validate": null
      },
      "Projects.AddFileCollectionPropertyRequest": {
        "additionalProperties": false,
        "description": "Add property request",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.AddFileCollectionPropertyConfig"
          },
          "default_view_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "file_collection"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "FileCollectionPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "description"
        ],
        "title": "Projects.AddFileCollectionPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.AddFileCollectionPropertyRequest",
        "x-validate": null
      },
      "Projects.SetFieldValueFromTextRequest": {
        "additionalProperties": false,
        "description": "Set a field value request",
        "properties": {
          "value": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "value"
        ],
        "title": "Projects.SetFieldValueFromTextRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SetFieldValueFromTextRequest",
        "x-validate": null
      },
      "Billing.WorkspaceUsageResponse": {
        "additionalProperties": false,
        "description": "Represents usage limits for a workspace",
        "properties": {
          "limits": {
            "$ref": "#/components/schemas/Billing.UsageLimitsWithUsage"
          }
        },
        "required": [
          "limits"
        ],
        "title": "Billing.WorkspaceUsageResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.WorkspaceUsageResponse",
        "x-validate": null,
        "x-speakeasy-schema-name": "WorkspaceUsageResponse"
      },
      "field_value": {
        "additionalProperties": false,
        "description": "Set a fields value",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TYPED_SELECT"
          },
          {
            "$ref": "#/components/schemas/TYPED_TEXT"
          },
          {
            "$ref": "#/components/schemas/TYPED_JSON"
          },
          {
            "$ref": "#/components/schemas/TYPED_URL"
          },
          {
            "$ref": "#/components/schemas/TYPED_FILE_URL"
          },
          {
            "$ref": "#/components/schemas/TYPED_FILE_INTEGRATION"
          },
          {
            "$ref": "#/components/schemas/TYPED_FILE_BASE64"
          },
          {
            "$ref": "#/components/schemas/TYPED_REFERENCE"
          },
          {
            "nullable": true,
            "title": "String",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          {
            "title": "Number",
            "type": "number",
            "x-struct": null,
            "x-validate": "Elixir.AgiDbWeb.Schemas.Common.StrictNumber"
          },
          {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "title": "Options",
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        ],
        "title": "field_value",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateEntityFieldValue",
        "x-validate": null
      },
      "Projects.AddCollectionPropertyConfig": {
        "additionalProperties": false,
        "description": "Initial configuration for collection property.",
        "properties": {
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Projects.CollectionSubproperty"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "properties"
        ],
        "title": "Projects.AddCollectionPropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.AddCollectionPropertyConfig",
        "x-validate": null
      },
      "Billing.UnlimitedValue": {
        "enum": [
          "unlimited"
        ],
        "title": "Billing.UnlimitedValue",
        "type": "string",
        "x-struct": null,
        "x-validate": null
      },
      "Common.DeleteResponse": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id"
        ],
        "title": "Common.DeleteResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.DeleteResponse",
        "x-validate": null
      },
      "Projects.MoveProjectToFolderRequest": {
        "additionalProperties": false,
        "description": "Request to move a project to a different folder",
        "properties": {
          "parent_folder_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          }
        },
        "required": [
          "parent_folder_id"
        ],
        "title": "Projects.MoveProjectToFolderRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.MoveProjectToFolderRequest",
        "x-validate": null
      },
      "Users.UpdateMemberRequest": {
        "additionalProperties": false,
        "description": "Updates a user's role in on given resource",
        "properties": {
          "role": {
            "enum": [
              "admin",
              "editor",
              "reviewer",
              "worker",
              "reader"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Users.UpdateMemberRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.UpdateMemberRequest",
        "x-validate": null
      },
      "Common.Email": {
        "example": "email@example.com",
        "format": "email",
        "title": "Common.Email",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.Email",
        "x-validate": null
      },
      "Projects.FileCollectionPropertyConfigResponse": {
        "additionalProperties": false,
        "description": "File collection property configuration",
        "properties": {
          "max_rows": {
            "default": 0,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "pdf_split_mode": {
            "$ref": "#/components/schemas/Projects.PDFSplitMode"
          },
          "pdf_split_size": {
            "default": 1,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Projects.CollectionPropertyResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "subproject_config": {
            "$ref": "#/components/schemas/Projects.SubProjectPropertyConfigResponse"
          }
        },
        "required": [
          "subproject_config",
          "properties",
          "max_rows",
          "pdf_split_mode",
          "pdf_split_size"
        ],
        "title": "Projects.FileCollectionPropertyConfigResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.FileCollectionPropertyConfigResponse",
        "x-validate": null
      },
      "Templates.ImportProjectsRequest": {
        "additionalProperties": false,
        "properties": {
          "parent_folder_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "projects": {
            "items": {
              "$ref": "#/components/schemas/Templates.Project"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "projects"
        ],
        "title": "Templates.ImportProjectsRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.ImportProjectsRequest",
        "x-validate": null
      },
      "Exports.Format": {
        "default": "csv",
        "enum": [
          "csv",
          "xlsx"
        ],
        "title": "Exports.Format",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Exports.Format",
        "x-validate": null
      },
      "Projects.PropertyResponse": {
        "additionalProperties": false,
        "description": "A property",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.PropertyConfigResponse"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "effective_tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "hash": {
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInputResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "owner": {
            "enum": [
              "user",
              "system"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "parent_project_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "parent_property_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "skip_behaviour": {
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "NullableSkipBehavior"
          },
          "slug": {
            "pattern": "^[a-z_-][a-z0-9_-]*$",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "supported_indices": {
            "items": {
              "enum": [
                "semantic"
              ],
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "tool_version": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "$ref": "#/components/schemas/Projects.Common.PropertyType"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "description",
          "type",
          "tool",
          "is_grounded",
          "input_ids",
          "inputs",
          "owner",
          "hash",
          "skip_behaviour"
        ],
        "title": "Projects.PropertyResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PropertyResponse",
        "x-validate": null
      },
      "Automations.ListTriggersResponse": {
        "additionalProperties": false,
        "description": "List triggers response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Automations.TriggerResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Automations.ListTriggersResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Automations.ListTriggersResponse",
        "x-validate": null
      },
      "Projects.UpdateProjectRequest": {
        "additionalProperties": false,
        "description": "Updates specified fields of a project",
        "properties": {
          "auto_recalculations": {
            "default": true,
            "description": "Whether to automatically recalculate the values of the fields based on internal events. If disabled, only manual recalculations are possible.\nFields in `idle` state will always calculate regardless of this setting.\nSkipping this field in request will keep the current setting.\n",
            "nullable": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name"
        ],
        "title": "Projects.UpdateProjectRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateProjectRequest",
        "x-validate": null
      },
      "Folders.FolderName": {
        "description": "Name of the folder",
        "nullable": true,
        "title": "Folders.FolderName",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Folders.FolderName",
        "x-validate": null
      },
      "FieldStatus": {
        "additionalProperties": false,
        "description": "Filter entities based on a fields status",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyAnyOfFieldStatus"
              },
              {
                "$ref": "#/components/schemas/PropertyNoneOfFieldStatus"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "field_status"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "FieldStatus",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldStatus",
        "x-validate": null
      },
      "Projects.PropertyConfigFromPromptRequest": {
        "additionalProperties": false,
        "description": "Request to generate a property configuration from a prompt",
        "properties": {
          "prompt": {
            "description": "The prompt to generate the property configuration from",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "prompt"
        ],
        "title": "Projects.PropertyConfigFromPromptRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PropertyConfigFromPromptRequest",
        "x-validate": null
      },
      "Projects.ReferenceEntityLimit": {
        "description": "Maximum number of matched entities to reference. 0 value will use default system limit (1000).",
        "maximum": 1000,
        "minimum": 0,
        "title": "Projects.ReferenceEntityLimit",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ReferenceEntityLimit",
        "x-validate": null
      },
      "TokenResponse": {
        "description": "OAuth token response",
        "example": {
          "access_token": "eyJz93a...k4laUWw",
          "expires_in": 86400,
          "refresh_token": "GEbRxBN...edjnXbL",
          "scope": "read:data write:data",
          "token_type": "Bearer"
        },
        "properties": {
          "access_token": {
            "description": "Access token",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "expires_in": {
            "description": "Token expiration in seconds",
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "id_token": {
            "description": "ID token (for OpenID Connect)",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "refresh_token": {
            "description": "Refresh token (if applicable)",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "scope": {
            "description": "Granted scopes",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "token_type": {
            "description": "Token type (usually 'Bearer')",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "access_token",
          "token_type",
          "expires_in"
        ],
        "title": "TokenResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.OAuth.TokenResponse",
        "x-validate": null
      },
      "Projects.PropertyInput": {
        "additionalProperties": false,
        "description": "A property input. If entity_id is null, the input will always be from current entity or entities\nfiltered by supplied `entities_filter` if any.\nAlternatively inputs can be filtered from a remote project by specifying `via_property_id` which\npoints to a `reference` property that acts as selector of entities from remote project.\n",
        "properties": {
          "entities_filter": {
            "$ref": "#/components/schemas/EntityFilters.NullableFilter"
          },
          "entity_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "via_property_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          }
        },
        "required": [
          "property_id"
        ],
        "title": "Projects.PropertyInput",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PropertyInput",
        "x-validate": null
      },
      "Library.ListEntitiesResponse": {
        "additionalProperties": false,
        "description": "List library's entities response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Library.EntityResponseInList"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Library.ListEntitiesResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Library.ListEntitiesResponse",
        "x-validate": null
      },
      "Common.MimeType": {
        "enum": [
          "application/json",
          "application/pdf",
          "audio/mp4",
          "audio/mpeg",
          "audio/ogg",
          "audio/wav",
          "audio/x-flac",
          "image/bmp",
          "image/gif",
          "image/jpeg",
          "image/png",
          "image/tiff",
          "image/webp",
          "text/csv",
          "text/html",
          "text/markdown",
          "text/plain",
          "video/mp4",
          "video/mpeg",
          "video/webm",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/msword",
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        ],
        "example": "image/png",
        "title": "Common.MimeType",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.MimeType",
        "x-validate": null
      },
      "Tools.Integrations.IntegrationName": {
        "enum": [
          "open_ai",
          "google_ai",
          "google_genai",
          "bing_search",
          "azure_ocr",
          "internal",
          "fire_crawl",
          "amazon_textract",
          "azure_open_ai",
          "anthropic",
          "vertex_ai_claude",
          "perplexity"
        ],
        "title": "Tools.Integrations.IntegrationName",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.Integrations.IntegrationName",
        "x-validate": null
      },
      "Projects.RootOrUUID": {
        "description": "UUID to represent a folder, or null for the root folder (empty string)",
        "example": "e23ff3f3-8f77-4e78-9e81-fdb25abfb781",
        "nullable": true,
        "pattern": "^([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|)$",
        "title": "Projects.RootOrUUID",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.RootOrUUID",
        "x-validate": null
      },
      "Projects.UpdateMultiSelectPropertyConfig": {
        "additionalProperties": false,
        "description": "Select property configuration.\nYou can send any combination of the available configuration options.\n",
        "properties": {
          "default_option": {
            "$ref": "#/components/schemas/Projects.SelectDefaultOption"
          },
          "max_selected": {
            "$ref": "#/components/schemas/Projects.SelectMaxSelected"
          },
          "remove_options": {
            "default": [],
            "description": "Remove select options.\nIf the value doesn't exist, it will be ignored.\n",
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "upsert_options": {
            "default": [],
            "description": "Add or update select options.\nIf the value already exists, it will be updated either with new color, or new value text.\nValues that don't already exist will be added.\nYou can have at most 1000 options at any time.\n",
            "items": {
              "properties": {
                "color": {
                  "$ref": "#/components/schemas/Projects.SelectOptionColor"
                },
                "new_value": {
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "tool_fallback": {
                  "nullable": true,
                  "type": "boolean",
                  "x-struct": null,
                  "x-validate": null
                },
                "value": {
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "required": [
                "value"
              ],
              "type": "object",
              "x-struct": null,
              "x-validate": null,
              "x-speakeasy-schema-name": "SelectPropertyConfigUpsertOptionsItems"
            },
            "maxItems": 1000,
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Projects.UpdateMultiSelectPropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateMultiSelectPropertyConfig",
        "x-validate": null,
        "x-speakeasy-schema-name": "SelectPropertyConfig"
      },
      "AskGo.CreateProjectFromPromptRequest": {
        "additionalProperties": false,
        "description": "Create project from prompt request",
        "properties": {
          "prompt": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "prompt"
        ],
        "title": "AskGo.CreateProjectFromPromptRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.AskGo.CreateProjectFromPromptRequest",
        "x-validate": null
      },
      "Pagination.PageMetadata": {
        "additionalProperties": false,
        "description": "Metadata returns for paginated requests. The values set depend on the type of pagination used",
        "properties": {
          "current_offset": {
            "$ref": "#/components/schemas/Pagination.Offset"
          },
          "end_cursor": {
            "$ref": "#/components/schemas/Pagination.Cursor"
          },
          "has_next_page": {
            "example": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "has_previous_page": {
            "example": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "page_size": {
            "$ref": "#/components/schemas/Pagination.PageSize"
          },
          "start_cursor": {
            "$ref": "#/components/schemas/Pagination.Cursor"
          },
          "total_count": {
            "$ref": "#/components/schemas/Pagination.TotalCount"
          }
        },
        "required": [
          "current_offset",
          "page_size",
          "start_cursor",
          "end_cursor",
          "has_next_page",
          "has_previous_page",
          "total_count"
        ],
        "title": "Pagination.PageMetadata",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Pagination.PageMetadata",
        "x-validate": null
      },
      "Billing.ListPlansResponse": {
        "additionalProperties": false,
        "description": "Shows current plans for a workspace",
        "properties": {
          "available_plans": {
            "items": {
              "$ref": "#/components/schemas/Billing.PlanTemplate"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "customer_portal_url": {
            "$ref": "#/components/schemas/Common.NullableURL"
          },
          "effective_plan": {
            "$ref": "#/components/schemas/Billing.Plan"
          },
          "incomplete_plans": {
            "items": {
              "$ref": "#/components/schemas/Billing.Plan"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "templates": {
            "description": "All configured in system self-serve plan templates.\nCan be used to render configured limits for any self-serve plan.\n",
            "items": {
              "$ref": "#/components/schemas/Billing.PlanTemplate"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "effective_plan",
          "incomplete_plans",
          "available_plans",
          "templates"
        ],
        "title": "Billing.ListPlansResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.ListPlansResponse",
        "x-validate": null
      },
      "PropertySimilarTo": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject entity on specific property\nare similar to the one specified in the filter.\n",
        "properties": {
          "limit": {
            "$ref": "#/components/schemas/Matchers.Limit"
          },
          "name": {
            "enum": [
              "property_similar_to"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "score_threshold": {
            "$ref": "#/components/schemas/Matchers.ScoreThreshold"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "value",
          "property_id"
        ],
        "title": "PropertySimilarTo",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldValueSemantics.PropertySimilarTo",
        "x-validate": null
      },
      "Invitations.InvitedUserError": {
        "additionalProperties": false,
        "description": "Invited user error",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Common.Email"
          },
          "error_message": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "role": {
            "$ref": "#/components/schemas/Invitations.Role"
          },
          "state": {
            "enum": [
              "error"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "ErrorMessageType"
          }
        },
        "required": [
          "state",
          "email",
          "role",
          "error_message"
        ],
        "title": "Invitations.InvitedUserError",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.InvitedUserError",
        "x-validate": null
      },
      "Billing.UsageLimitWithUsage": {
        "additionalProperties": false,
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/Billing.LimitAggregation"
          },
          "limit_usage": {
            "$ref": "#/components/schemas/Common.Integer"
          },
          "limit_value": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Common.Integer"
              },
              {
                "$ref": "#/components/schemas/Billing.UnlimitedValue"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "$ref": "#/components/schemas/Billing.LimitName"
          },
          "scope": {
            "$ref": "#/components/schemas/Billing.LimitScope"
          },
          "type": {
            "$ref": "#/components/schemas/Billing.LimitType"
          }
        },
        "required": [
          "name",
          "scope",
          "aggregation",
          "type",
          "limit_value",
          "limit_usage"
        ],
        "title": "Billing.UsageLimitWithUsage",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.UsageLimitWithUsage",
        "x-validate": null
      },
      "Cases.ListCasesOrderBy": {
        "description": "List of field names to order by",
        "items": {
          "enum": [
            "id",
            "name",
            "updated_at"
          ],
          "type": "string",
          "x-struct": null,
          "x-validate": null,
          "x-speakeasy-schema-name": "OrderByItems"
        },
        "title": "Cases.ListCasesOrderBy",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.ListCasesOrderBy",
        "x-validate": null
      },
      "Projects.CollectionPropertyResponse": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "type": {
            "enum": [
              "text",
              "json"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "TextOrJsonType"
          }
        },
        "required": [
          "name",
          "type"
        ],
        "title": "Projects.CollectionPropertyResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.CollectionPropertyResponse",
        "x-validate": null
      },
      "AskGo.MessageMetadata": {
        "additionalProperties": false,
        "description": "Message metadata",
        "properties": {
          "score": {
            "description": "The user score of the message. 1 for positive (\"thumbsup\"), -1 for negative (\"thumbsdown\").\nSet to 'null' to reset the value.\n",
            "enum": [
              1,
              -1
            ],
            "nullable": true,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "AskGo.MessageMetadata",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.AskGo.MessageMetadata",
        "x-validate": null
      },
      "Users.ResourceEffectiveMemberResponse": {
        "additionalProperties": false,
        "description": "A member of a resource",
        "properties": {
          "conditions": {
            "description": "Additional conditions for the permissions. If condition is present for any given permission, the permission is only effective if all the conditions are met.\n",
            "items": {
              "$ref": "#/components/schemas/Users.PermissionCondition"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "permissions": {
            "items": {
              "enum": [
                "use_ask_go",
                "create_projects",
                "update_projects",
                "delete_projects",
                "update_workspaces",
                "delete_workspaces",
                "invite_members",
                "add_members",
                "update_members",
                "remove_members",
                "update_entities",
                "create_entities",
                "delete_entities",
                "recalculate_entities",
                "manage_integrations",
                "manage_properties",
                "manage_views",
                "manage_triggers",
                "manage_billing",
                "manage_tool_integrations",
                "manage_project_exports",
                "read_others",
                "use_spaces",
                "use_cases",
                "create_folders",
                "update_folders",
                "delete_folders",
                "set_access_type"
              ],
              "type": "string",
              "x-struct": null,
              "x-validate": null,
              "x-speakeasy-schema-name": "PermissionsItems"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "role": {
            "enum": [
              "owner",
              "admin",
              "editor",
              "reviewer",
              "worker",
              "reader"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "user": {
            "$ref": "#/components/schemas/Users.UserResponse"
          }
        },
        "required": [
          "role",
          "permissions",
          "conditions",
          "user"
        ],
        "title": "Users.ResourceEffectiveMemberResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.ResourceEffectiveMemberResponse",
        "x-validate": null
      },
      "Projects.UpdateSingleSelectPropertyRequest": {
        "additionalProperties": false,
        "description": "Update specified fields of a Property",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.UpdateSingleSelectPropertyConfig"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "NullableSkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "single_select"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SingleSelectPropertyType"
          }
        },
        "required": [
          "name",
          "description",
          "type",
          "tool",
          "config"
        ],
        "title": "Projects.UpdateSingleSelectPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateSingleSelectPropertyRequest",
        "x-validate": null
      },
      "TYPED_REFERENCE": {
        "additionalProperties": false,
        "description": "Update a field value request",
        "properties": {
          "reference": {
            "$ref": "#/components/schemas/EntityFilters.NullableFilter"
          }
        },
        "required": [
          "reference"
        ],
        "title": "TYPED_REFERENCE",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateFieldValueFromReferenceRequest",
        "x-validate": null
      },
      "Spaces.ResultMessage": {
        "additionalProperties": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/Spaces.ResultData"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "enum": [
              "result"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "results"
        ],
        "title": "Spaces.ResultMessage",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.ResultMessage",
        "x-validate": null
      },
      "Library.LibraryAttributesResponse": {
        "additionalProperties": false,
        "properties": {
          "input_references": {
            "items": {
              "$ref": "#/components/schemas/Library.InputReference"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "description": "The name of the entity",
            "example": "My Entity",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "input_references"
        ],
        "title": "Library.LibraryAttributesResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Library.LibraryAttributesResponse",
        "x-validate": null
      },
      "Projects.ListEntities.PDFVersion": {
        "additionalProperties": false,
        "description": "PDF version of the file",
        "properties": {
          "url": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "url"
        ],
        "title": "Projects.ListEntities.PDFVersion",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.PDFVersion",
        "x-validate": null
      },
      "TYPED_FILE_BASE64": {
        "additionalProperties": false,
        "description": "Update a field value request",
        "properties": {
          "file_base64": {
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "file_name": {
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "file_base64",
          "file_name"
        ],
        "title": "TYPED_FILE_BASE64",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateFieldValueFromFileBase64Request",
        "x-validate": null
      },
      "Projects.ViewPropertyOptions": {
        "additionalProperties": false,
        "description": "View-specific property options",
        "properties": {
          "block_workers_edits": {
            "$ref": "#/components/schemas/Projects.FieldReadonlyOption"
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "property_id"
        ],
        "title": "Projects.ViewPropertyOptions",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ViewPropertyOptions",
        "x-validate": null
      },
      "Projects.Grounding.Claim": {
        "additionalProperties": false,
        "description": "Grounding claim extracted from the field",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Projects.Grounding.Location"
          },
          "object_path": {
            "description": "Semi-virtual JSON path to the field that supports this claim.\nSupported prefixes:\n- `$.motivation` - reference to the reasoning text for the value\n- `$.value.<partial_value_field>` - reference to specific part of the field's value\n- `null` - no virtual path, the claim refers to field's value read as single text block\n",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "source_indices": {
            "items": {
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true,
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "location",
          "source_indices"
        ],
        "title": "Projects.Grounding.Claim",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Grounding.Claim",
        "x-validate": null
      },
      "PropertyNoneOf": {
        "additionalProperties": false,
        "description": "Matches items based on whether the none of the values in the filter exist in the subject",
        "properties": {
          "case_sensitive": {
            "default": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "enum": [
              "property_none_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "values"
        ],
        "title": "PropertyNoneOf",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldFileName.PropertyNoneOf",
        "x-validate": null
      },
      "Cases.Status": {
        "enum": [
          "working",
          "ready",
          "error"
        ],
        "title": "Cases.Status",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.Status",
        "x-validate": null
      },
      "Projects.RecalculateEntitiesRequest": {
        "additionalProperties": false,
        "description": "Entity recalculate request",
        "properties": {
          "force": {
            "default": false,
            "description": "When false, only stale fields will be recalculated.",
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "property_ids": {
            "$ref": "#/components/schemas/Projects.PropertyIdOrSlugList"
          }
        },
        "title": "Projects.RecalculateEntitiesRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.RecalculateEntitiesRequest",
        "x-validate": null
      },
      "Users.ResourceMemberResponse": {
        "additionalProperties": false,
        "description": "A member of a resource",
        "properties": {
          "missing_access": {
            "$ref": "#/components/schemas/Users.MissingAccess"
          },
          "role": {
            "enum": [
              "owner",
              "admin",
              "editor",
              "reviewer",
              "worker",
              "reader"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "user": {
            "$ref": "#/components/schemas/Users.UserResponse"
          }
        },
        "required": [
          "user",
          "role",
          "missing_access"
        ],
        "title": "Users.ResourceMemberResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.ResourceMemberResponse",
        "x-validate": null
      },
      "Common.NonNegativeInteger": {
        "example": 123,
        "minimum": 0,
        "title": "Common.NonNegativeInteger",
        "type": "integer",
        "x-struct": null,
        "x-validate": null
      },
      "AskGo.CreateProjectFromPromptResponse": {
        "additionalProperties": false,
        "description": "Create project from prompt response",
        "properties": {
          "motivation": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "project": {
            "$ref": "#/components/schemas/Projects.ProjectResponse"
          }
        },
        "required": [
          "project",
          "motivation"
        ],
        "title": "AskGo.CreateProjectFromPromptResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.AskGo.CreateProjectFromPromptResponse",
        "x-validate": null
      },
      "Projects.Entities.FieldResponse": {
        "additionalProperties": false,
        "description": "A field",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "entity_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "error_message": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "ground_truth": {
            "nullable": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "indexing_error_message": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "indexing_status": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldStatus"
          },
          "manual_metadata": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldManualMetadataResponse"
          },
          "manual_value": {
            "$ref": "#/components/schemas/Projects.Entities.FieldValueResponse"
          },
          "property_hash": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "property_type": {
            "$ref": "#/components/schemas/Projects.Common.PropertyType"
          },
          "staleness": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldStaleness"
          },
          "status": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldStatus"
          },
          "subproject_preview": {
            "$ref": "#/components/schemas/Projects.ListEntities.SubprojectPreviewResponse"
          },
          "tool_error_message": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "tool_metadata": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldToolMetadataResponse"
          },
          "tool_status": {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldStatus"
          },
          "tool_value": {
            "$ref": "#/components/schemas/Projects.Entities.FieldValueResponse"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          }
        },
        "required": [
          "entity_id",
          "property_id",
          "property_type",
          "status",
          "manual_value",
          "tool_value",
          "error_message",
          "property_hash",
          "ground_truth",
          "staleness",
          "created_at",
          "updated_at"
        ],
        "title": "Projects.Entities.FieldResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.FieldResponse",
        "x-validate": null
      },
      "Templates.CollectionSubproperty": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "enum": [
              "text",
              "json"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "TextOrJsonType"
          }
        },
        "required": [
          "name",
          "type"
        ],
        "title": "Templates.CollectionSubproperty",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.CollectionSubproperty",
        "x-validate": null
      },
      "Imports.FormatOptionsCSV": {
        "additionalProperties": false,
        "description": "CSV format options",
        "properties": {
          "first_row_header": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "separator": {
            "enum": [
              ",",
              ";",
              "\t"
            ],
            "type": "string",
            "x-speakeasy-enums": [
              "COMMA",
              "SEMICOLON",
              "TAB"
            ],
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "separator"
        ],
        "title": "Imports.FormatOptionsCSV",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Imports.FormatOptionsCSV",
        "x-validate": null
      },
      "Projects.ReferencePropertyConfig": {
        "additionalProperties": false,
        "description": "Initial configuration for reference property.\nAllows to provide source project and entity limit (0 for to use system maximum).\n",
        "properties": {
          "entity_limit": {
            "$ref": "#/components/schemas/Projects.ReferenceEntityLimit"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "entity_limit",
          "project_id"
        ],
        "title": "Projects.ReferencePropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ReferencePropertyConfig",
        "x-validate": null
      },
      "Cases.CaseMessageResponse": {
        "additionalProperties": false,
        "description": "A full response from the case",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "sources": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Cases.Source"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "suggestions": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Common.String"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "text": {
            "$ref": "#/components/schemas/Common.String"
          },
          "type": {
            "enum": [
              "response"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "text",
          "sources",
          "suggestions"
        ],
        "title": "Cases.CaseMessageResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.CaseMessageResponse",
        "x-validate": null
      },
      "PropertyLessThan": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject are less than the one specified in the filter",
        "properties": {
          "name": {
            "enum": [
              "property_less_than"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "value": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "value"
        ],
        "title": "PropertyLessThan",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldNumberValue.PropertyLessThan",
        "x-validate": null
      },
      "Users.ConditionManagedRole": {
        "additionalProperties": false,
        "description": "A condition restricting operations based on a role of a user that this operation relates to. Only listed roles can be affected by the operation.\n",
        "properties": {
          "any_of": {
            "description": "List of roles that can be affected by the operation",
            "items": {
              "enum": [
                "owner",
                "admin",
                "editor",
                "reviewer",
                "worker",
                "reader"
              ],
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "permission": {
            "enum": [
              "invite_members",
              "add_members",
              "update_members",
              "remove_members"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "permission",
          "any_of"
        ],
        "title": "Users.ConditionManagedRole",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.ConditionManagedRole",
        "x-validate": null
      },
      "Projects.UpdateUserSelectPropertyRequest": {
        "additionalProperties": false,
        "description": "Update specified fields of a Property",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.UpdateSingleSelectPropertyConfig"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "NullableSkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "user_select"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "UserSelectPropertyType"
          }
        },
        "required": [
          "name",
          "description",
          "type",
          "tool",
          "config"
        ],
        "title": "Projects.UpdateUserSelectPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateUserSelectPropertyRequest",
        "x-validate": null
      },
      "Automations.UrlAction": {
        "additionalProperties": false,
        "description": "Webhook action",
        "properties": {
          "type": {
            "enum": [
              "webhook"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "url": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "type",
          "url"
        ],
        "title": "Automations.UrlAction",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Automations.UrlAction",
        "x-validate": null
      },
      "Billing.UsageLimitsWithUsage": {
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Billing.UsageLimit"
            },
            {
              "$ref": "#/components/schemas/Billing.UsageLimitWithUsage"
            }
          ],
          "x-struct": null,
          "x-validate": null
        },
        "title": "Billing.UsageLimitsWithUsage",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.UsageLimitsWithUsage",
        "x-validate": null
      },
      "TokenRequest": {
        "description": "Parameters for requesting an OAuth token",
        "example": {
          "audience": "https://api.example.com",
          "client_id": "your-client-id",
          "client_secret": "your-client-secret",
          "grant_type": "client_credentials",
          "scope": "read:data write:data"
        },
        "properties": {
          "audience": {
            "description": "API audience",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "client_id": {
            "description": "OAuth client ID",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "client_secret": {
            "description": "OAuth client secret (if using client credentials)",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "code": {
            "description": "Authorization code (for authorization code grant)",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "code_verifier": {
            "description": "PKCE code verifier",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "grant_type": {
            "description": "OAuth grant type",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "password": {
            "description": "Password (for password grant)",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "redirect_uri": {
            "description": "Redirect URI (for authorization code grant)",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "refresh_token": {
            "description": "Refresh token (for refresh token grant)",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "scope": {
            "description": "Requested scopes",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "username": {
            "description": "Username (for password grant)",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "grant_type",
          "client_id"
        ],
        "title": "TokenRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.OAuth.TokenRequest",
        "x-validate": null
      },
      "Templates.FileCollectionPropertyConfig": {
        "additionalProperties": false,
        "description": "Initial configuration for file collection property.",
        "properties": {
          "additional_properties": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Templates.Property"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "file_property_id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "max_rows": {
            "$ref": "#/components/schemas/Projects.MaxRows"
          },
          "pdf_split_mode": {
            "$ref": "#/components/schemas/Projects.PDFSplitMode"
          },
          "pdf_split_size": {
            "$ref": "#/components/schemas/Projects.PDFSplitSize"
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Templates.CollectionSubproperty"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "properties"
        ],
        "title": "Templates.FileCollectionPropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.FileCollectionPropertyConfig",
        "x-validate": null
      },
      "Hubs.CreateHubRequest": {
        "additionalProperties": false,
        "description": "Request to create a new hub",
        "properties": {
          "description": {
            "description": "Description of the hub",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "description": "Name of the hub",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "description"
        ],
        "title": "Hubs.CreateHubRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Hubs.CreateHubRequest",
        "x-validate": null
      },
      "Projects.ListViewsResponse": {
        "additionalProperties": false,
        "description": "List project views response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Projects.ViewResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "data"
        ],
        "title": "Projects.ListViewsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListViewsResponse",
        "x-validate": null
      },
      "Imports.PrepareImportRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Imports.PrepareImportRequestExistingProject"
          },
          {
            "$ref": "#/components/schemas/Imports.PrepareImportRequestNewProject"
          }
        ],
        "title": "Imports.PrepareImportRequest",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Imports.PrepareImportRequest",
        "x-validate": null
      },
      "NoneOf": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject have none of the values specified in the filter",
        "properties": {
          "name": {
            "enum": [
              "none_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "values"
        ],
        "title": "NoneOf",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.ActivateViewId.NoneOf",
        "x-validate": null
      },
      "Imports.ErrorDetails": {
        "additionalProperties": false,
        "description": "Error details. When field has status `error`, this represents reason for that error.\nWhen field has status `complete`, this indicates that import wasn't processed in full due to\nerror that got ignored (e.g. billing error when setting `billing_errors_as_warnings` is `true`).\n",
        "nullable": true,
        "properties": {
          "code": {
            "enum": [
              "internal_server_error",
              "system_limits_exceeded",
              "billing_limits_exceeded",
              "bad_request",
              "invalid_import_file"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "message": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "code",
          "message"
        ],
        "title": "Imports.ErrorDetails",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Imports.ErrorDetails",
        "x-validate": null
      },
      "ActivateViewId": {
        "additionalProperties": false,
        "description": "Filter entities based on active view id",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnyOf"
              },
              {
                "$ref": "#/components/schemas/NoneOf"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "active_view_id"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "ActivateViewId",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.ActivateViewId",
        "x-validate": null
      },
      "Templates.View": {
        "additionalProperties": false,
        "nullable": false,
        "properties": {
          "filters": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Templates.ViewFilter"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "num_pinned_properties": {
            "$ref": "#/components/schemas/Common.NonNegativeInteger"
          },
          "property_ids": {
            "items": {
              "$ref": "#/components/schemas/Templates.TemplateID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "property_layouts": {
            "items": {
              "$ref": "#/components/schemas/Templates.ViewPropertyLayout"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "property_options": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Templates.ViewPropertyOptions"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "property_layouts",
          "property_ids",
          "name"
        ],
        "title": "Templates.View",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.View",
        "x-validate": null
      },
      "AskGo.Action": {
        "additionalProperties": false,
        "description": "Action",
        "properties": {
          "action": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "additionalProperties": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "action",
          "metadata"
        ],
        "title": "AskGo.Action",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.AskGo.Action",
        "x-validate": null
      },
      "Templates.FileCollectionProperty": {
        "additionalProperties": false,
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Templates.FileCollectionPropertyConfig"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Templates.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "file_collection"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "FileCollectionPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "config"
        ],
        "title": "Templates.FileCollectionProperty",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.FileCollectionProperty",
        "x-validate": null
      },
      "Integrations.StartFilePickerSessionResponse": {
        "additionalProperties": false,
        "description": "Start file picker session response.",
        "properties": {
          "access_token": {
            "description": "Access token to use for 3rd party file picker session",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "expires_at": {
            "description": "Expiration date-time of the access token (ISO 8601)",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "description": "Type of the access token",
            "enum": [
              "oauth2"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "access_token",
          "type",
          "expires_at"
        ],
        "title": "Integrations.StartFilePickerSessionResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Integrations.StartFilePickerSessionResponse",
        "x-validate": null
      },
      "Projects.PropertyLayoutSlug": {
        "additionalProperties": false,
        "properties": {
          "height": {
            "$ref": "#/components/schemas/Common.NonNegativeInteger"
          },
          "property_slug": {
            "$ref": "#/components/schemas/Projects.PropertySlug"
          },
          "width": {
            "$ref": "#/components/schemas/Common.NonNegativeInteger"
          },
          "x": {
            "$ref": "#/components/schemas/Common.Integer"
          },
          "y": {
            "$ref": "#/components/schemas/Common.Integer"
          }
        },
        "required": [
          "property_slug",
          "x",
          "y",
          "width",
          "height"
        ],
        "title": "Projects.PropertyLayoutSlug",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PropertyLayoutSlug",
        "x-validate": null
      },
      "Projects.UpdateMultiSelectPropertyRequest": {
        "additionalProperties": false,
        "description": "Update specified fields of a Property",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.UpdateMultiSelectPropertyConfig"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "NullableSkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "multi_select"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "MultiSelectPropertyType"
          }
        },
        "required": [
          "name",
          "description",
          "type",
          "tool",
          "config"
        ],
        "title": "Projects.UpdateMultiSelectPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateMultiSelectPropertyRequest",
        "x-validate": null
      },
      "Templates.PropertyInput": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Templates.DetailedPropertyInput"
          },
          {
            "$ref": "#/components/schemas/Templates.TemplateID"
          }
        ],
        "title": "Templates.PropertyInput",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.PropertyInput",
        "x-validate": null
      },
      "Projects.Grounding.Grounding": {
        "additionalProperties": false,
        "description": "Grounding information for the field",
        "properties": {
          "claims": {
            "items": {
              "$ref": "#/components/schemas/Projects.Grounding.Claim"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/Projects.Grounding.Source"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "sources",
          "claims"
        ],
        "title": "Projects.Grounding.Grounding",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Grounding.Grounding",
        "x-validate": null
      },
      "Cases.EditCaseQueryRequest": {
        "additionalProperties": false,
        "properties": {
          "agent_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "file_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "hub_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "search_web": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "text": {
            "$ref": "#/components/schemas/Common.String"
          }
        },
        "title": "Cases.EditCaseQueryRequest",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "Projects.ListEntities.FieldReferenceResponse": {
        "additionalProperties": false,
        "description": "Response for a reference value",
        "properties": {
          "matched_entity_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "updated_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Common.UUID"
              },
              {
                "$ref": "#/components/schemas/Projects.Common.PropertyTool"
              }
            ],
            "nullable": true,
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "UpdatedBy"
          },
          "value": {
            "$ref": "#/components/schemas/EntityFilters.NullableFilter"
          }
        },
        "required": [
          "value",
          "matched_entity_ids",
          "updated_by"
        ],
        "title": "Projects.ListEntities.FieldReferenceResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldReferenceResponse",
        "x-validate": null
      },
      "PropertyNoneOfFieldStatus": {
        "additionalProperties": false,
        "description": "Matches items based on whether the none of the values in the filter exist in the subject",
        "properties": {
          "case_sensitive": {
            "default": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "enum": [
              "property_none_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/Projects.ListEntities.FieldStatus"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "values"
        ],
        "title": "PropertyNoneOfFieldStatus",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldStatus.PropertyNoneOf",
        "x-validate": null
      },
      "Folders.ListFoldersResponse": {
        "additionalProperties": false,
        "description": "List of folders",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Folders.FolderInListResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Folders.ListFoldersResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Folders.ListFoldersResponse",
        "x-validate": null
      },
      "Projects.MembershipInfo": {
        "additionalProperties": false,
        "description": "Project's membership information for the calling user",
        "nullable": true,
        "properties": {
          "conditions": {
            "description": "Additional conditions for the permissions. If condition is present for any given permission, the permission is only effective if all the conditions are met.\n",
            "items": {
              "$ref": "#/components/schemas/Users.PermissionCondition"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "permissions": {
            "items": {
              "enum": [
                "use_ask_go",
                "create_projects",
                "update_projects",
                "delete_projects",
                "update_workspaces",
                "delete_workspaces",
                "invite_members",
                "add_members",
                "update_members",
                "remove_members",
                "update_entities",
                "create_entities",
                "delete_entities",
                "recalculate_entities",
                "manage_integrations",
                "manage_properties",
                "manage_views",
                "manage_triggers",
                "manage_billing",
                "manage_tool_integrations",
                "manage_project_exports",
                "read_others",
                "use_spaces",
                "use_cases",
                "create_folders",
                "update_folders",
                "delete_folders",
                "set_access_type"
              ],
              "type": "string",
              "x-struct": null,
              "x-validate": null,
              "x-speakeasy-schema-name": "PermissionsItems"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "role": {
            "enum": [
              "owner",
              "admin",
              "editor",
              "reviewer",
              "worker",
              "reader"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "role",
          "permissions",
          "conditions"
        ],
        "title": "Projects.MembershipInfo",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.MembershipInfo",
        "x-validate": null
      },
      "EntityFilters.NullableOrEmptyObject": {
        "additionalProperties": false,
        "nullable": true,
        "properties": {},
        "title": "EntityFilters.NullableOrEmptyObject",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "TYPED_FILE_URL": {
        "additionalProperties": false,
        "description": "Update a field value request",
        "properties": {
          "file_name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "file_url": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "file_url"
        ],
        "title": "TYPED_FILE_URL",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateFieldValueFromFileURLRequest",
        "x-validate": null,
        "x-speakeasy-schema-name": "TypedFileUrl"
      },
      "Users.MissingAccessItem": {
        "additionalProperties": false,
        "properties": {
          "resource_key": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "resource_type": {
            "enum": [
              "workspace",
              "space",
              "case",
              "folder",
              "project",
              "user",
              "integration"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "resource_type",
          "resource_key"
        ],
        "title": "Users.MissingAccessItem",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.MissingAccessItem",
        "x-validate": null
      },
      "Projects.ListEntities.ListEntitiesOrderBy": {
        "description": "List of property slugs/ids to order by",
        "example": [
          "id"
        ],
        "items": {
          "type": "string",
          "x-struct": null,
          "x-validate": null
        },
        "nullable": true,
        "title": "Projects.ListEntities.ListEntitiesOrderBy",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.ListEntitiesOrderBy",
        "x-validate": null
      },
      "Projects.CloneProjectRequest": {
        "additionalProperties": false,
        "description": "Clone project request",
        "properties": {
          "clone_entities": {
            "default": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "parent_folder_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "template_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "name",
          "template_id"
        ],
        "title": "Projects.CloneProjectRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.CloneProjectRequest",
        "x-validate": null
      },
      "Cases.AddCaseQueryRequest": {
        "additionalProperties": false,
        "properties": {
          "agent_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "file_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "hub_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "search_web": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "text": {
            "$ref": "#/components/schemas/Common.String"
          }
        },
        "required": [
          "text",
          "file_ids"
        ],
        "title": "Cases.AddCaseQueryRequest",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "Billing.LimitScope": {
        "enum": [
          "workspace",
          "project",
          "parent_entity",
          "calculation"
        ],
        "title": "Billing.LimitScope",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.LimitScope",
        "x-validate": null
      },
      "Invitations.CreateInvitationRequest": {
        "additionalProperties": false,
        "description": "Create invitation request. Invites one or more users into a workspace",
        "properties": {
          "invitations": {
            "items": {
              "$ref": "#/components/schemas/Invitations.InviteUser"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "invitations"
        ],
        "title": "Invitations.CreateInvitationRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.CreateInvitationRequest",
        "x-validate": null
      },
      "Spaces.ListSpacesOrderBy": {
        "description": "List of field names to order by",
        "example": [
          "name",
          "updated_at"
        ],
        "items": {
          "enum": [
            "id",
            "name",
            "updated_at"
          ],
          "type": "string",
          "x-struct": null,
          "x-validate": null,
          "x-speakeasy-schema-name": "OrderByItems"
        },
        "nullable": true,
        "title": "Spaces.ListSpacesOrderBy",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.ListSpacesOrderBy",
        "x-validate": null
      },
      "FieldValueSemantics": {
        "additionalProperties": false,
        "description": "Filter entities based on field's value semantics (similarity search)",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertySimilarTo"
              },
              {
                "$ref": "#/components/schemas/SimilarTo"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "field_value_semantics"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "FieldValueSemantics",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldValueSemantics",
        "x-validate": null
      },
      "Projects.SkipFieldRequest": {
        "additionalProperties": false,
        "description": "Skip field request",
        "properties": {},
        "title": "Projects.SkipFieldRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SkipFieldRequest",
        "x-validate": null
      },
      "Projects.UpdateBasicPropertyRequest": {
        "additionalProperties": false,
        "description": "Update specified fields of a Property",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "NullableSkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "$ref": "#/components/schemas/Projects.BasicPropertyType"
          }
        },
        "required": [
          "name",
          "description",
          "type",
          "tool"
        ],
        "title": "Projects.UpdateBasicPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateBasicPropertyRequest",
        "x-validate": null
      },
      "Cases.ConfirmFilesUploadedRequest": {
        "additionalProperties": false,
        "properties": {
          "file_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "file_ids"
        ],
        "title": "Cases.ConfirmFilesUploadedRequest",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "Spaces.ListSpacesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Spaces.Space"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Spaces.ListSpacesResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.ListSpacesResponse",
        "x-validate": null
      },
      "Projects.ListEntities.FieldStaleness.UpToDate": {
        "additionalProperties": false,
        "description": "Field is up to date",
        "properties": {
          "status": {
            "enum": [
              "up_to_date"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "status"
        ],
        "title": "Projects.ListEntities.FieldStaleness.UpToDate",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldStaleness.UpToDate",
        "x-validate": null
      },
      "EntityStatus": {
        "additionalProperties": false,
        "description": "Filter entities based on their fields status",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ViewAnyOfFieldStatuses"
              },
              {
                "$ref": "#/components/schemas/ViewNoneOfFieldStatuses"
              },
              {
                "$ref": "#/components/schemas/ViewAllOfFieldStatuses"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "entity_status"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "EntityStatus",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.EntityStatus",
        "x-validate": null
      },
      "Spaces.Message": {
        "additionalProperties": false,
        "oneOf": [
          {
            "$ref": "#/components/schemas/Spaces.LogMessage"
          },
          {
            "$ref": "#/components/schemas/Spaces.QueryMessage"
          },
          {
            "$ref": "#/components/schemas/Spaces.ProgressMessage"
          },
          {
            "$ref": "#/components/schemas/Spaces.ResultMessage"
          }
        ],
        "title": "Spaces.Message",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.Message",
        "x-validate": null
      },
      "FieldNumberUnit": {
        "additionalProperties": false,
        "description": "Filter entities based on field's number unit",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyAnyOfString"
              },
              {
                "$ref": "#/components/schemas/PropertyNoneOfString"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "field_number_unit"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "FieldNumberUnit",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldNumberUnit",
        "x-validate": null
      },
      "Projects.StartFileUploadRequest": {
        "additionalProperties": false,
        "description": "Request for a URL for a file upload for a field",
        "properties": {
          "filename": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "filename"
        ],
        "title": "Projects.StartFileUploadRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.StartFileUploadRequest",
        "x-validate": null
      },
      "Projects.ListProjectsOrderBy": {
        "description": "List of field names to order by",
        "example": [
          "name",
          "updated_at"
        ],
        "items": {
          "enum": [
            "id",
            "name",
            "updated_at"
          ],
          "type": "string",
          "x-struct": null,
          "x-validate": null,
          "x-speakeasy-schema-name": "OrderByItems"
        },
        "nullable": true,
        "title": "Projects.ListProjectsOrderBy",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListProjectsOrderBy",
        "x-validate": null
      },
      "Cases.AsyncFileUploadResponse": {
        "additionalProperties": false,
        "properties": {
          "file_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "file_id"
        ],
        "title": "Cases.AsyncFileUploadResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.AsyncFileUploadResponse",
        "x-validate": null
      },
      "Projects.BasicPropertyType": {
        "enum": [
          "text",
          "file",
          "json",
          "url",
          "data"
        ],
        "title": "Projects.BasicPropertyType",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.BasicPropertyType",
        "x-validate": null
      },
      "Projects.Entities.AudioTranscription": {
        "additionalProperties": false,
        "description": "Transcription of an audio file",
        "properties": {
          "text": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "text"
        ],
        "title": "Projects.Entities.AudioTranscription",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.AudioTranscription",
        "x-validate": null
      },
      "Projects.SetFieldValueRequest": {
        "additionalProperties": false,
        "description": "Set a field value request",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Projects.SetFieldValueArrayRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.SetFieldValueFromTextRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.SetFieldValueReferenceRequest"
          }
        ],
        "title": "Projects.SetFieldValueRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SetFieldValueRequest",
        "x-validate": null
      },
      "Projects.Entities.FieldSelectResponse": {
        "additionalProperties": false,
        "description": "Response for a select value",
        "properties": {
          "raw_text": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Common.UUID"
              },
              {
                "$ref": "#/components/schemas/Projects.Common.PropertyTool"
              }
            ],
            "nullable": true,
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "UpdatedBy"
          },
          "value": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "value",
          "raw_text",
          "updated_by"
        ],
        "title": "Projects.Entities.FieldSelectResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.FieldSelectResponse",
        "x-validate": null
      },
      "Projects.ListEntities.FieldManualMetadataResponse": {
        "additionalProperties": false,
        "description": "Metadata of the value of a field. All fields are optional.",
        "properties": {
          "field_name": {
            "description": "Custom name of collection field.",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "value_score": {
            "description": "Used to mark if the fields value is useful or not (commenting on the quality of it).\nUse value '1' as \"thumbs-up\" or '-1\" as \"thumbs-down\".\n",
            "enum": [
              -1,
              1
            ],
            "nullable": true,
            "type": "integer",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "ValueScore"
          }
        },
        "title": "Projects.ListEntities.FieldManualMetadataResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldManualMetadataResponse",
        "x-validate": null
      },
      "Folders.FolderTreeResponse": {
        "additionalProperties": false,
        "properties": {
          "root_nodes": {
            "description": "Folder tree nodes",
            "items": {
              "$ref": "#/components/schemas/Folders.FolderNodeResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "root_nodes"
        ],
        "title": "Folders.FolderTreeResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Folders.FolderTreeResponse",
        "x-validate": null
      },
      "Projects.PropertyLayout": {
        "additionalProperties": false,
        "description": "Property layout",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Projects.PropertyLayoutId"
          },
          {
            "$ref": "#/components/schemas/Projects.PropertyLayoutSlug"
          }
        ],
        "title": "Projects.PropertyLayout",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PropertyLayout",
        "x-validate": null
      },
      "Imports.Settings": {
        "additionalProperties": false,
        "description": "General, format independent settings for the import.",
        "nullable": true,
        "properties": {
          "billing_errors_as_warnings": {
            "default": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "entity_limit": {
            "nullable": true,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Imports.Settings",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Imports.Settings",
        "x-validate": null
      },
      "Billing.LimitType": {
        "enum": [
          "hard",
          "soft"
        ],
        "title": "Billing.LimitType",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.LimitType",
        "x-validate": null
      },
      "Projects.ProjectType": {
        "default": "regular",
        "enum": [
          "regular",
          "agentic_search",
          "integrated",
          "case"
        ],
        "title": "Projects.ProjectType",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ProjectType",
        "x-validate": null
      },
      "Spaces.DataProjectId": {
        "additionalProperties": false,
        "properties": {
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "type": {
            "enum": [
              "project_id"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "type",
          "project_id"
        ],
        "title": "Spaces.DataProjectId",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.DataProjectId",
        "x-validate": null
      },
      "Invitations.ProjectInvitation": {
        "additionalProperties": false,
        "description": "A project invitation",
        "properties": {
          "email": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "expires_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "invite_url": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "role": {
            "$ref": "#/components/schemas/Invitations.Role"
          },
          "status": {
            "enum": [
              "accepted",
              "pending",
              "expired"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "InvitationStatus"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "workspace_role": {
            "$ref": "#/components/schemas/Invitations.Role"
          }
        },
        "required": [
          "id",
          "workspace_id",
          "email",
          "role",
          "status",
          "expires_at",
          "invite_url",
          "project_id",
          "workspace_role"
        ],
        "title": "Invitations.ProjectInvitation",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.ProjectInvitation",
        "x-validate": null
      },
      "Projects.Grounding.BoundingBox": {
        "additionalProperties": false,
        "description": "Bounding box for a grounding source",
        "properties": {
          "page": {
            "minimum": 1,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "xmax": {
            "minimum": 0,
            "type": "number",
            "x-struct": null,
            "x-validate": null
          },
          "xmin": {
            "minimum": 0,
            "type": "number",
            "x-struct": null,
            "x-validate": null
          },
          "ymax": {
            "minimum": 0,
            "type": "number",
            "x-struct": null,
            "x-validate": null
          },
          "ymin": {
            "minimum": 0,
            "type": "number",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "page",
          "xmin",
          "ymin",
          "xmax",
          "ymax"
        ],
        "title": "Projects.Grounding.BoundingBox",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Grounding.BoundingBox",
        "x-validate": null
      },
      "Projects.PropertyIdOrSlugList": {
        "items": {
          "$ref": "#/components/schemas/Projects.PropertyIdOrSlug"
        },
        "title": "Projects.PropertyIdOrSlugList",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PropertyIdOrSlugList",
        "x-validate": null
      },
      "Cases.CaseMessagePartialResponse": {
        "additionalProperties": false,
        "description": "A partial response from the case",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "sources": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Cases.Source"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "suggestions": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Common.String"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "text": {
            "$ref": "#/components/schemas/Common.String"
          },
          "type": {
            "enum": [
              "partial_response"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "text",
          "sources",
          "suggestions"
        ],
        "title": "Cases.CaseMessagePartialResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.CaseMessagePartialResponse",
        "x-validate": null
      },
      "Common.FileExtension": {
        "enum": [
          "jpg",
          "png",
          "bmp",
          "pdf",
          "jpeg",
          "gif",
          "tiff",
          "tif",
          "webp",
          "txt",
          "csv",
          "md",
          "html",
          "json",
          "xlsx",
          "doc",
          "docx"
        ],
        "example": "png",
        "title": "Common.FileExtension",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.FileExtension",
        "x-validate": null
      },
      "Projects.Entities.FieldFileResponse": {
        "additionalProperties": false,
        "description": "Response for a file value",
        "properties": {
          "ocr_pages": {
            "items": {
              "$ref": "#/components/schemas/Projects.Entities.OCRPage"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "original_filename": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "pdf": {
            "$ref": "#/components/schemas/Projects.ListEntities.PDFVersion"
          },
          "transcription": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Projects.Entities.AudioTranscription"
              },
              {
                "$ref": "#/components/schemas/Projects.Entities.OCRTranscription"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "updated_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Common.UUID"
              },
              {
                "$ref": "#/components/schemas/Projects.Common.PropertyTool"
              }
            ],
            "nullable": true,
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "UpdatedBy"
          },
          "value": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "value",
          "original_filename",
          "updated_by"
        ],
        "title": "Projects.Entities.FieldFileResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.FieldFileResponse",
        "x-validate": null
      },
      "Projects.SetFieldValueReferenceRequest": {
        "additionalProperties": false,
        "description": "Set a field value request with entity filter based values",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/EntityFilters.Filter"
          }
        },
        "required": [
          "value"
        ],
        "title": "Projects.SetFieldValueReferenceRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SetFieldValueReferenceRequest",
        "x-validate": null
      },
      "Projects.Grounding.Location": {
        "additionalProperties": false,
        "description": "Location for a claim in the grounded text",
        "properties": {
          "length": {
            "minimum": 0,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "offset": {
            "minimum": 0,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "offset",
          "length"
        ],
        "title": "Projects.Grounding.Location",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Grounding.Location",
        "x-validate": null
      },
      "Tools.KeyManager.ToolKeyResponse": {
        "additionalProperties": false,
        "description": "Tool key metadata.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "integration": {
            "$ref": "#/components/schemas/Tools.KeyManager.Integration"
          },
          "secret_prefix": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "secret_project_id": {
            "$ref": "#/components/schemas/Tools.KeyManager.SecretProjectId"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "integration",
          "workspace_id",
          "secret_prefix",
          "secret_project_id"
        ],
        "title": "Tools.KeyManager.ToolKeyResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.KeyManager.ToolKeyResponse",
        "x-validate": null
      },
      "Workspaces.UpdateWorkspaceIconRequest": {
        "additionalProperties": false,
        "description": "Upload of workspace icon",
        "properties": {
          "file": {
            "format": "binary",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "file"
        ],
        "title": "Workspaces.UpdateWorkspaceIconRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Workspaces.UpdateWorkspaceIconRequest",
        "x-validate": null,
        "x-speakeasy-schema-name": "UpdateProjectCoverImageRequest"
      },
      "Common.Integer": {
        "title": "Common.Integer",
        "type": "integer",
        "x-struct": null,
        "x-validate": null
      },
      "Exports.ListExportsResponse": {
        "additionalProperties": false,
        "description": "List export response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Exports.ExportResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Exports.ListExportsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Exports.ListExportsResponse",
        "x-validate": null
      },
      "Billing.Plan": {
        "additionalProperties": false,
        "description": "Represents plan attached to a workspace",
        "properties": {
          "billing_period": {
            "$ref": "#/components/schemas/Billing.PlanBillingPeriod"
          },
          "current_period_end": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "current_period_start": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "limits": {
            "$ref": "#/components/schemas/Billing.UsageLimitsWithUsage"
          },
          "name": {
            "$ref": "#/components/schemas/Billing.PlanName"
          },
          "provider": {
            "$ref": "#/components/schemas/Billing.PlanProvider"
          },
          "status": {
            "$ref": "#/components/schemas/Billing.PlanStatus"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "provider",
          "billing_period",
          "current_period_start",
          "current_period_end",
          "limits"
        ],
        "title": "Billing.Plan",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.Plan",
        "x-validate": null
      },
      "Cases.CaseResponse": {
        "additionalProperties": false,
        "description": "A single case",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "error_reason": {
            "$ref": "#/components/schemas/Common.NullableString"
          },
          "files": {
            "items": {
              "$ref": "#/components/schemas/Cases.CaseFile"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Cases.CaseMessage"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "$ref": "#/components/schemas/Common.NullableString"
          },
          "outputs": {
            "items": {
              "$ref": "#/components/schemas/Cases.CaseOutput"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "status": {
            "$ref": "#/components/schemas/Cases.Status"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "user_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "name",
          "user_id",
          "status",
          "outputs",
          "error_reason",
          "created_at",
          "updated_at",
          "messages",
          "files"
        ],
        "title": "Cases.CaseResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.CaseResponse",
        "x-validate": null
      },
      "Projects.AddUserSelectPropertyRequest": {
        "additionalProperties": false,
        "description": "Add property request",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.UserSelectPropertyRequest"
          },
          "default_view_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "user_select"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "UserSelectPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "description",
          "config"
        ],
        "title": "Projects.AddUserSelectPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.AddUserSelectPropertyRequest",
        "x-validate": null
      },
      "Matchers.Limit": {
        "default": 100,
        "maximum": 1000,
        "minimum": 1,
        "title": "Matchers.Limit",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Matchers.Limit",
        "x-validate": null
      },
      "Billing.PlanUpgradeRequest": {
        "additionalProperties": false,
        "description": "Represents plan upgrade request.",
        "properties": {
          "billing_period": {
            "$ref": "#/components/schemas/Billing.PlanBillingPeriod"
          },
          "plan_name": {
            "$ref": "#/components/schemas/Billing.PlanName"
          }
        },
        "required": [
          "plan_name",
          "billing_period"
        ],
        "title": "Billing.PlanUpgradeRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.PlanUpgradeRequest",
        "x-validate": null
      },
      "Projects.AddNumberPropertyRequest": {
        "additionalProperties": false,
        "description": "Add property request",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.NumberPropertyConfig"
          },
          "default_view_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "number"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "NumberPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "description",
          "config"
        ],
        "title": "Projects.AddNumberPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.AddNumberPropertyRequest",
        "x-validate": null
      },
      "Workspaces.WorkspaceMetadata": {
        "additionalProperties": false,
        "description": "Metadata for a workspace",
        "properties": {
          "tolt_referral": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Workspaces.WorkspaceMetadata",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Workspaces.WorkspaceMetadata",
        "x-validate": null
      },
      "Cases.CaseFile": {
        "additionalProperties": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/Common.NullableDateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "name": {
            "$ref": "#/components/schemas/Common.String"
          },
          "status": {
            "$ref": "#/components/schemas/Cases.CaseFileStatus"
          },
          "summary": {
            "$ref": "#/components/schemas/Common.NullableString"
          },
          "url": {
            "$ref": "#/components/schemas/Common.NullableString"
          },
          "user_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "name",
          "user_id",
          "url",
          "created_at",
          "deleted_at",
          "summary"
        ],
        "title": "Cases.CaseFile",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.CaseFile",
        "x-validate": null
      },
      "Common.APIError": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "example": "bad_request",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "message": {
            "example": "Bad Request",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "code",
          "message"
        ],
        "title": "Common.APIError",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.APIError",
        "x-validate": null
      },
      "Projects.Entities.FieldTextResponse": {
        "additionalProperties": false,
        "description": "Response for a text value",
        "properties": {
          "grounding": {
            "$ref": "#/components/schemas/Projects.Grounding.Grounding"
          },
          "has_grounding": {
            "default": false,
            "nullable": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "updated_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Common.UUID"
              },
              {
                "$ref": "#/components/schemas/Projects.Common.PropertyTool"
              }
            ],
            "nullable": true,
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "UpdatedBy"
          },
          "value": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "value",
          "updated_by",
          "has_grounding"
        ],
        "title": "Projects.Entities.FieldTextResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.FieldTextResponse",
        "x-validate": null
      },
      "Projects.AddReferencePropertyRequest": {
        "additionalProperties": false,
        "description": "Add property request",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.ReferencePropertyConfig"
          },
          "default_view_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "reference"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "ReferencePropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "description",
          "config"
        ],
        "title": "Projects.AddReferencePropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.AddReferencePropertyRequest",
        "x-validate": null
      },
      "Projects.CreateEntityRequest": {
        "additionalProperties": false,
        "description": "Create entity request.\nFor collections, the `parent_entity_id` is required and has to be set to entity of a parent project.\n",
        "properties": {
          "fields": {
            "additionalProperties": {
              "$ref": "#/components/schemas/field_value"
            },
            "description": "Fields to prefill with values, note that the field key is the property id or property slug for that field.\n        Fields not mentioned are going to be set to an empty value.",
            "title": "fields",
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "parent_entity_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          }
        },
        "title": "Projects.CreateEntityRequest",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "Common.DateTime": {
        "description": "DateTime in RFC3339 format",
        "example": "2020-01-20T14:00:00Z",
        "format": "date-time",
        "title": "Common.DateTime",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.DateTime",
        "x-validate": null
      },
      "Tools.Integrations.ToolIntegrationsResponse": {
        "additionalProperties": false,
        "description": "Response with list of all configured tool integrations.",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Tools.Integrations.Integration"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Tools.Integrations.ToolIntegrationsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.Integrations.ToolIntegrationsResponse",
        "x-validate": null
      },
      "Projects.ListEntities.SubprojectPreviewResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Projects.ListEntities.CollectionPreview"
          }
        ],
        "title": "Projects.ListEntities.SubprojectPreviewResponse",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.SubprojectPreviewResponse",
        "x-validate": null
      },
      "Templates.ExportProjectsRequest": {
        "additionalProperties": false,
        "properties": {
          "project_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "project_ids"
        ],
        "title": "Templates.ExportProjectsRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.ExportProjectsRequest",
        "x-validate": null
      },
      "AskGo.Message": {
        "additionalProperties": false,
        "description": "Message",
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/AskGo.Action"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "author_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "files_uploaded": {
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "metadata": {
            "$ref": "#/components/schemas/AskGo.MessageMetadata"
          },
          "text": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "timestamp": {
            "$ref": "#/components/schemas/Common.DateTime"
          }
        },
        "required": [
          "id",
          "text",
          "timestamp",
          "author_id",
          "files_uploaded",
          "metadata"
        ],
        "title": "AskGo.Message",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.AskGo.Message",
        "x-validate": null
      },
      "Tools.KeyManager.SecretProjectId": {
        "description": "The project identifier associated with the secret. Only use with integrations that\nrequire it (GoogleAI, Azure).\n",
        "nullable": true,
        "title": "Tools.KeyManager.SecretProjectId",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.KeyManager.SecretProjectId",
        "x-validate": null
      },
      "Projects.UpdateFileCollectionPropertyConfig": {
        "additionalProperties": false,
        "description": "File Collection Property configuration.\nYou can send any combination of the available configuration options.\n",
        "properties": {
          "max_rows": {
            "$ref": "#/components/schemas/Projects.MaxRows"
          },
          "pdf_split_mode": {
            "$ref": "#/components/schemas/Projects.PDFSplitMode"
          },
          "pdf_split_size": {
            "$ref": "#/components/schemas/Projects.PDFSplitSize"
          },
          "remove_properties": {
            "default": [],
            "description": "Remove collection properties.\nIf the property doesn't exist, it will be ignored.\n",
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "upsert_properties": {
            "default": [],
            "description": "Add or update properties.\nIf the value already exists, it will be updated either with new type, or new name.\nValues that don't already exist will be added.\n",
            "items": {
              "properties": {
                "name": {
                  "minLength": 1,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "new_name": {
                  "minLength": 1,
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "new_type": {
                  "enum": [
                    "text",
                    "json"
                  ],
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null,
                  "x-speakeasy-schema-name": "TextOrJsonType"
                },
                "type": {
                  "enum": [
                    "text",
                    "json"
                  ],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null,
                  "x-speakeasy-schema-name": "TextOrJsonType"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "x-struct": null,
              "x-validate": null,
              "x-speakeasy-schema-name": "FileCollectionPropertyConfigUpsertItems"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Projects.UpdateFileCollectionPropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateFileCollectionPropertyConfig",
        "x-validate": null
      },
      "Tools.KeyManager.Integration": {
        "enum": [
          "open_ai",
          "google_ai",
          "google_genai",
          "bing_search",
          "azure_ocr",
          "internal",
          "fire_crawl",
          "amazon_textract",
          "azure_open_ai",
          "anthropic",
          "vertex_ai_claude",
          "perplexity"
        ],
        "title": "Tools.KeyManager.Integration",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.KeyManager.Integration",
        "x-validate": null
      },
      "Projects.ListEntities.FieldSelectResponse": {
        "additionalProperties": false,
        "description": "Response for a select value",
        "properties": {
          "raw_text": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Common.UUID"
              },
              {
                "$ref": "#/components/schemas/Projects.Common.PropertyTool"
              }
            ],
            "nullable": true,
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "UpdatedBy"
          },
          "value": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "value",
          "raw_text",
          "updated_by"
        ],
        "title": "Projects.ListEntities.FieldSelectResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldSelectResponse",
        "x-validate": null
      },
      "Common.NullableString": {
        "nullable": true,
        "title": "Common.NullableString",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.NullableString",
        "x-validate": null
      },
      "Spaces.DoQuery": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Spaces.QueryData"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "query": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "query",
          "data"
        ],
        "title": "Spaces.DoQuery",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.DoQuery",
        "x-validate": null
      },
      "Imports.ListImportsResponse": {
        "additionalProperties": false,
        "description": "List import response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Imports.ImportResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Imports.ListImportsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Imports.ListImportsResponse",
        "x-validate": null
      },
      "ApiKeys.ListApiKeysOrderBy": {
        "description": "List of field names to order by",
        "example": [
          "id"
        ],
        "items": {
          "enum": [
            "id"
          ],
          "type": "string",
          "x-struct": null,
          "x-validate": null
        },
        "nullable": true,
        "title": "ApiKeys.ListApiKeysOrderBy",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.ApiKeys.ListApiKeysOrderBy",
        "x-validate": null
      },
      "Cases.ListCasesResponse": {
        "additionalProperties": false,
        "description": "A list of cases",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Cases.CaseResponseInList"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Cases.ListCasesResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.ListCasesResponse",
        "x-validate": null
      },
      "PropertyNoneOfString": {
        "additionalProperties": false,
        "description": "Matches items based on whether the none of the values in the filter exist in the subject",
        "properties": {
          "case_sensitive": {
            "default": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "enum": [
              "property_none_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "values"
        ],
        "title": "PropertyNoneOfString",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldSelectOptionValue.PropertyNoneOf",
        "x-validate": null
      },
      "Spaces.ListMessagesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Spaces.Message"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Spaces.ListMessagesResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.ListMessagesResponse",
        "x-validate": null
      },
      "Exports.ListExportsOrderBy": {
        "description": "List of field names to order by",
        "example": [
          "id"
        ],
        "items": {
          "enum": [
            "id"
          ],
          "type": "string",
          "x-struct": null,
          "x-validate": null
        },
        "nullable": true,
        "title": "Exports.ListExportsOrderBy",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Exports.ListExportsOrderBy",
        "x-validate": null
      },
      "Invitations.Role": {
        "enum": [
          "admin",
          "editor",
          "reviewer",
          "worker",
          "reader"
        ],
        "title": "Invitations.Role",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.Role",
        "x-validate": null
      },
      "Projects.ProjectCoverImageURLs": {
        "additionalProperties": false,
        "description": "Project's cover image URLs",
        "properties": {
          "high": {
            "$ref": "#/components/schemas/Common.URL"
          },
          "low": {
            "$ref": "#/components/schemas/Common.URL"
          }
        },
        "required": [
          "high",
          "low"
        ],
        "title": "Projects.ProjectCoverImageURLs",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ProjectCoverImageURLs",
        "x-validate": null
      },
      "PropertyContainsAnyOfString": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject contains the one specified in the filter",
        "properties": {
          "case_sensitive": {
            "default": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "enum": [
              "property_contains_any_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "values"
        ],
        "title": "PropertyContainsAnyOfString",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldMetadataFieldName.PropertyContainsAnyOf",
        "x-validate": null
      },
      "Integrations.NotStartedConnectionResponse": {
        "additionalProperties": false,
        "description": "A not started connection.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "integration_id": {
            "$ref": "#/components/schemas/Integrations.IntegrationId"
          },
          "status": {
            "$ref": "#/components/schemas/Integrations.ConnectionStatus"
          },
          "user_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "status",
          "user_id",
          "integration_id"
        ],
        "title": "Integrations.NotStartedConnectionResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Integrations.NotStartedConnectionResponse",
        "x-validate": null
      },
      "Library.InputReference": {
        "additionalProperties": false,
        "properties": {
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "project_id",
          "property_id"
        ],
        "title": "Library.InputReference",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Library.InputReference",
        "x-validate": null
      },
      "Projects.UpdateViewRequest": {
        "additionalProperties": false,
        "description": "Update project view request",
        "properties": {
          "assignable_property_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "filters": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Projects.ViewFilter"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "num_pinned_properties": {
            "$ref": "#/components/schemas/Common.NonNegativeInteger"
          },
          "property_ids": {
            "$ref": "#/components/schemas/Projects.PropertyIdOrSlugList"
          },
          "property_layouts": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyLayout"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "property_options": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Projects.ViewPropertyOptions"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "property_layouts",
          "property_ids"
        ],
        "title": "Projects.UpdateViewRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateViewRequest",
        "x-validate": null
      },
      "Projects.ListEntities.FieldStaleness.Unavailable": {
        "additionalProperties": false,
        "description": "Field staleness is unavailable (no status could be determined)",
        "properties": {
          "status": {
            "enum": [
              "unavailable"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "status"
        ],
        "title": "Projects.ListEntities.FieldStaleness.Unavailable",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldStaleness.Unavailable",
        "x-validate": null
      },
      "Projects.ListEntities.ListEntitiesResponse": {
        "additionalProperties": false,
        "description": "List entities response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Projects.ListEntities.EntityResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Projects.ListEntities.ListEntitiesResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.ListEntitiesResponse",
        "x-validate": null
      },
      "PropertyAnyOf": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject are in the values specified in the filter",
        "properties": {
          "case_sensitive": {
            "default": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "enum": [
              "property_any_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "values"
        ],
        "title": "PropertyAnyOf",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldFileName.PropertyAnyOf",
        "x-validate": null
      },
      "Users.AddMemberRequest": {
        "additionalProperties": false,
        "description": "Adds a user to a resource",
        "properties": {
          "role": {
            "enum": [
              "admin",
              "editor",
              "reviewer",
              "worker",
              "reader"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "role"
        ],
        "title": "Users.AddMemberRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.AddMemberRequest",
        "x-validate": null
      },
      "Projects.ListEntities.FieldValueResponse": {
        "additionalProperties": false,
        "description": "Response for a field value",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldFileResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldTextResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldSelectResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldReferenceResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldNumberResponse"
          }
        ],
        "title": "Projects.ListEntities.FieldValueResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldValueResponse",
        "x-validate": null
      },
      "Matchers.ScoreThreshold": {
        "default": 0.9,
        "nullable": true,
        "title": "Matchers.ScoreThreshold",
        "type": "number",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Matchers.ScoreThreshold",
        "x-validate": null
      },
      "Templates.MultiSelectProperty": {
        "additionalProperties": false,
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.MultiSelectPropertyConfig"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Templates.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "multi_select"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "MultiSelectPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "config"
        ],
        "title": "Templates.MultiSelectProperty",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.MultiSelectProperty",
        "x-validate": null
      },
      "Integrations.ConfirmConnectionRequest": {
        "additionalProperties": false,
        "description": "Request to confirm Connection creation.",
        "properties": {},
        "title": "Integrations.ConfirmConnectionRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Integrations.ConfirmConnectionRequest",
        "x-validate": null
      },
      "Folders.Recursive": {
        "description": "Whether to recursively delete all nested folders and projects",
        "example": true,
        "title": "Folders.Recursive",
        "type": "boolean",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Folders.Recursive",
        "x-validate": null
      },
      "Imports.ListImportsOrderBy": {
        "description": "List of field names to order by.\nBy default the list is ordered by `created_at` in descending order.\n",
        "example": [
          "id"
        ],
        "items": {
          "enum": [
            "id",
            "created_at"
          ],
          "type": "string",
          "x-struct": null,
          "x-validate": null
        },
        "nullable": true,
        "title": "Imports.ListImportsOrderBy",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Imports.ListImportsOrderBy",
        "x-validate": null
      },
      "Common.NullableURL": {
        "example": "https://example.com",
        "nullable": true,
        "pattern": "http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+",
        "title": "Common.NullableURL",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.NullableURL",
        "x-validate": null
      },
      "Tools.KeyManager.SecretValue": {
        "description": "The secret value for the Tool's credential.\nIn most cases this is just an ApiKey or similar.\nFor GoogleAI this needs to be valid JSON Service Account credential.\n",
        "title": "Tools.KeyManager.SecretValue",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.KeyManager.SecretValue",
        "x-validate": null
      },
      "Billing.PlanStatus": {
        "description": "Status of the plan",
        "enum": [
          "active",
          "canceled",
          "pending_checkout",
          "pending_payment"
        ],
        "title": "Billing.PlanStatus",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.PlanStatus",
        "x-validate": null
      },
      "Projects.UpdateNumberPropertyRequest": {
        "additionalProperties": false,
        "description": "Update specified fields of a Property",
        "properties": {
          "config": {
            "properties": {
              "format": {
                "enum": [
                  "auto",
                  "custom"
                ],
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "format_custom": {
                "$ref": "#/components/schemas/Projects.UpdateNumberFormatCustom"
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "NullableSkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "number"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "NumberPropertyType"
          }
        },
        "required": [
          "name",
          "description",
          "type",
          "tool",
          "config"
        ],
        "title": "Projects.UpdateNumberPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateNumberPropertyRequest",
        "x-validate": null
      },
      "Users.MemberId": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Common.UUID"
          },
          {
            "enum": [
              "anyone_in_folder",
              "anyone_in_workspace"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        ],
        "title": "Users.MemberId",
        "x-struct": null,
        "x-validate": null
      },
      "Pagination.Limit": {
        "description": "The maximum number of records to return when using `offset` pagination",
        "example": 50,
        "nullable": true,
        "title": "Pagination.Limit",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Pagination.Limit",
        "x-validate": null
      },
      "Projects.ListProjectsResponse": {
        "additionalProperties": false,
        "description": "List projects response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Projects.ProjectResponseInList"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Projects.ListProjectsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListProjectsResponse",
        "x-validate": null
      },
      "AskGo.ListSessionsResponse": {
        "additionalProperties": false,
        "description": "List sessions response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/AskGo.SessionResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "AskGo.ListSessionsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.AskGo.ListSessionsResponse",
        "x-validate": null
      },
      "Billing.PlanName": {
        "description": "Name of the plan",
        "enum": [
          "free",
          "pro",
          "enterprise"
        ],
        "title": "Billing.PlanName",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.PlanName",
        "x-validate": null
      },
      "Projects.ListEntities.FieldNumberResponse": {
        "additionalProperties": false,
        "description": "Response for a number value",
        "properties": {
          "has_grounding": {
            "default": false,
            "nullable": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "raw_text": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Common.UUID"
              },
              {
                "$ref": "#/components/schemas/Projects.Common.PropertyTool"
              }
            ],
            "nullable": true,
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "UpdatedBy"
          },
          "value": {
            "properties": {
              "number": {
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "unit": {
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": [
              "number",
              "unit"
            ],
            "type": "object",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "FieldNumberValue"
          }
        },
        "required": [
          "value",
          "raw_text",
          "updated_by",
          "has_grounding"
        ],
        "title": "Projects.ListEntities.FieldNumberResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldNumberResponse",
        "x-validate": null
      },
      "Projects.ProjectResponse": {
        "additionalProperties": false,
        "description": "A project",
        "properties": {
          "auto_recalculations": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "cover_image_urls": {
            "$ref": "#/components/schemas/Projects.ProjectCoverImageURLs"
          },
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "main_view_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "parent_folder_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "parent_property": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Projects.PropertyResponse"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "views": {
            "items": {
              "$ref": "#/components/schemas/Projects.ViewResponse"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "workspace_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "workspace_id",
          "properties",
          "parent_property",
          "parent_folder_id",
          "cover_image_urls",
          "views",
          "main_view_id",
          "auto_recalculations",
          "updated_at",
          "created_at"
        ],
        "title": "Projects.ProjectResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ProjectResponse",
        "x-validate": null
      },
      "Projects.Common.PropertyType": {
        "enum": [
          "single_select",
          "multi_select",
          "user_select",
          "text",
          "file",
          "json",
          "collection",
          "file_collection",
          "url",
          "reference",
          "number",
          "data"
        ],
        "title": "Projects.Common.PropertyType",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Common.PropertyType",
        "x-validate": null
      },
      "Projects.StartFileUploadResponse": {
        "additionalProperties": false,
        "description": "URL to upload a file for a field.",
        "properties": {
          "confirm_upload_url": {
            "$ref": "#/components/schemas/Common.URL"
          },
          "file_upload_url": {
            "$ref": "#/components/schemas/Common.URL"
          }
        },
        "required": [
          "file_upload_url",
          "confirm_upload_url"
        ],
        "title": "Projects.StartFileUploadResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.StartFileUploadResponse",
        "x-validate": null
      },
      "Library.ProjectResponse": {
        "additionalProperties": false,
        "description": "A project",
        "properties": {
          "auto_recalculations": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "cover_image_urls": {
            "$ref": "#/components/schemas/Projects.ProjectCoverImageURLs"
          },
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "main_view_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "parent_folder_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "parent_property": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Projects.PropertyResponse"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "views": {
            "items": {
              "$ref": "#/components/schemas/Projects.ViewResponse"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "workspace_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "workspace_id",
          "properties",
          "parent_property",
          "parent_folder_id",
          "cover_image_urls",
          "views",
          "main_view_id",
          "auto_recalculations",
          "updated_at",
          "created_at"
        ],
        "title": "Library.ProjectResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Library.ProjectResponse",
        "x-validate": null
      },
      "FieldMetadataFieldName": {
        "additionalProperties": false,
        "description": "Filter entities based on field's custom field name",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyAnyOfString"
              },
              {
                "$ref": "#/components/schemas/PropertyNoneOfString"
              },
              {
                "$ref": "#/components/schemas/PropertyContainsAnyOfString"
              },
              {
                "$ref": "#/components/schemas/PropertyContainsNoneOfString"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "field_metadata_field_name"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "FieldMetadataFieldName",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldMetadataFieldName",
        "x-validate": null
      },
      "Templates.Property": {
        "additionalProperties": false,
        "oneOf": [
          {
            "$ref": "#/components/schemas/Templates.FileCollectionProperty"
          },
          {
            "$ref": "#/components/schemas/Templates.CollectionProperty"
          },
          {
            "$ref": "#/components/schemas/Templates.ReferenceProperty"
          },
          {
            "$ref": "#/components/schemas/Templates.MultiSelectProperty"
          },
          {
            "$ref": "#/components/schemas/Templates.SingleSelectProperty"
          },
          {
            "$ref": "#/components/schemas/Templates.NumberProperty"
          },
          {
            "$ref": "#/components/schemas/Templates.BasicProperty"
          }
        ],
        "title": "Templates.Property",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.Property",
        "x-validate": null
      },
      "Invitations.InviteUser": {
        "additionalProperties": false,
        "description": "Object describing a user to invite to a workspace",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Common.Email"
          },
          "role": {
            "$ref": "#/components/schemas/Invitations.Role"
          }
        },
        "required": [
          "email",
          "role"
        ],
        "title": "Invitations.InviteUser",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.InviteUser",
        "x-validate": null
      },
      "Projects.SetFieldMetadataRequest": {
        "additionalProperties": false,
        "description": "Set a field metadata request",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Projects.Common.FieldManualMetadata"
          }
        },
        "required": [
          "value"
        ],
        "title": "Projects.SetFieldMetadataRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SetFieldMetadataRequest",
        "x-validate": null
      },
      "Workspaces.WorkspaceDisabled": {
        "description": "Whether the workspace is disabled",
        "title": "Workspaces.WorkspaceDisabled",
        "type": "boolean",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Workspaces.WorkspaceDisabled",
        "x-validate": null
      },
      "SimilarTo": {
        "additionalProperties": false,
        "description": "Matches items based on whether any of the values from the subject entity are similar to the one specified in the filter.\n",
        "properties": {
          "limit": {
            "$ref": "#/components/schemas/Matchers.Limit"
          },
          "name": {
            "enum": [
              "similar_to"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "score_threshold": {
            "$ref": "#/components/schemas/Matchers.ScoreThreshold"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "value"
        ],
        "title": "SimilarTo",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldValueSemantics.SimilarTo",
        "x-validate": null
      },
      "Cases.StartFileUploadRequest": {
        "additionalProperties": false,
        "properties": {
          "filename": {
            "$ref": "#/components/schemas/Common.String"
          }
        },
        "required": [
          "filename"
        ],
        "title": "Cases.StartFileUploadRequest",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "PropertyGreaterThan": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject are greater than the one specified in the filter",
        "properties": {
          "name": {
            "enum": [
              "property_greater_than"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "value": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "value"
        ],
        "title": "PropertyGreaterThan",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldNumberValue.PropertyGreaterThan",
        "x-validate": null
      },
      "Spaces.ResultData": {
        "additionalProperties": false,
        "oneOf": [
          {
            "$ref": "#/components/schemas/Spaces.DataProjectId"
          },
          {
            "$ref": "#/components/schemas/Spaces.DataText"
          }
        ],
        "title": "Spaces.ResultData",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.ResultData",
        "x-validate": null
      },
      "Invitations.OrderBy": {
        "description": "List of field names to order by",
        "example": [
          "id"
        ],
        "items": {
          "enum": [
            "id"
          ],
          "type": "string",
          "x-struct": null,
          "x-validate": null
        },
        "nullable": true,
        "title": "Invitations.OrderBy",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.OrderBy",
        "x-validate": null
      },
      "Projects.ListPropertiesResponse": {
        "additionalProperties": false,
        "description": "A list of properties",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Projects.ListPropertiesResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListPropertiesResponse",
        "x-validate": null
      },
      "Templates.ImportProjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "instantiated_objects": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "instantiated_objects"
        ],
        "title": "Templates.ImportProjectsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.ImportProjectsResponse",
        "x-validate": null
      },
      "Cases.CaseMessageAgentRun": {
        "additionalProperties": false,
        "description": "An agent run message",
        "properties": {
          "agent_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "in_progress": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "output_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "type": {
            "enum": [
              "agent_run"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "agent_id",
          "in_progress",
          "output_id"
        ],
        "title": "Cases.CaseMessageAgentRun",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.CaseMessageAgentRun",
        "x-validate": null
      },
      "Invitations.InvitedUserSuccess": {
        "additionalProperties": false,
        "description": "Invited user success",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Common.Email"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "invite_url": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "role": {
            "$ref": "#/components/schemas/Invitations.Role"
          },
          "state": {
            "enum": [
              "success"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "email",
          "role",
          "invite_url"
        ],
        "title": "Invitations.InvitedUserSuccess",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.InvitedUserSuccess",
        "x-validate": null
      },
      "Projects.Entities.FieldValueResponse": {
        "description": "Response for a field value",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Projects.Entities.FieldFileResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.Entities.FieldTextResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.Entities.FieldSelectResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.Entities.FieldReferenceResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.Entities.FieldNumberResponse"
          }
        ],
        "title": "Projects.Entities.FieldValueResponse",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.FieldValueResponse",
        "x-validate": null
      },
      "Cases.CaseOutput": {
        "additionalProperties": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "entity_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "project_id",
          "entity_id",
          "created_at"
        ],
        "title": "Cases.CaseOutput",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.CaseOutput",
        "x-validate": null
      },
      "ParentEntityId": {
        "additionalProperties": false,
        "description": "Filter entities based on parent entity id",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnyOf"
              },
              {
                "$ref": "#/components/schemas/NoneOf"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "parent_entity_id"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "ParentEntityId",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.ParentEntityId",
        "x-validate": null
      },
      "TYPED_SELECT": {
        "additionalProperties": false,
        "description": "Update a field value request for properties with array values",
        "properties": {
          "options": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "options"
        ],
        "title": "TYPED_SELECT",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateFieldValueArrayRequest",
        "x-validate": null
      },
      "Tools.Integrations.ToggleIntegrationStateRequest": {
        "additionalProperties": false,
        "description": "Request to toggle integration state.",
        "properties": {
          "enabled": {
            "description": "Whether the integration should be enabled or disabled.",
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "integration": {
            "$ref": "#/components/schemas/Tools.Integrations.IntegrationName"
          }
        },
        "required": [
          "integration",
          "enabled"
        ],
        "title": "Tools.Integrations.ToggleIntegrationStateRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.Integrations.ToggleIntegrationStateRequest",
        "x-validate": null
      },
      "Spaces.QueryMessage": {
        "additionalProperties": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Spaces.QueryData"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "query": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "enum": [
              "query"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "QueryMessageType"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "user_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "query",
          "user_id",
          "data"
        ],
        "title": "Spaces.QueryMessage",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.QueryMessage",
        "x-validate": null
      },
      "Imports.Format": {
        "enum": [
          "csv"
        ],
        "title": "Imports.Format",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Imports.Format",
        "x-validate": null
      },
      "Invitations.WorkspaceInvitationVerifyResponse": {
        "additionalProperties": false,
        "description": "Workspace invitation verification response",
        "properties": {
          "expires_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "status": {
            "enum": [
              "pending",
              "expired"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "InvitationVerifyStatus"
          }
        },
        "required": [
          "status",
          "expires_at"
        ],
        "title": "Invitations.WorkspaceInvitationVerifyResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.WorkspaceInvitationVerifyResponse",
        "x-validate": null
      },
      "TextValue": {
        "additionalProperties": false,
        "deprecated": true,
        "description": "DEPRECATED: Use FieldTextValue instead",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyAnyOfString"
              },
              {
                "$ref": "#/components/schemas/PropertyNoneOfString"
              },
              {
                "$ref": "#/components/schemas/PropertyContainsAnyOf"
              },
              {
                "$ref": "#/components/schemas/PropertyContainsNoneOf"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "text_value"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "TextValue",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.TextValue",
        "x-validate": null
      },
      "Projects.Entities.EntityResponse": {
        "additionalProperties": false,
        "description": "An entity",
        "properties": {
          "active_view_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "fields": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Projects.Entities.FieldResponse"
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "parent_entity_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "project_id",
          "fields"
        ],
        "title": "Projects.Entities.EntityResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.EntityResponse",
        "x-validate": null
      },
      "Tools.Integrations.SupportedInputs": {
        "additionalProperties": false,
        "description": "Supported input for the tool.",
        "properties": {
          "max_input_count": {
            "$ref": "#/components/schemas/Tools.Integrations.MaxInputCount"
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Projects.Common.PropertyType"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "properties",
          "max_input_count"
        ],
        "title": "Tools.Integrations.SupportedInputs",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.Integrations.SupportedInputs",
        "x-validate": null
      },
      "Projects.AddBasicPropertyRequest": {
        "additionalProperties": false,
        "description": "Add property request",
        "properties": {
          "default_view_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "$ref": "#/components/schemas/Projects.BasicPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "description"
        ],
        "title": "Projects.AddBasicPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.AddBasicPropertyRequest",
        "x-validate": null
      },
      "Projects.Common.FieldManualMetadata": {
        "additionalProperties": false,
        "description": "Metadata of the value of a field. All fields are optional.",
        "properties": {
          "field_name": {
            "description": "Custom name of collection field.",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "value_score": {
            "description": "Used to mark if the fields value is useful or not (commenting on the quality of it).\nUse value '1' as \"thumbs-up\" or '-1\" as \"thumbs-down\".\n",
            "enum": [
              -1,
              1
            ],
            "nullable": true,
            "type": "integer",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "ValueScore"
          }
        },
        "title": "Projects.Common.FieldManualMetadata",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Common.FieldManualMetadata",
        "x-validate": null
      },
      "Spaces.SystemMessage": {
        "additionalProperties": false,
        "oneOf": [
          {
            "$ref": "#/components/schemas/Spaces.ProgressMessage"
          },
          {
            "$ref": "#/components/schemas/Spaces.ErrorMessage"
          }
        ],
        "title": "Spaces.SystemMessage",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.SystemMessage",
        "x-validate": null
      },
      "Spaces.Status": {
        "enum": [
          "running",
          "success",
          "error"
        ],
        "title": "Spaces.Status",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.Status",
        "x-validate": null
      },
      "Tools.KeyManager.UpsertToolKeyRequest": {
        "additionalProperties": false,
        "description": "Request to create or update a tool key.",
        "properties": {
          "integration": {
            "$ref": "#/components/schemas/Tools.KeyManager.Integration"
          },
          "secret_project_id": {
            "$ref": "#/components/schemas/Tools.KeyManager.SecretProjectId"
          },
          "secret_value": {
            "$ref": "#/components/schemas/Tools.KeyManager.SecretValue"
          }
        },
        "required": [
          "integration",
          "secret_value"
        ],
        "title": "Tools.KeyManager.UpsertToolKeyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.KeyManager.UpsertToolKeyRequest",
        "x-validate": null
      },
      "Id": {
        "additionalProperties": false,
        "deprecated": true,
        "description": "DEPRECATED: Use EntityId instead",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnyOf"
              },
              {
                "$ref": "#/components/schemas/NoneOf"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "id"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "Id",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.Id",
        "x-validate": null
      },
      "ViewNoneOfFieldStatuses": {
        "additionalProperties": false,
        "description": "Matches items in a view based on whether none of their field statuses are in the filter values",
        "properties": {
          "name": {
            "enum": [
              "view_none_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/Projects.ListEntities.FieldStatus"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "view_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "name",
          "view_id",
          "values"
        ],
        "title": "ViewNoneOfFieldStatuses",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.EntityStatus.ViewNoneOf",
        "x-validate": null
      },
      "Integrations.ConnectSessionToken": {
        "description": "A session token that can be used to initiate provider authentication.",
        "nullable": false,
        "title": "Integrations.ConnectSessionToken",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Integrations.ConnectSessionToken",
        "x-validate": null
      },
      "Users.User": {
        "additionalProperties": false,
        "description": "A user",
        "properties": {
          "email": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "first_name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "last_activity_at": {
            "$ref": "#/components/schemas/Common.NullableDateTime"
          },
          "last_name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "profile_picture_url": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "id"
        ],
        "title": "Users.User",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.User",
        "x-validate": null
      },
      "FILE_UPLOAD_FROM_URL": {
        "additionalProperties": false,
        "description": "Upload a file from a URL to a Case",
        "properties": {
          "file_name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "file_url": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "file_url"
        ],
        "title": "FILE_UPLOAD_FROM_URL",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.AsyncFileUploadFromURLRequest",
        "x-validate": null,
        "x-speakeasy-schema-name": "TypedFileUrl"
      },
      "Invitations.ProjectInvitationResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Invitations.ProjectInvitation"
          }
        ],
        "title": "Invitations.ProjectInvitationResponse",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.ProjectInvitationResponse",
        "x-validate": null
      },
      "Projects.CollectionPropertyConfigResponse": {
        "additionalProperties": false,
        "description": "Collection property configuration",
        "properties": {
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Projects.CollectionPropertyResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "subproject_config": {
            "$ref": "#/components/schemas/Projects.SubProjectPropertyConfigResponse"
          }
        },
        "required": [
          "subproject_config",
          "properties"
        ],
        "title": "Projects.CollectionPropertyConfigResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.CollectionPropertyConfigResponse",
        "x-validate": null
      },
      "Users.ShowMissingAccess": {
        "default": false,
        "description": "Whether to show which resources users doesn't have access to,\npreventing them from accessing current resource.\n",
        "title": "Users.ShowMissingAccess",
        "type": "boolean",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.ShowMissingAccess",
        "x-validate": null
      },
      "Automations.ListAutomationsOrderBy": {
        "description": "List of field names to order by",
        "example": [
          "id"
        ],
        "items": {
          "enum": [
            "id"
          ],
          "type": "string",
          "x-struct": null,
          "x-validate": null
        },
        "nullable": true,
        "title": "Automations.ListAutomationsOrderBy",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Automations.ListAutomationsOrderBy",
        "x-validate": null
      },
      "Projects.ListEntities.ListEntityIdsResponse": {
        "additionalProperties": false,
        "description": "List entity IDs response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Projects.ListEntities.ListEntityIdsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.ListEntityIdsResponse",
        "x-validate": null
      },
      "Status": {
        "additionalProperties": false,
        "deprecated": true,
        "description": "DEPRECATED: Use FieldStatus instead",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyAnyOfFieldStatus"
              },
              {
                "$ref": "#/components/schemas/PropertyNoneOfFieldStatus"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "status"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "Status",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.Status",
        "x-validate": null
      },
      "Projects.Entities.FieldNumberResponse": {
        "additionalProperties": false,
        "description": "Response for a number value",
        "properties": {
          "grounding": {
            "$ref": "#/components/schemas/Projects.Grounding.Grounding"
          },
          "has_grounding": {
            "default": false,
            "nullable": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "raw_text": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Common.UUID"
              },
              {
                "$ref": "#/components/schemas/Projects.Common.PropertyTool"
              }
            ],
            "nullable": true,
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "UpdatedBy"
          },
          "value": {
            "properties": {
              "number": {
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "unit": {
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": [
              "number",
              "unit"
            ],
            "type": "object",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "FieldNumberValue"
          }
        },
        "required": [
          "value",
          "raw_text",
          "updated_by",
          "has_grounding"
        ],
        "title": "Projects.Entities.FieldNumberResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.FieldNumberResponse",
        "x-validate": null
      },
      "Projects.Common.PropertyTool": {
        "enum": [
          "manual",
          "dall_e_3",
          "imagen",
          "whisper",
          "bing_search",
          "ocr",
          "url_scrape",
          "http",
          "code",
          "aws_ocr",
          "gpt_4_1",
          "gpt_4_1_azure",
          "gpt_4_1_mini",
          "gpt_4_1_mini_azure",
          "gpt_4_1_nano",
          "gpt_4_1_nano_azure",
          "gpt_4",
          "web_search",
          "gpt_4o",
          "gpt_4o_azure",
          "gpt_4o_mini",
          "gpt_4o_mini_azure",
          "o3",
          "o3_mini",
          "o4_mini",
          "o4_mini_azure",
          "o1",
          "o1_mini",
          "gpt_3_5",
          "gpt_3_5_azure",
          "go",
          "gemini_pro",
          "gemini_1_5_pro",
          "gemini_1_5_flash",
          "gemini_2_0_flash",
          "gemini_2_0_flash_lite",
          "gemini_2_5_pro_genai",
          "gemini_2_5_flash_genai",
          "gemini_2_5_flash_thinking_genai",
          "gemini_2_0_flash_lite_genai",
          "gemini_2_5_pro",
          "gemini_2_5_flash",
          "gemini_2_5_flash_thinking",
          "gemini_pro_vision",
          "claude_3_opus",
          "claude_3_5_sonnet",
          "claude_3_sonnet",
          "claude_3_haiku",
          "claude_3_5_haiku",
          "claude_3_7_sonnet",
          "claude_3_7_thinking",
          "claude_3_5_sonnet_vertex_ai",
          "claude_3_sonnet_vertex_ai",
          "claude_3_haiku_vertex_ai",
          "claude_3_5_haiku_vertex_ai",
          "claude_3_7_sonnet_vertex_ai",
          "claude_3_7_thinking_vertex_ai",
          "claude_3_opus_vertex_ai",
          "claude_4_sonnet",
          "claude_4_opus",
          "claude_4_sonnet_thinking",
          "claude_4_opus_thinking",
          "claude_4_sonnet_vertex_ai",
          "claude_4_opus_vertex_ai",
          "claude_4_sonnet_thinking_vertex_ai",
          "claude_4_opus_thinking_vertex_ai"
        ],
        "title": "Projects.Common.PropertyTool",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Common.PropertyTool",
        "x-validate": null
      },
      "EntityFilters.SimpleFilter": {
        "description": "Simple filter specifies rule that subject has to fulfill. Each simple filter consist of `subject` and `matcher`. Subject is name of property you want to filter on. For example if you want to filter by entity id you should specify {subject: 'entity_id'}. Next you have to specify matcher which defines how you would like to filer. If you are interested in any of entities within array of entity ids you should specify: {matcher: {name: 'any_of', values: [list of entity ids]}}",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ActivateViewId"
          },
          {
            "$ref": "#/components/schemas/EntityId"
          },
          {
            "$ref": "#/components/schemas/EntityStatus"
          },
          {
            "$ref": "#/components/schemas/FieldSelectOptionValue"
          },
          {
            "$ref": "#/components/schemas/FieldTextValue"
          },
          {
            "$ref": "#/components/schemas/ParentEntityId"
          },
          {
            "$ref": "#/components/schemas/FieldStatus"
          },
          {
            "$ref": "#/components/schemas/FieldFileName"
          },
          {
            "$ref": "#/components/schemas/FieldMetadataFieldName"
          },
          {
            "$ref": "#/components/schemas/FieldValueSemantics"
          },
          {
            "$ref": "#/components/schemas/FieldNumberValue"
          },
          {
            "$ref": "#/components/schemas/FieldNumberUnit"
          },
          {
            "$ref": "#/components/schemas/Id"
          },
          {
            "$ref": "#/components/schemas/SelectOptionValue"
          },
          {
            "$ref": "#/components/schemas/TextValue"
          },
          {
            "$ref": "#/components/schemas/Status"
          }
        ],
        "title": "EntityFilters.SimpleFilter",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.SimpleFilter",
        "x-validate": null
      },
      "Projects.ListEntities.EntityPreview": {
        "additionalProperties": false,
        "description": "Preview of an entity",
        "properties": {
          "entity_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "field_previews": {
            "items": {
              "$ref": "#/components/schemas/Projects.ListEntities.FieldPreview"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "entity_id",
          "field_previews"
        ],
        "title": "Projects.ListEntities.EntityPreview",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.EntityPreview",
        "x-validate": null
      },
      "Tools.KeyManager.UpsertToolModelConfigRequest": {
        "additionalProperties": false,
        "description": "Request to create or update a tool model configuration.",
        "properties": {
          "per_minute_request_rate_limit": {
            "minimum": 60,
            "nullable": true,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "per_minute_token_rate_limit": {
            "minimum": 100000,
            "nullable": true,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "per_minute_request_rate_limit",
          "per_minute_token_rate_limit"
        ],
        "title": "Tools.KeyManager.UpsertToolModelConfigRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.KeyManager.UpsertToolModelConfigRequest",
        "x-validate": null
      },
      "Common.NullableDateTime": {
        "description": "DateTime in RFC3339 format",
        "example": "2020-01-20T14:00:00Z",
        "format": "date-time",
        "nullable": true,
        "title": "Common.NullableDateTime",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.NullableDateTime",
        "x-validate": null
      },
      "Pagination.First": {
        "description": "The number of records to return after the provided cursor; used in combination with `after`",
        "example": 50,
        "nullable": true,
        "title": "Pagination.First",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Pagination.First",
        "x-validate": null
      },
      "Users.MissingAccess": {
        "description": "List of parent resources in system that user doesn't have access to,\nwhich will prevent access to this resource.\n* If null, the data wasn't requested or isn't available; this will always happen for `anyone` user,\n  after role deletion or when listing multiple users without `show_missing_access=true` parameter.\n* When this list is empty, the user has full access to the resource according to their listed role.\n* When this list is not empty, the user needs to be granted read access to the resources in the list before\n  they can access the current resource using listed role.\n",
        "items": {
          "$ref": "#/components/schemas/Users.MissingAccessItem"
        },
        "nullable": true,
        "title": "Users.MissingAccess",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.MissingAccess",
        "x-validate": null
      },
      "Projects.PropertySlug": {
        "description": "Property slug",
        "example": "property-name",
        "pattern": "^[a-z_-][a-z0-9_-]*$",
        "title": "Projects.PropertySlug",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PropertySlug",
        "x-validate": null
      },
      "Projects.ReferencePropertyConfigResponse": {
        "additionalProperties": false,
        "description": "Reference property configuration",
        "properties": {
          "entity_limit": {
            "$ref": "#/components/schemas/Projects.ReferenceEntityLimit"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          }
        },
        "required": [
          "entity_limit",
          "project_id"
        ],
        "title": "Projects.ReferencePropertyConfigResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ReferencePropertyConfigResponse",
        "x-validate": null
      },
      "Integrations.ListConnectionsResponse": {
        "additionalProperties": false,
        "description": "List of connections and associated metadata.",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Integrations.ConnectionResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "data"
        ],
        "title": "Integrations.ListConnectionsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Integrations.ListConnectionsResponse",
        "x-validate": null
      },
      "Folders.FolderResponse": {
        "additionalProperties": false,
        "description": "A folder in a workspace",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "membership_info": {
            "$ref": "#/components/schemas/Projects.MembershipInfo"
          },
          "name": {
            "$ref": "#/components/schemas/Folders.FolderName"
          },
          "parent_folder_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at",
          "workspace_id",
          "parent_folder_id"
        ],
        "title": "Folders.FolderResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Folders.FolderResponse",
        "x-validate": null
      },
      "PropertyContainsAnyOf": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject contains the one specified in the filter",
        "properties": {
          "case_sensitive": {
            "default": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "enum": [
              "property_contains_any_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "values"
        ],
        "title": "PropertyContainsAnyOf",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldTextValue.PropertyContainsAnyOf",
        "x-validate": null
      },
      "Billing.LimitName": {
        "enum": [
          "input_file_size_bytes",
          "project_count",
          "entity_count",
          "property_count",
          "member_count",
          "field_count",
          "view_count",
          "export_count",
          "folder_count",
          "tool_token_usage",
          "tool_input_token_usage",
          "tool_output_token_usage",
          "cumulative_field_usage"
        ],
        "title": "Billing.LimitName",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.LimitName",
        "x-validate": null
      },
      "Automations.Action": {
        "description": "Action of the automation to execute",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Automations.UrlAction"
          }
        ],
        "title": "Automations.Action",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Automations.Action",
        "x-validate": null
      },
      "Tools.Integrations.SupportedOutputs": {
        "additionalProperties": false,
        "description": "Supported output for the tool.",
        "properties": {
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Projects.Common.PropertyType"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "properties"
        ],
        "title": "Tools.Integrations.SupportedOutputs",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.Integrations.SupportedOutputs",
        "x-validate": null
      },
      "Integrations.ConnectionStartSettings": {
        "additionalProperties": false,
        "description": "Settings required for the connection to start.",
        "properties": {
          "integrator_config": {
            "additionalProperties": true,
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "integrator_config"
        ],
        "title": "Integrations.ConnectionStartSettings",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Integrations.ConnectionStartSettings",
        "x-validate": null
      },
      "Cases.CaseResponseInList": {
        "additionalProperties": false,
        "description": "A single case in a list",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "error_reason": {
            "$ref": "#/components/schemas/Common.NullableString"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "name": {
            "$ref": "#/components/schemas/Common.NullableString"
          },
          "outputs": {
            "items": {
              "$ref": "#/components/schemas/Cases.CaseOutput"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "status": {
            "$ref": "#/components/schemas/Cases.Status"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "user_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "name",
          "user_id",
          "status",
          "outputs",
          "error_reason",
          "created_at",
          "updated_at"
        ],
        "title": "Cases.CaseResponseInList",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.CaseResponseInList",
        "x-validate": null
      },
      "Workspaces.WorkspaceResponse": {
        "additionalProperties": false,
        "description": "A workspace",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "disabled": {
            "$ref": "#/components/schemas/Workspaces.WorkspaceDisabled"
          },
          "icon_url": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "metadata": {
            "$ref": "#/components/schemas/Workspaces.WorkspaceMetadata"
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "role": {
            "$ref": "#/components/schemas/Workspaces.WorkspaceRole"
          }
        },
        "required": [
          "id",
          "name",
          "metadata",
          "created_at"
        ],
        "title": "Workspaces.WorkspaceResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Workspaces.WorkspaceResponse",
        "x-validate": null
      },
      "Tools.Integrations.ToolName": {
        "enum": [
          "manual",
          "dall_e_3",
          "imagen",
          "whisper",
          "bing_search",
          "ocr",
          "pdf_convert",
          "file_split",
          "url_scrape",
          "http",
          "code",
          "aws_ocr",
          "gpt_4_1",
          "gpt_4_1_azure",
          "gpt_4_1_mini",
          "gpt_4_1_mini_azure",
          "gpt_4_1_nano",
          "gpt_4_1_nano_azure",
          "gpt_4",
          "web_search",
          "gpt_4o",
          "gpt_4o_azure",
          "gpt_4o_mini",
          "gpt_4o_mini_azure",
          "o3",
          "o3_mini",
          "o4_mini",
          "o4_mini_azure",
          "o1",
          "o1_mini",
          "gpt_3_5",
          "gpt_3_5_azure",
          "go",
          "gemini_pro",
          "gemini_1_5_pro",
          "gemini_1_5_flash",
          "gemini_2_0_flash",
          "gemini_2_0_flash_lite",
          "gemini_2_5_pro_genai",
          "gemini_2_5_flash_genai",
          "gemini_2_5_flash_thinking_genai",
          "gemini_2_0_flash_lite_genai",
          "gemini_2_5_pro",
          "gemini_2_5_flash",
          "gemini_2_5_flash_thinking",
          "gemini_pro_vision",
          "claude_3_opus",
          "claude_3_5_sonnet",
          "claude_3_sonnet",
          "claude_3_haiku",
          "claude_3_5_haiku",
          "claude_3_7_sonnet",
          "claude_3_7_thinking",
          "claude_3_5_sonnet_vertex_ai",
          "claude_3_sonnet_vertex_ai",
          "claude_3_haiku_vertex_ai",
          "claude_3_5_haiku_vertex_ai",
          "claude_3_7_sonnet_vertex_ai",
          "claude_3_7_thinking_vertex_ai",
          "claude_3_opus_vertex_ai",
          "claude_4_sonnet",
          "claude_4_opus",
          "claude_4_sonnet_thinking",
          "claude_4_opus_thinking",
          "claude_4_sonnet_vertex_ai",
          "claude_4_opus_vertex_ai",
          "claude_4_sonnet_thinking_vertex_ai",
          "claude_4_opus_thinking_vertex_ai",
          "semantic_splitter",
          "semantic_indexer"
        ],
        "title": "Tools.Integrations.ToolName",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.Integrations.ToolName",
        "x-validate": null
      },
      "Invitations.ListProjectInvitationsResponse": {
        "additionalProperties": false,
        "description": "List invitations response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Invitations.ProjectInvitationResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data",
          "metadata"
        ],
        "title": "Invitations.ListProjectInvitationsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.ListProjectInvitationsResponse",
        "x-validate": null
      },
      "Projects.SelectOptionResponse": {
        "additionalProperties": false,
        "description": "Response for a select option",
        "properties": {
          "color": {
            "$ref": "#/components/schemas/Projects.SelectOptionColor"
          },
          "tool_fallback": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "value": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "value",
          "tool_fallback"
        ],
        "title": "Projects.SelectOptionResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SelectOptionResponse",
        "x-validate": null
      },
      "bulk_delete_entities": {
        "additionalProperties": false,
        "description": "Bulk delete request",
        "properties": {
          "entity_ids": {
            "description": "List of entity IDs to delete",
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "entity_ids"
        ],
        "title": "bulk_delete_entities",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.EntityBulkRemoveRequest",
        "x-validate": null
      },
      "Projects.SelectOption": {
        "additionalProperties": false,
        "properties": {
          "color": {
            "$ref": "#/components/schemas/Projects.SelectOptionColor"
          },
          "tool_fallback": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "value": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "value"
        ],
        "title": "Projects.SelectOption",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SelectOption",
        "x-validate": null
      },
      "Folders.FolderInListResponse": {
        "additionalProperties": false,
        "description": "A folder in a workspace",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "membership_info": {
            "$ref": "#/components/schemas/Projects.MembershipInfo"
          },
          "name": {
            "$ref": "#/components/schemas/Folders.FolderName"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "title": "Folders.FolderInListResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Folders.FolderInListResponse",
        "x-validate": null
      },
      "Projects.SelectOptionColor": {
        "maxLength": 32,
        "nullable": true,
        "title": "Projects.SelectOptionColor",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SelectOptionColor",
        "x-validate": null
      },
      "Projects.NullableReferenceEntityLimit": {
        "description": "Maximum number of matched entities to reference. 0 value will use default system limit (1000).",
        "maximum": 1000,
        "minimum": 0,
        "nullable": true,
        "title": "Projects.NullableReferenceEntityLimit",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.NullableReferenceEntityLimit",
        "x-validate": null
      },
      "Integrations.ConnectSessionResponse": {
        "additionalProperties": false,
        "description": "Connect session. Contains newly created connection ID and a connect session token",
        "properties": {
          "connect_session_token": {
            "$ref": "#/components/schemas/Integrations.ConnectSessionToken"
          }
        },
        "required": [
          "connect_session_token"
        ],
        "title": "Integrations.ConnectSessionResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Integrations.ConnectSessionResponse",
        "x-validate": null
      },
      "Imports.PrepareImportRequestExistingProject": {
        "additionalProperties": false,
        "description": "Prepare import request",
        "properties": {
          "format": {
            "$ref": "#/components/schemas/Imports.Format"
          },
          "format_options": {
            "$ref": "#/components/schemas/Imports.FormatOptions"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "settings": {
            "$ref": "#/components/schemas/Imports.Settings"
          }
        },
        "required": [
          "format",
          "format_options",
          "project_id"
        ],
        "title": "Imports.PrepareImportRequestExistingProject",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Imports.PrepareImportRequestExistingProject",
        "x-validate": null
      },
      "Projects.FieldReadonlyOption": {
        "default": false,
        "description": "Whether the fields of that property are readonly for worker users",
        "title": "Projects.FieldReadonlyOption",
        "type": "boolean",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.FieldReadonlyOption",
        "x-validate": null
      },
      "Users.ListResourceMembersResponse": {
        "additionalProperties": false,
        "description": "List members response",
        "properties": {
          "access_type": {
            "enum": [
              "public",
              "private",
              "read_only"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "AccessType"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Users.ResourceMemberResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "data",
          "access_type"
        ],
        "title": "Users.ListResourceMembersResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.ListResourceMembersResponse",
        "x-validate": null
      },
      "Projects.CreateViewRequest": {
        "additionalProperties": false,
        "description": "Create a project view request",
        "properties": {
          "assignable_property_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "filters": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Projects.ViewFilter"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "num_pinned_properties": {
            "$ref": "#/components/schemas/Common.NonNegativeInteger"
          },
          "property_ids": {
            "$ref": "#/components/schemas/Projects.PropertyIdOrSlugList"
          },
          "property_layouts": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyLayout"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "property_options": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Projects.ViewPropertyOptions"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_layouts",
          "property_ids"
        ],
        "title": "Projects.CreateViewRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.CreateViewRequest",
        "x-validate": null
      },
      "EntityFilters.Filter": {
        "description": "Filter can be `simple` or `group`. If you want to filter by one `subject` eg. `item name`. You can specify `simple filter` for given `subject` and `matcher`. For more details please see details of `item name filter` or other simple filters. If you want to to filter item by more than one filter You need to use `group filter` which gives possibility to join `filters` using `and`, `or` operators.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/EntityFilters.GroupFilter"
          },
          {
            "$ref": "#/components/schemas/EntityFilters.SimpleFilter"
          }
        ],
        "title": "EntityFilters.Filter",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.Filter",
        "x-validate": null
      },
      "PropertyContainsNoneOfString": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject contains the one specified in the filter",
        "properties": {
          "case_sensitive": {
            "default": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "enum": [
              "property_contains_none_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "values"
        ],
        "title": "PropertyContainsNoneOfString",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldMetadataFieldName.PropertyContainsNoneOf",
        "x-validate": null
      },
      "Tools.KeyManager.ListToolKeysResponse": {
        "additionalProperties": false,
        "description": "Response with list of all configured tool keys.",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Tools.KeyManager.ToolKeyResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Tools.KeyManager.ListToolKeysResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.KeyManager.ListToolKeysResponse",
        "x-validate": null
      },
      "Cases.Source": {
        "additionalProperties": false,
        "description": "A source reference in a message",
        "properties": {
          "file_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "type": {
            "enum": [
              "url",
              "file"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "url": {
            "$ref": "#/components/schemas/Common.NullableString"
          }
        },
        "required": [
          "type"
        ],
        "title": "Cases.Source",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.Source",
        "x-validate": null
      },
      "Cases.AsyncFileUploadRequest": {
        "additionalProperties": false,
        "oneOf": [
          {
            "$ref": "#/components/schemas/FILE_UPLOAD_FROM_URL"
          },
          {
            "$ref": "#/components/schemas/FILE_UPLOAD_FROM_INTEGRATION"
          }
        ],
        "title": "Cases.AsyncFileUploadRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.AsyncFileUploadRequest",
        "x-validate": null
      },
      "Users.UserMeResponse": {
        "additionalProperties": false,
        "description": "The currently logged in user",
        "properties": {
          "accepted_terms_and_conditions": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "email": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "first_name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "last_activity_at": {
            "$ref": "#/components/schemas/Common.NullableDateTime"
          },
          "last_name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "marketing_optin": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "profile_picture_url": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "show_tutorials": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "signup_completed": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "id",
          "created_at",
          "accepted_terms_and_conditions",
          "marketing_optin",
          "signup_completed",
          "show_tutorials"
        ],
        "title": "Users.UserMeResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.UserMeResponse",
        "x-validate": null
      },
      "Folders.FolderNodeResponse": {
        "additionalProperties": false,
        "description": "A node in a folder tree",
        "properties": {
          "children": {
            "description": "Child folders",
            "items": {
              "$ref": "#/components/schemas/Folders.FolderNodeResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "folder": {
            "$ref": "#/components/schemas/Folders.FolderInListResponse"
          }
        },
        "required": [
          "folder",
          "children"
        ],
        "title": "Folders.FolderNodeResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Folders.FolderNodeResponse",
        "x-validate": null
      },
      "Common.NullableInteger": {
        "example": 123,
        "nullable": true,
        "title": "Common.NullableInteger",
        "type": "integer",
        "x-struct": null,
        "x-validate": null
      },
      "Billing.UsageLimits": {
        "items": {
          "$ref": "#/components/schemas/Billing.UsageLimit"
        },
        "title": "Billing.UsageLimits",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.UsageLimits",
        "x-validate": null
      },
      "Projects.NumberPropertyConfigResponse": {
        "additionalProperties": false,
        "description": "Number property configuration",
        "properties": {
          "format": {
            "default": "auto",
            "enum": [
              "auto",
              "custom"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "format_custom": {
            "$ref": "#/components/schemas/Projects.NumberFormatCustomResponse"
          }
        },
        "required": [
          "format",
          "format_custom"
        ],
        "title": "Projects.NumberPropertyConfigResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.NumberPropertyConfigResponse",
        "x-validate": null
      },
      "Projects.SelectMaxSelectedWithDefault": {
        "default": 0,
        "description": "Maximum number of options that can be selected on any field.\n0 for unlimited.\n",
        "minimum": 0,
        "nullable": true,
        "title": "Projects.SelectMaxSelectedWithDefault",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SelectMaxSelectedWithDefault",
        "x-validate": null
      },
      "Invitations.AcceptInvitationRequest": {
        "additionalProperties": false,
        "description": "A request to accept workspece invitation",
        "properties": {
          "invite_token": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "invite_token"
        ],
        "title": "Invitations.AcceptInvitationRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Invitations.AcceptInvitationRequest",
        "x-validate": null
      },
      "PropertyLessThanOrEqualTo": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject are less than or equal to the one specified in the filter",
        "properties": {
          "name": {
            "enum": [
              "property_less_than_or_equal_to"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "value": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "value"
        ],
        "title": "PropertyLessThanOrEqualTo",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldNumberValue.PropertyLessThanOrEqualTo",
        "x-validate": null
      },
      "Projects.Grounding.Source": {
        "additionalProperties": false,
        "description": "Grounding source information for the field",
        "properties": {
          "bounding_boxes": {
            "items": {
              "$ref": "#/components/schemas/Projects.Grounding.BoundingBox"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "index": {
            "minimum": 1,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "locations": {
            "items": {
              "$ref": "#/components/schemas/Projects.Grounding.Location"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "index",
          "property_id",
          "locations",
          "bounding_boxes"
        ],
        "title": "Projects.Grounding.Source",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Grounding.Source",
        "x-validate": null
      },
      "Projects.ListEntities.FieldTextResponse": {
        "additionalProperties": false,
        "description": "Response for a text value",
        "properties": {
          "has_grounding": {
            "default": false,
            "nullable": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "updated_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Common.UUID"
              },
              {
                "$ref": "#/components/schemas/Projects.Common.PropertyTool"
              }
            ],
            "nullable": true,
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "UpdatedBy"
          },
          "value": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "value",
          "updated_by",
          "has_grounding"
        ],
        "title": "Projects.ListEntities.FieldTextResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldTextResponse",
        "x-validate": null
      },
      "FILE_UPLOAD_FROM_INTEGRATION": {
        "additionalProperties": false,
        "description": "Upload a file from an Integration to a Case",
        "properties": {
          "connection_id": {
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "file_id": {
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "file_name": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "integration_id": {
            "enum": [
              "google_drive"
            ],
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "file_id",
          "integration_id",
          "connection_id"
        ],
        "title": "FILE_UPLOAD_FROM_INTEGRATION",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.AsyncFileUploadFromIntegrationRequest",
        "x-validate": null,
        "x-speakeasy-schema-name": "TypedFileIntegration"
      },
      "Tools.KeyManager.ToolModelConfigResponse": {
        "additionalProperties": false,
        "description": "Response with a single tool model configuration.",
        "properties": {
          "per_minute_request_rate_limit": {
            "nullable": true,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "per_minute_token_rate_limit": {
            "nullable": true,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "tool": {
            "$ref": "#/components/schemas/Tools.Integrations.ToolName"
          },
          "tool_key_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "tool",
          "tool_key_id",
          "per_minute_request_rate_limit",
          "per_minute_token_rate_limit"
        ],
        "title": "Tools.KeyManager.ToolModelConfigResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.KeyManager.ToolModelConfigResponse",
        "x-validate": null
      },
      "Projects.PDFSplitSize": {
        "description": "For manual file_collection properties only.\nControls PDF chunk extraction size. See `pdf_split_mode` for more details.\n",
        "minimum": 1,
        "title": "Projects.PDFSplitSize",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PDFSplitSize",
        "x-validate": null
      },
      "Projects.ViewFilter": {
        "additionalProperties": false,
        "description": "View filter",
        "properties": {
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "select_option_value": {
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "property_id",
          "select_option_value"
        ],
        "title": "Projects.ViewFilter",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ViewFilter",
        "x-validate": null
      },
      "Cases.UpdateCaseRequest": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Common.NullableString"
          }
        },
        "title": "Cases.UpdateCaseRequest",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "Automations.EventsRequest": {
        "additionalProperties": false,
        "description": "Events that will trigger the automation. If you omit event type or set filters to `false`, the automation\nwill not trigger for that event type. If you set filters to `true` or an empty object, the automation will\ntrigger for that event type without applying any filters. Otherwise you may provide a map of filters to\napply before triggering the automation for that event type if that event type supports filters.\n",
        "example": {
          "entity.all_fields_completed": true,
          "entity.field_completed": {
            "property_id": "7bfc9df4-6010-41d8-9378-9f98990f35da",
            "select_option_value": "option1"
          }
        },
        "properties": {
          "entity.all_fields_completed": {
            "oneOf": [
              {
                "type": "boolean",
                "x-struct": null,
                "x-validate": null
              },
              {
                "additionalProperties": false,
                "description": "Filters to apply before triggering the automation for this event",
                "properties": {},
                "type": "object",
                "x-struct": null,
                "x-validate": null
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "entity.created": {
            "oneOf": [
              {
                "type": "boolean",
                "x-struct": null,
                "x-validate": null
              },
              {
                "additionalProperties": false,
                "description": "Filters to apply before triggering the automation for this event",
                "properties": {},
                "type": "object",
                "x-struct": null,
                "x-validate": null
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "entity.field_completed": {
            "oneOf": [
              {
                "type": "boolean",
                "x-struct": null,
                "x-validate": null
              },
              {
                "additionalProperties": false,
                "description": "Filters to apply before triggering the automation for this event",
                "properties": {
                  "property_id": {
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "select_option_value": {
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "type": "object",
                "x-struct": null,
                "x-validate": null
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "project.created": {
            "oneOf": [
              {
                "type": "boolean",
                "x-struct": null,
                "x-validate": null
              },
              {
                "additionalProperties": false,
                "description": "Filters to apply before triggering the automation for this event",
                "properties": {},
                "type": "object",
                "x-struct": null,
                "x-validate": null
              }
            ],
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Automations.EventsRequest",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "Exports.CreateExportRequest": {
        "additionalProperties": false,
        "description": "Create export request",
        "properties": {
          "format": {
            "$ref": "#/components/schemas/Exports.Format"
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name"
        ],
        "title": "Exports.CreateExportRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Exports.CreateExportRequest",
        "x-validate": null
      },
      "Projects.IncludeMembershipInfo": {
        "default": false,
        "description": "Include membership information for the calling user",
        "title": "Projects.IncludeMembershipInfo",
        "type": "boolean",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.IncludeMembershipInfo",
        "x-validate": null
      },
      "EntityFilters.NullableFilter": {
        "description": "Filter can be `simple` or `group`. If you want to filter by one `subject` eg. `item name`. You can specify `simple filter` for given `subject` and `matcher`. For more details please see details of `item name filter` or other simple filters. If you want to to filter item by more than one filter You need to use `group filter` which gives possibility to join `filters` using `and`, `or` operators.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/EntityFilters.GroupFilter"
          },
          {
            "$ref": "#/components/schemas/EntityFilters.SimpleFilter"
          },
          {
            "$ref": "#/components/schemas/EntityFilters.NullableOrEmptyObject"
          }
        ],
        "title": "EntityFilters.NullableFilter",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.NullableFilter",
        "x-validate": null
      },
      "Projects.NumberPropertyConfig": {
        "additionalProperties": false,
        "description": "Configuration for number property",
        "properties": {
          "format": {
            "default": "auto",
            "enum": [
              "auto",
              "custom"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "format_custom": {
            "$ref": "#/components/schemas/Projects.UpdateNumberFormatCustom"
          }
        },
        "title": "Projects.NumberPropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.NumberPropertyConfig",
        "x-validate": null
      },
      "Pagination.Cursor": {
        "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
        "example": "ZXhhbXBsZQo=",
        "nullable": true,
        "title": "Pagination.Cursor",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Pagination.Cursor",
        "x-validate": null
      },
      "Workspaces.CreateWorkspaceRequest": {
        "additionalProperties": false,
        "description": "Create workspace request",
        "properties": {
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Workspaces.CreateWorkspaceRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Workspaces.CreateWorkspaceRequest",
        "x-validate": null
      },
      "Templates.CollectionPropertyConfig": {
        "additionalProperties": false,
        "description": "Initial configuration for collection property.",
        "properties": {
          "additional_properties": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Templates.Property"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Templates.CollectionSubproperty"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "properties"
        ],
        "title": "Templates.CollectionPropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.CollectionPropertyConfig",
        "x-validate": null
      },
      "ViewAnyOfFieldStatuses": {
        "additionalProperties": false,
        "description": "Matches items in a view based on whether any of their field statuses are in the filter values",
        "properties": {
          "name": {
            "enum": [
              "view_any_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/Projects.ListEntities.FieldStatus"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "view_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "name",
          "view_id",
          "values"
        ],
        "title": "ViewAnyOfFieldStatuses",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.EntityStatus.ViewAnyOf",
        "x-validate": null
      },
      "Common.UUIDList": {
        "default": [],
        "items": {
          "$ref": "#/components/schemas/Common.UUID"
        },
        "nullable": true,
        "title": "Common.UUIDList",
        "type": "array",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.UUIDList",
        "x-validate": null
      },
      "Tools.Integrations.Integration": {
        "additionalProperties": false,
        "description": "Tool integration state.",
        "properties": {
          "enabled": {
            "description": "Whether the integration is enabled or disabled.",
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "integration": {
            "$ref": "#/components/schemas/Tools.Integrations.IntegrationName"
          },
          "tools": {
            "items": {
              "$ref": "#/components/schemas/Tools.Integrations.Tool"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "integration",
          "enabled",
          "tools"
        ],
        "title": "Tools.Integrations.Integration",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.Integrations.Integration",
        "x-validate": null
      },
      "String": {
        "nullable": true,
        "title": "String",
        "type": "string",
        "x-struct": null,
        "x-validate": null
      },
      "Cases.CreateCaseRequest": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Common.String"
          }
        },
        "title": "Cases.CreateCaseRequest",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "Projects.MaxRows": {
        "description": "For manual file_collection properties only.\nControls maximum number of collection items extracted from uploaded file. 0 for unlimited.\n",
        "minimum": 0,
        "title": "Projects.MaxRows",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.MaxRows",
        "x-validate": null
      },
      "Projects.ListEntitiesRequest": {
        "additionalProperties": false,
        "description": "List entities request",
        "properties": {
          "after": {
            "$ref": "#/components/schemas/Pagination.Cursor"
          },
          "before": {
            "$ref": "#/components/schemas/Pagination.Cursor"
          },
          "filter": {
            "$ref": "#/components/schemas/EntityFilters.Filter"
          },
          "first": {
            "$ref": "#/components/schemas/Pagination.First"
          },
          "last": {
            "$ref": "#/components/schemas/Pagination.Last"
          },
          "limit": {
            "$ref": "#/components/schemas/Pagination.Limit"
          },
          "offset": {
            "$ref": "#/components/schemas/Pagination.Offset"
          },
          "order_by": {
            "$ref": "#/components/schemas/Projects.ListEntities.ListEntitiesOrderBy"
          },
          "order_directions": {
            "$ref": "#/components/schemas/Pagination.OrderDirections"
          }
        },
        "title": "Projects.ListEntitiesRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntitiesRequest",
        "x-validate": null
      },
      "Projects.Entities.OCRTranscription": {
        "additionalProperties": false,
        "description": "Visual transcription of text",
        "properties": {
          "text": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "text"
        ],
        "title": "Projects.Entities.OCRTranscription",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.OCRTranscription",
        "x-validate": null
      },
      "Projects.Entities.OCRPage": {
        "additionalProperties": false,
        "description": "OCR page metadata",
        "properties": {
          "height": {
            "type": "number",
            "x-struct": null,
            "x-validate": null
          },
          "number": {
            "minimum": 1,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "offset": {
            "minimum": 0,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "unit": {
            "enum": [
              "inch",
              "pixel"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "width": {
            "type": "number",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "number",
          "offset",
          "unit",
          "width",
          "height"
        ],
        "title": "Projects.Entities.OCRPage",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.OCRPage",
        "x-validate": null
      },
      "Templates.DetailedPropertyInput": {
        "additionalProperties": false,
        "description": "A property input. If entity_id is null, the input will always be from current entity or entities\nfiltered by supplied `entities_filter` if any.\nAlternatively inputs can be filtered from a remote project by specifying `via_property_id` which\npoints to a `reference` property that acts as selector of entities from remote project.\n",
        "properties": {
          "entities_filter": {
            "$ref": "#/components/schemas/EntityFilters.NullableFilter"
          },
          "entity_id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "property_id": {
            "$ref": "#/components/schemas/Templates.TemplateID"
          },
          "via_property_id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          }
        },
        "required": [
          "property_id"
        ],
        "title": "Templates.DetailedPropertyInput",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.DetailedPropertyInput",
        "x-validate": null
      },
      "Projects.ListEntities.FieldStaleness": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldStaleness.UpToDate"
          },
          {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldStaleness.Stale"
          },
          {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldStaleness.Unknown"
          },
          {
            "$ref": "#/components/schemas/Projects.ListEntities.FieldStaleness.Unavailable"
          }
        ],
        "title": "Projects.ListEntities.FieldStaleness",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldStaleness",
        "x-validate": null
      },
      "Projects.AddSingleSelectPropertyRequest": {
        "additionalProperties": false,
        "description": "Add property request",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.SingleSelectPropertyConfig"
          },
          "default_view_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "single_select"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SingleSelectPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "description",
          "config"
        ],
        "title": "Projects.AddSingleSelectPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.AddSingleSelectPropertyRequest",
        "x-validate": null
      },
      "Projects.CollectionSubproperty": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "enum": [
              "text",
              "json"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "TextOrJsonType"
          }
        },
        "required": [
          "name",
          "type"
        ],
        "title": "Projects.CollectionSubproperty",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.CollectionSubproperty",
        "x-validate": null
      },
      "Projects.ViewResponse": {
        "additionalProperties": false,
        "description": "Project view response",
        "properties": {
          "assignable_property_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "entity_count": {
            "$ref": "#/components/schemas/Common.NullableInteger"
          },
          "filters": {
            "items": {
              "$ref": "#/components/schemas/Projects.ViewFilter"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "num_pinned_properties": {
            "$ref": "#/components/schemas/Common.NonNegativeInteger"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "property_ids": {
            "$ref": "#/components/schemas/Common.UUIDList"
          },
          "property_layouts": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyLayoutId"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "property_options": {
            "items": {
              "$ref": "#/components/schemas/Projects.ViewPropertyOptions"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "id",
          "name",
          "project_id",
          "property_layouts",
          "property_ids",
          "filters",
          "assignable_property_id",
          "num_pinned_properties"
        ],
        "title": "Projects.ViewResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ViewResponse",
        "x-validate": null
      },
      "Users.UpdateResourceAccessTypeRequest": {
        "additionalProperties": false,
        "description": "Update resource access type request",
        "properties": {
          "access_type": {
            "enum": [
              "public",
              "private",
              "read_only"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "AccessType"
          }
        },
        "required": [
          "access_type"
        ],
        "title": "Users.UpdateResourceAccessTypeRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Users.UpdateResourceAccessTypeRequest",
        "x-validate": null
      },
      "Spaces.LogMessage": {
        "additionalProperties": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "data": {
            "additionalProperties": true,
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "message": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "enum": [
              "log"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "message",
          "data"
        ],
        "title": "Spaces.LogMessage",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.LogMessage",
        "x-validate": null
      },
      "FieldFileName": {
        "additionalProperties": false,
        "description": "Filter entities based on field's file name",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyAnyOf"
              },
              {
                "$ref": "#/components/schemas/PropertyNoneOf"
              },
              {
                "$ref": "#/components/schemas/PropertyContainsAnyOf"
              },
              {
                "$ref": "#/components/schemas/PropertyContainsNoneOf"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "field_file_name"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "FieldFileName",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldFileName",
        "x-validate": null
      },
      "Cases.StartFileUploadResponse": {
        "additionalProperties": false,
        "properties": {
          "file_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "file_upload_url": {
            "$ref": "#/components/schemas/Common.String"
          }
        },
        "required": [
          "file_id",
          "file_upload_url"
        ],
        "title": "Cases.StartFileUploadResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.StartFileUploadResponse",
        "x-validate": null
      },
      "Options": {
        "items": {
          "type": "string",
          "x-struct": null,
          "x-validate": null
        },
        "title": "Options",
        "type": "array",
        "x-struct": null,
        "x-validate": null
      },
      "Workspaces.ListWorkspacesResponse": {
        "additionalProperties": false,
        "description": "List workspaces response",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Workspaces.WorkspaceResponse"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "data"
        ],
        "title": "Workspaces.ListWorkspacesResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Workspaces.ListWorkspacesResponse",
        "x-validate": null
      },
      "Billing.UsageLimit": {
        "additionalProperties": false,
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/Billing.LimitAggregation"
          },
          "limit_value": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Common.Integer"
              },
              {
                "$ref": "#/components/schemas/Billing.UnlimitedValue"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "$ref": "#/components/schemas/Billing.LimitName"
          },
          "scope": {
            "$ref": "#/components/schemas/Billing.LimitScope"
          },
          "type": {
            "$ref": "#/components/schemas/Billing.LimitType"
          }
        },
        "required": [
          "name",
          "scope",
          "aggregation",
          "type",
          "limit_value"
        ],
        "title": "Billing.UsageLimit",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.UsageLimit",
        "x-validate": null
      },
      "Projects.MultiSelectPropertyConfig": {
        "additionalProperties": false,
        "description": "Initial configuration for multi-select property.\nAllows to provide initial select options and how many of them\nis allowed to be selected in each field (with 'max_selected').\n",
        "properties": {
          "default_option": {
            "$ref": "#/components/schemas/Projects.SelectDefaultOption"
          },
          "max_selected": {
            "$ref": "#/components/schemas/Projects.SelectMaxSelectedWithDefault"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/Projects.SelectOption"
            },
            "maxItems": 1000,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "options"
        ],
        "title": "Projects.MultiSelectPropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.MultiSelectPropertyConfig",
        "x-validate": null
      },
      "Projects.AddMultiSelectPropertyRequest": {
        "additionalProperties": false,
        "description": "Add property request",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/Projects.MultiSelectPropertyConfig"
          },
          "default_view_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "input_ids": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Projects.PropertyInput"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "is_grounded": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "skip_behaviour": {
            "default": "never",
            "enum": [
              "never",
              "on_unsupported_input",
              "on_all_unsupported_inputs"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "SkipBehavior"
          },
          "tool": {
            "$ref": "#/components/schemas/Projects.Common.PropertyTool"
          },
          "type": {
            "enum": [
              "multi_select"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "MultiSelectPropertyType"
          }
        },
        "required": [
          "name",
          "type",
          "tool",
          "description",
          "config"
        ],
        "title": "Projects.AddMultiSelectPropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.AddMultiSelectPropertyRequest",
        "x-validate": null
      },
      "Billing.PlanUpgradeResponse": {
        "additionalProperties": false,
        "description": "Represents plan upgrade response. Contains newly attached plan and URL to follow to complete upgrade.",
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/Billing.Plan"
          },
          "upgrade_url": {
            "$ref": "#/components/schemas/Common.URL"
          }
        },
        "required": [
          "plan",
          "upgrade_url"
        ],
        "title": "Billing.PlanUpgradeResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.PlanUpgradeResponse",
        "x-validate": null
      },
      "Imports.UploadUrlResponse": {
        "additionalProperties": false,
        "description": "Upload URL response",
        "properties": {
          "upload_url": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "upload_url"
        ],
        "title": "Imports.UploadUrlResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Imports.UploadUrlResponse",
        "x-validate": null
      },
      "Pagination.PageSize": {
        "description": "The page size or limit of the query. Set to the `first` or `last` parameter when using cursor-based pagination.",
        "example": 50,
        "title": "Pagination.PageSize",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Pagination.PageSize",
        "x-validate": null
      },
      "Projects.PropertyIdOrSlug": {
        "description": "Property ID or slug",
        "example": "property-name",
        "pattern": "^([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})|(^[a-z_-][a-z0-9_-]*$)$",
        "title": "Projects.PropertyIdOrSlug",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PropertyIdOrSlug",
        "x-validate": null
      },
      "Cases.ConfirmFilesUploadedResponse": {
        "additionalProperties": false,
        "properties": {},
        "title": "Cases.ConfirmFilesUploadedResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.ConfirmFilesUploadedResponse",
        "x-validate": null
      },
      "Projects.UpdateCollectionPropertyConfig": {
        "additionalProperties": false,
        "description": "Collection Property configuration.\nYou can send any combination of the available configuration options.\n",
        "properties": {
          "remove_properties": {
            "default": [],
            "description": "Remove collection properties.\nIf the property doesn't exist, it will be ignored.\n",
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "upsert_properties": {
            "default": [],
            "description": "Add or update properties.\nIf the value already exists, it will be updated either with new type, or new name.\nValues that don't already exist will be added.\n",
            "items": {
              "properties": {
                "name": {
                  "minLength": 1,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "new_name": {
                  "minLength": 1,
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "new_type": {
                  "enum": [
                    "text",
                    "json"
                  ],
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null,
                  "x-speakeasy-schema-name": "TextOrJsonType"
                },
                "type": {
                  "enum": [
                    "text",
                    "json"
                  ],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null,
                  "x-speakeasy-schema-name": "TextOrJsonType"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "x-struct": null,
              "x-validate": null,
              "x-speakeasy-schema-name": "FileCollectionPropertyConfigUpsertItems"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Projects.UpdateCollectionPropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateCollectionPropertyConfig",
        "x-validate": null
      },
      "Hubs.HubResponse": {
        "additionalProperties": false,
        "anyOf": [
          {
            "$ref": "#/components/schemas/Hubs.Hub"
          }
        ],
        "description": "Response containing a single hub",
        "title": "Hubs.HubResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Hubs.HubResponse",
        "x-validate": null
      },
      "Projects.EntityBulkRemoveResponse": {
        "additionalProperties": false,
        "description": "Bulk delete response",
        "properties": {
          "entity_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "project_id",
          "entity_ids"
        ],
        "title": "Projects.EntityBulkRemoveResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.EntityBulkRemoveResponse",
        "x-validate": null
      },
      "Billing.ProjectUsageResponse": {
        "additionalProperties": false,
        "description": "Represents usage limits for a project",
        "properties": {
          "limits": {
            "$ref": "#/components/schemas/Billing.UsageLimitsWithUsage"
          }
        },
        "required": [
          "limits"
        ],
        "title": "Billing.ProjectUsageResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.ProjectUsageResponse",
        "x-validate": null,
        "x-speakeasy-schema-name": "WorkspaceUsageResponse"
      },
      "TYPED_TEXT": {
        "additionalProperties": false,
        "description": "Update a field value request",
        "properties": {
          "text": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "text"
        ],
        "title": "TYPED_TEXT",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdateFieldValueFromTextRequest",
        "x-validate": null
      },
      "Cases.ToolRunToolName": {
        "enum": [
          "query_files",
          "rag_search_files",
          "search_web",
          "hub_search"
        ],
        "title": "Cases.ToolRunToolName",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.ToolRunToolName",
        "x-validate": null
      },
      "Projects.RecalculateEntitiesResponse": {
        "additionalProperties": false,
        "description": "Entity recalculate response",
        "properties": {
          "affected_count": {
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "affected_count"
        ],
        "title": "Projects.RecalculateEntitiesResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.RecalculateEntitiesResponse",
        "x-validate": null
      },
      "EntityFilters.Conjunction": {
        "description": "Use to join filters together. It is possible to join simple or group filters with `and`, `or` operators",
        "enum": [
          "and",
          "or"
        ],
        "title": "EntityFilters.Conjunction",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.Conjunction",
        "x-validate": null
      },
      "Projects.Entities.FieldReferenceResponse": {
        "additionalProperties": false,
        "description": "Response for a reference value",
        "properties": {
          "matched_entity_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "updated_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Common.UUID"
              },
              {
                "$ref": "#/components/schemas/Projects.Common.PropertyTool"
              }
            ],
            "nullable": true,
            "x-struct": null,
            "x-validate": null,
            "x-speakeasy-schema-name": "UpdatedBy"
          },
          "value": {
            "$ref": "#/components/schemas/EntityFilters.NullableFilter"
          }
        },
        "required": [
          "value",
          "matched_entity_ids",
          "updated_by"
        ],
        "title": "Projects.Entities.FieldReferenceResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.Entities.FieldReferenceResponse",
        "x-validate": null
      },
      "Templates.TemplateID": {
        "maxLength": 64,
        "minLength": 1,
        "pattern": "[a-zA-Z0-9_\\-]{1,64}",
        "title": "Templates.TemplateID",
        "type": "string",
        "x-struct": null,
        "x-validate": null
      },
      "Hubs.HubsResponse": {
        "additionalProperties": false,
        "description": "Response containing a list of hubs",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Hubs.Hub"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "metadata": {
            "$ref": "#/components/schemas/Pagination.PageMetadata"
          }
        },
        "required": [
          "data"
        ],
        "title": "Hubs.HubsResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Hubs.HubsResponse",
        "x-validate": null
      },
      "Projects.PropertyConfigResponse": {
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/Projects.SingleSelectPropertyConfigResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.MultiSelectPropertyConfigResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.PDFPropertyConfigResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.CollectionPropertyConfigResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.FileCollectionPropertyConfigResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.ReferencePropertyConfigResponse"
          },
          {
            "$ref": "#/components/schemas/Projects.NumberPropertyConfigResponse"
          }
        ],
        "title": "Projects.PropertyConfigResponse",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.PropertyConfigResponse",
        "x-validate": null
      },
      "PropertyAllOfString": {
        "additionalProperties": false,
        "description": "Matches items based on whether the all the values in the filter exist in the subject",
        "properties": {
          "name": {
            "enum": [
              "property_all_of"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "values": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "values"
        ],
        "title": "PropertyAllOfString",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldSelectOptionValue.PropertyAllOf",
        "x-validate": null
      },
      "Templates.ViewPropertyOptions": {
        "additionalProperties": false,
        "description": "View-specific property options",
        "properties": {
          "block_workers_edits": {
            "$ref": "#/components/schemas/Projects.FieldReadonlyOption"
          },
          "property_id": {
            "$ref": "#/components/schemas/Templates.TemplateID"
          }
        },
        "required": [
          "property_id"
        ],
        "title": "Templates.ViewPropertyOptions",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.ViewPropertyOptions",
        "x-validate": null
      },
      "PropertyGreaterThanOrEqualTo": {
        "additionalProperties": false,
        "description": "Matches items based on whether the values from the subject are greater than or equal to the one specified in the filter",
        "properties": {
          "name": {
            "enum": [
              "property_greater_than_or_equal_to"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "property_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "reference_support": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "value": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name",
          "property_id",
          "value"
        ],
        "title": "PropertyGreaterThanOrEqualTo",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.FieldNumberValue.PropertyGreaterThanOrEqualTo",
        "x-validate": null
      },
      "Tools.Integrations.Tool": {
        "additionalProperties": false,
        "description": "Tool integration state.",
        "properties": {
          "grounding": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Tools.Integrations.GroundingFeature"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "supported_inputs": {
            "$ref": "#/components/schemas/Tools.Integrations.SupportedInputs"
          },
          "supported_outputs": {
            "$ref": "#/components/schemas/Tools.Integrations.SupportedOutputs"
          },
          "tool": {
            "$ref": "#/components/schemas/Tools.Integrations.ToolName"
          }
        },
        "required": [
          "tool",
          "supported_inputs",
          "supported_outputs",
          "grounding"
        ],
        "title": "Tools.Integrations.Tool",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Tools.Integrations.Tool",
        "x-validate": null
      },
      "AskGo.SessionResponse": {
        "additionalProperties": false,
        "description": "Session response",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/AskGo.Message"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "project_id": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "user_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "project_id",
          "messages"
        ],
        "title": "AskGo.SessionResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.AskGo.SessionResponse",
        "x-validate": null
      },
      "Spaces.QueryData": {
        "additionalProperties": false,
        "oneOf": [
          {
            "$ref": "#/components/schemas/Spaces.DataProjectId"
          },
          {
            "$ref": "#/components/schemas/Spaces.DataAttachmentURL"
          }
        ],
        "title": "Spaces.QueryData",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.QueryData",
        "x-validate": null
      },
      "Projects.SetFieldGroundTruth": {
        "additionalProperties": false,
        "description": "Set ground truth status",
        "properties": {
          "ground_truth": {
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Projects.SetFieldGroundTruth",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SetFieldGroundTruth",
        "x-validate": null
      },
      "Integrations.ProjectGoneConnectionResponse": {
        "additionalProperties": false,
        "description": "An inactive connection due to its project being manually removed.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "integration_id": {
            "$ref": "#/components/schemas/Integrations.IntegrationId"
          },
          "items_synced": {
            "$ref": "#/components/schemas/Common.NullableInteger"
          },
          "last_synced_at": {
            "$ref": "#/components/schemas/Common.NullableDateTime"
          },
          "status": {
            "$ref": "#/components/schemas/Integrations.ConnectionStatus"
          },
          "user_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "status",
          "user_id",
          "integration_id",
          "items_synced",
          "last_synced_at"
        ],
        "title": "Integrations.ProjectGoneConnectionResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Integrations.ProjectGoneConnectionResponse",
        "x-validate": null
      },
      "Projects.UpdatePropertyRequest": {
        "additionalProperties": false,
        "description": "Update specified fields of a Property",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Projects.UpdateBasicPropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.UpdateSingleSelectPropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.UpdateMultiSelectPropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.UpdateCollectionPropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.UpdateFileCollectionPropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.UpdateUserSelectPropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.UpdateReferencePropertyRequest"
          },
          {
            "$ref": "#/components/schemas/Projects.UpdateNumberPropertyRequest"
          }
        ],
        "title": "Projects.UpdatePropertyRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.UpdatePropertyRequest",
        "x-validate": null
      },
      "Library.EntityResponse": {
        "additionalProperties": false,
        "description": "An entity",
        "properties": {
          "active_view_ids": {
            "items": {
              "$ref": "#/components/schemas/Common.UUID"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "fields": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Projects.Entities.FieldResponse"
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "library_attributes": {
            "$ref": "#/components/schemas/Library.LibraryAttributesResponse"
          },
          "parent_entity_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "project_id",
          "fields",
          "library_attributes"
        ],
        "title": "Library.EntityResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Library.EntityResponse",
        "x-validate": null
      },
      "Integrations.IntegrationId": {
        "description": "The type of the integration that Go supports.",
        "enum": [
          "google_drive"
        ],
        "title": "Integrations.IntegrationId",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Integrations.IntegrationId",
        "x-validate": null
      },
      "SelectOptionValue": {
        "additionalProperties": false,
        "deprecated": true,
        "description": "DEPRECATED: Use FieldSelectOptionValue instead",
        "properties": {
          "matcher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyAnyOfString"
              },
              {
                "$ref": "#/components/schemas/PropertyAllOfString"
              },
              {
                "$ref": "#/components/schemas/PropertyNoneOfString"
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "subject": {
            "enum": [
              "select_option_value"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "subject",
          "matcher"
        ],
        "title": "SelectOptionValue",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.EntityFilters.SelectOptionValue",
        "x-validate": null
      },
      "Templates.Project": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Common.NullableString"
          },
          "id": {
            "$ref": "#/components/schemas/Templates.OptionalTemplateID"
          },
          "main_view": {
            "$ref": "#/components/schemas/Templates.MainView"
          },
          "name": {
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Templates.Property"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "views": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Templates.View"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "properties"
        ],
        "title": "Templates.Project",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.Project",
        "x-validate": null
      },
      "Common.NullableUUID": {
        "example": "e23ff3f3-8f77-4e78-9e81-fdb25abfb781",
        "format": "uuid",
        "nullable": true,
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "title": "Common.NullableUUID",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Common.NullableUUID",
        "x-validate": null
      },
      "Projects.ListEntities.FieldToolMetadataResponse": {
        "additionalProperties": false,
        "description": "Response for a field metadata",
        "properties": {
          "confidence": {
            "nullable": true,
            "type": "number",
            "x-struct": null,
            "x-validate": null
          },
          "external_sources": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "favicon": {
            "properties": {
              "url": {
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "motivation": {
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "screenshot": {
            "properties": {
              "url": {
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Projects.ListEntities.FieldToolMetadataResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldToolMetadataResponse",
        "x-validate": null
      },
      "Billing.PlanTemplate": {
        "additionalProperties": false,
        "description": "Represents plan available for a workspace",
        "properties": {
          "billing_period": {
            "$ref": "#/components/schemas/Billing.PlanBillingPeriod"
          },
          "limits": {
            "$ref": "#/components/schemas/Billing.UsageLimits"
          },
          "name": {
            "$ref": "#/components/schemas/Billing.PlanName"
          },
          "provider": {
            "$ref": "#/components/schemas/Billing.PlanProvider"
          },
          "tier_order": {
            "$ref": "#/components/schemas/Common.Integer"
          }
        },
        "required": [
          "name",
          "provider",
          "billing_period",
          "tier_order",
          "limits"
        ],
        "title": "Billing.PlanTemplate",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.PlanTemplate",
        "x-validate": null
      },
      "Billing.PlanBillingPeriod": {
        "description": "Billing period of the plan",
        "enum": [
          "yearly",
          "monthly"
        ],
        "title": "Billing.PlanBillingPeriod",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Billing.PlanBillingPeriod",
        "x-validate": null
      },
      "Projects.SetFieldValueArrayRequest": {
        "additionalProperties": false,
        "description": "Set a field value request for properties with array values",
        "properties": {
          "value": {
            "items": {
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "value"
        ],
        "title": "Projects.SetFieldValueArrayRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SetFieldValueArrayRequest",
        "x-validate": null
      },
      "Cases.CaseFileStatus": {
        "enum": [
          "uploading",
          "complete",
          "error",
          "computing"
        ],
        "title": "Cases.CaseFileStatus",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Cases.CaseFileStatus",
        "x-validate": null
      },
      "Common.UUID": {
        "example": "e23ff3f3-8f77-4e78-9e81-fdb25abfb781",
        "format": "uuid",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "title": "Common.UUID",
        "type": "string",
        "x-struct": null,
        "x-validate": null
      },
      "Integrations.StartedConnectionResponse": {
        "additionalProperties": false,
        "description": "A started connection.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "integration_id": {
            "$ref": "#/components/schemas/Integrations.IntegrationId"
          },
          "items_synced": {
            "$ref": "#/components/schemas/Common.NullableInteger"
          },
          "last_synced_at": {
            "$ref": "#/components/schemas/Common.NullableDateTime"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "status": {
            "$ref": "#/components/schemas/Integrations.ConnectionStatus"
          },
          "user_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "status",
          "user_id",
          "integration_id",
          "project_id",
          "items_synced",
          "last_synced_at"
        ],
        "title": "Integrations.StartedConnectionResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Integrations.StartedConnectionResponse",
        "x-validate": null
      },
      "update_entity": {
        "additionalProperties": false,
        "description": "Updates the provided fields of an entity.",
        "properties": {
          "fields": {
            "additionalProperties": {
              "$ref": "#/components/schemas/field_value"
            },
            "description": "Fields to update, note that the field key is the property id or property slug for that field.",
            "title": "fields",
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "fields"
        ],
        "title": "update_entity",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "Automations.EventsResponse": {
        "additionalProperties": false,
        "description": "Events that will trigger the automation",
        "properties": {
          "entity.all_fields_completed": {
            "additionalProperties": false,
            "description": "Filters to apply before triggering the automation for this event",
            "properties": {},
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "entity.created": {
            "additionalProperties": false,
            "description": "Filters to apply before triggering the automation for this event",
            "properties": {},
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "entity.field_completed": {
            "additionalProperties": false,
            "description": "Filters to apply before triggering the automation for this event",
            "properties": {
              "property_id": {
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "select_option_value": {
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "project.created": {
            "additionalProperties": false,
            "description": "Filters to apply before triggering the automation for this event",
            "properties": {},
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Automations.EventsResponse",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "Automations.TriggerResponse": {
        "additionalProperties": false,
        "description": "A trigger",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/Automations.Action"
          },
          "events": {
            "$ref": "#/components/schemas/Automations.EventsResponse"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "project_id": {
            "$ref": "#/components/schemas/Common.NullableUUID"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "workspace_id",
          "project_id",
          "events",
          "action"
        ],
        "title": "Automations.TriggerResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Automations.TriggerResponse",
        "x-validate": null
      },
      "Workspaces.WorkspaceRole": {
        "description": "The role of the user in the workspace. Only available when listing all workspaces.",
        "enum": [
          "owner",
          "admin",
          "editor",
          "reviewer",
          "worker",
          "reader"
        ],
        "nullable": true,
        "title": "Workspaces.WorkspaceRole",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Workspaces.WorkspaceRole",
        "x-validate": null
      },
      "Projects.ListEntities.FieldStatus": {
        "enum": [
          "idle",
          "uploading",
          "waiting",
          "computing",
          "complete",
          "error",
          "skip"
        ],
        "title": "Projects.ListEntities.FieldStatus",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.ListEntities.FieldStatus",
        "x-validate": null
      },
      "Pagination.Offset": {
        "description": "The offset to use when paginating records",
        "example": 50,
        "nullable": true,
        "title": "Pagination.Offset",
        "type": "integer",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Pagination.Offset",
        "x-validate": null
      },
      "Projects.SingleSelectPropertyConfig": {
        "additionalProperties": false,
        "description": "Initial configuration for single-select property.\nAllows to provide initial select options.\n",
        "properties": {
          "default_option": {
            "$ref": "#/components/schemas/Projects.SelectDefaultOption"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/Projects.SelectOption"
            },
            "maxItems": 1000,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "options"
        ],
        "title": "Projects.SingleSelectPropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SingleSelectPropertyConfig",
        "x-validate": null
      },
      "Library.UpsertEntityAttributesRequest": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The name of the entity",
            "example": "My Entity",
            "maxLength": 255,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "name"
        ],
        "title": "Library.UpsertEntityAttributesRequest",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Library.UpsertEntityAttributesRequest",
        "x-validate": null
      },
      "Projects.NumberFormatCustomResponse": {
        "additionalProperties": false,
        "description": "Custom number format",
        "nullable": true,
        "properties": {
          "decimal_places": {
            "oneOf": [
              {
                "maximum": 20,
                "minimum": 0,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              {
                "default": "auto",
                "enum": [
                  "auto"
                ],
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            ],
            "x-struct": null,
            "x-validate": null
          },
          "negative_format": {
            "default": "minus",
            "enum": [
              "minus",
              "parentheses",
              "colored",
              "colored_parentheses"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "right_align": {
            "default": false,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "thousand_separator": {
            "default": "none",
            "enum": [
              "comma",
              "none"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "decimal_places",
          "negative_format",
          "thousand_separator",
          "right_align"
        ],
        "title": "Projects.NumberFormatCustomResponse",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.NumberFormatCustomResponse",
        "x-validate": null
      },
      "Projects.SelectDefaultOption": {
        "description": "Default select option.\nIf the value doesn't exist, it will be ignored.\n",
        "nullable": true,
        "title": "Projects.SelectDefaultOption",
        "type": "string",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Projects.SelectDefaultOption",
        "x-validate": null
      },
      "Spaces.Space": {
        "additionalProperties": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Spaces.Message"
            },
            "maxItems": 10,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "$ref": "#/components/schemas/Common.NullableString"
          },
          "status": {
            "$ref": "#/components/schemas/Spaces.Status"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Common.DateTime"
          },
          "user_id": {
            "$ref": "#/components/schemas/Common.UUID"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/Common.UUID"
          }
        },
        "required": [
          "id",
          "workspace_id",
          "user_id",
          "created_at",
          "updated_at",
          "status",
          "messages",
          "name"
        ],
        "title": "Spaces.Space",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Spaces.Space",
        "x-validate": null
      },
      "fields": {
        "additionalProperties": {
          "$ref": "#/components/schemas/field_value"
        },
        "description": "Fields to prefill with values, note that the field key is the property id or property slug for that field.\n        Fields not mentioned are going to be set to an empty value.",
        "title": "fields",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "Templates.ReferencePropertyConfig": {
        "additionalProperties": false,
        "description": "Initial configuration for reference property.\nAllows to provide source project and entity limit (0 for to use system maximum).\n",
        "properties": {
          "entity_limit": {
            "$ref": "#/components/schemas/Projects.ReferenceEntityLimit"
          },
          "project_id": {
            "$ref": "#/components/schemas/Templates.TemplateID"
          }
        },
        "required": [
          "entity_limit",
          "project_id"
        ],
        "title": "Templates.ReferencePropertyConfig",
        "type": "object",
        "x-struct": "Elixir.AgiDbWeb.Schemas.Templates.ReferencePropertyConfig",
        "x-validate": null
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "in": "header",
        "name": "X-API-KEY",
        "type": "apiKey"
      },
      "BearerAuth": {
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "title": "V7 Go API",
    "version": "0.1.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/workspaces/{workspace_id}/integrations/all/connections": {
      "get": {
        "callbacks": {},
        "description": "Lists all the connections created for the integration in the workspace.\n",
        "operationId": "integration-connections-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations.ListConnectionsResponse"
                }
              }
            },
            "description": "Integrations.ListConnectionsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List all integration connections",
        "tags": [
          "IntegrationConnections"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/folders/tree": {
      "get": {
        "callbacks": {},
        "description": "Returns the full folder tree structure for a workspace.\nLimited to 500 folders total.\n",
        "operationId": "folder-tree-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Include membership information for the calling user",
            "in": "query",
            "name": "include_membership_info",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Folders.IncludeMembershipInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folders.FolderTreeResponse"
                }
              }
            },
            "description": "Folders.FolderTreeResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get folder tree",
        "tags": [
          "Folders"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entity_ids": {
      "get": {
        "callbacks": {},
        "description": "Returns entity IDs in a given Project",
        "operationId": "entity-id-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "parent_entity_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "active_view_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of property slugs/ids to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Projects.ListEntities.ListEntitiesOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ListEntities.ListEntityIdsResponse"
                }
              }
            },
            "description": "Projects.ListEntities.ListEntityIdsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List all entity IDs in a Project",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/triggers/{trigger_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes a trigger",
        "operationId": "trigger-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "trigger_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete a trigger",
        "tags": [
          "Automations"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Returns details of a single trigger",
        "operationId": "trigger-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "trigger_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automations.TriggerResponse"
                }
              }
            },
            "description": "Automations.TriggerResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Return a trigger",
        "tags": [
          "Automations"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/properties/{property_id_or_slug}/bulk_confirm_file_upload": {
      "post": {
        "callbacks": {},
        "description": "Finishes files upload process for a given set of entities within property.\nThis operation is atomic and will either confirm all files or none in case of any failures.\n\nThis API is limited to only simple `file` properties and will not work with any compound types\nthat require additional processing after upload, like `file_collection` field itself (you can still confirm files within that collection).\n\nConfirming files with this API in a manual collection will also trigger a recalculation of all depended fields in parent project.\nThis, together with the fact that multiple files are being confirmed at once aims to reduce token consumption in parent projects.\n",
        "operationId": "entity-bulk-confirm-file-upload",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Property ID or slug",
            "in": "path",
            "name": "property_id_or_slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Projects.PropertyIdOrSlug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.Entities.EntityBulkConfirmUploadRequest"
              }
            }
          },
          "description": "Projects.Entities.EntityBulkConfirmUploadRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.Entities.EntityBulkConfirmUploadResponse"
                }
              }
            },
            "description": "Projects.Entities.EntityBulkConfirmUploadResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Confirm files has been uploaded to fields",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/tool_integrations/toggle": {
      "post": {
        "callbacks": {},
        "description": "Toggles enabled/disabled state of a given tool integration in the workspace.\nDisabled integrations render tools using them inoperable in the workspace.\n",
        "operationId": "tools-toggle-integration",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tools.Integrations.ToggleIntegrationStateRequest"
              }
            }
          },
          "description": "Tools.Integrations.ToggleIntegrationStateRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tools.Integrations.ToolIntegrationsResponse"
                }
              }
            },
            "description": "Tools.Integrations.ToolIntegrationsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Toggles enabled/disabled state of tool integration",
        "tags": [
          "Tools"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/filter": {
      "post": {
        "callbacks": {},
        "description": "Returns details of entities in a given Project, allows for filtering",
        "operationId": "filtered-entity-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.ListEntitiesRequest"
              }
            }
          },
          "description": "Projects.ListEntitiesRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ListEntities.ListEntitiesResponse"
                }
              }
            },
            "description": "Projects.ListEntities.ListEntitiesResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List all entities in a Project",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/billing/usage": {
      "get": {
        "callbacks": {},
        "description": "Returns limit usage information for a project, both for plan limit and system ones.\nThe plan usage is returned by the current effective plan of the project.\n",
        "operationId": "billing-project-usage",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Billing.ProjectUsageResponse"
                }
              }
            },
            "description": "Billing.ProjectUsageResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get limit usage for a project",
        "tags": [
          "Billing"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/properties/{property_id_or_slug}/start_file_upload": {
      "post": {
        "callbacks": {},
        "description": "Start the file upload process for a given entity property.\nUse the retrieved `file_upload_url` to upload the file to the storage.\nAfter file is uploaded use returned `confirm_upload_url` to confirm the upload.\nBe sure to use provided confirm URL as this request may redirect you to different\nSub-Project as result of upload initiation.\n",
        "operationId": "entity-start-file-upload",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Property ID or slug",
            "in": "path",
            "name": "property_id_or_slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Projects.PropertyIdOrSlug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.StartFileUploadRequest"
              }
            }
          },
          "description": "Projects.StartFileUploadRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.StartFileUploadResponse"
                }
              }
            },
            "description": "Projects.StartFileUploadResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Retrieve a url to upload a file to a field",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/views": {
      "get": {
        "callbacks": {},
        "description": "List all views for a given project",
        "operationId": "project-list-views",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ListViewsResponse"
                }
              }
            },
            "description": "Projects.ListViewsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List project views",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new view for a project",
        "operationId": "project-add-view",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.CreateViewRequest"
              }
            }
          },
          "description": "Projects.CreateViewRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ViewResponse"
                }
              }
            },
            "description": "Projects.ViewResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Creates a new project view",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/members/{user_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes a user's role in a Project. After this operation user may loose access to resource, unless\nthey have inherited roles from parent resources. `user_id` parameter can either be valid user's UUID\nor `anyone_in_workspace` or `anyone_in_folder`. `anyone_in_workspace` and `anyone_in_folder`\nare special user IDs that can be used to revoke access from anyone in the Workspace and/or Folder\nrespectively that don't have any roles explicitly granted to them on Project or parent resources.\n",
        "operationId": "user-project-member-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Users.MemberId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ResourceMemberResponse"
                }
              }
            },
            "description": "Users.ResourceMemberResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete a user's role in a Project.",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Returns details of a single user in a given Project.",
        "operationId": "user-project-member-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Users.MemberId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ResourceEffectiveMemberResponse"
                }
              }
            },
            "description": "Users.ResourceEffectiveMemberResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get a member of a Project",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Adds a user's role in a Project. This role will override any inherited roles from the Workspace (if any).\n`user_id` parameter can either be valid user's UUID or `anyone_in_workspace` or `anyone_in_folder`.\n`anyone_in_workspace` and `anyone_in_folder` are special user IDs that can be used to grant roles to anyone in\nthe Workspace and/or Folder respectively. Those permissions only apply to users that don't have any\nroles explicitly granted to them on Project or parent resources.\n",
        "operationId": "user-project-member-add",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Users.MemberId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.AddMemberRequest"
              }
            }
          },
          "description": "Users.AddMemberRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ResourceMemberResponse"
                }
              }
            },
            "description": "Users.ResourceMemberResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Adds a user's role in a Project.",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "callbacks": {},
        "description": "Updates a user's role in a Project (a role has to be already assigned). This role will override\nany inherited roles from the Workspace (if any). `user_id` parameter can either be valid user's UUID\nor `anyone_in_workspace` or `anyone_in_folder`. `anyone_in_workspace` and `anyone_in_folder`\nare special user IDs that can be used to grant roles to anyone in the Workspace and/or Folder\nrespectively. Those permissions only apply to users that don't have any roles explicitly granted to\nthem on Project or parent resources.\n",
        "operationId": "user-project-member-update",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Users.MemberId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.UpdateMemberRequest"
              }
            }
          },
          "description": "Users.UpdateMemberRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ResourceMemberResponse"
                }
              }
            },
            "description": "Users.ResourceMemberResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update a user's role in a Project.",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/spaces": {
      "get": {
        "callbacks": {},
        "description": "Lists spaces.\n",
        "operationId": "space-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of field names to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Spaces.ListSpacesOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Spaces.ListSpacesResponse"
                }
              }
            },
            "description": "Spaces.ListSpacesResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List spaces",
        "tags": [
          "Spaces"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new space from a query.\n",
        "operationId": "space-create",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Spaces.DoQuery"
              }
            }
          },
          "description": "Spaces.DoQuery",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Spaces.Space"
                }
              }
            },
            "description": "Spaces.Space"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Create a new space from a query",
        "tags": [
          "Spaces"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/tool_integrations": {
      "get": {
        "callbacks": {},
        "description": "Returns current state of a given tool integration in the workspace along with\nall available tools. If integration is disabled, tools using it will be inoperable but\nstill listed under that integration.\n",
        "operationId": "tools-list-integrations",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tools.Integrations.ToolIntegrationsResponse"
                }
              }
            },
            "description": "Tools.Integrations.ToolIntegrationsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Returns current state of tool integration along with available tools.",
        "tags": [
          "Tools"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/properties/{property_id_or_slug}/set_value": {
      "put": {
        "callbacks": {},
        "deprecated": true,
        "description": "Sets a value of a field",
        "operationId": "entity-set-value",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Property ID or slug",
            "in": "path",
            "name": "property_id_or_slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Projects.PropertyIdOrSlug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.SetFieldValueRequest"
              }
            }
          },
          "description": "Projects.SetFieldValueRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.Entities.FieldResponse"
                }
              }
            },
            "description": "Projects.Entities.FieldResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Sets a field value",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/integrations/{integration_id}/connections/{connection_id}/confirm": {
      "post": {
        "callbacks": {},
        "deprecated": true,
        "description": "Confirms that the connection has been created on the Integrator.\n",
        "operationId": "integration-connection-confirm",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "The type of the integration that Go supports.",
            "in": "path",
            "name": "integration_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Integrations.IntegrationId"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integrations.ConfirmConnectionRequest"
              }
            }
          },
          "description": "Integrations.ConfirmConnectionRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations.NotStartedConnectionResponse"
                }
              }
            },
            "description": "Integrations.NotStartedConnectionResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Confirm creation of the connection",
        "tags": [
          "IntegrationConnections"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/hubs": {
      "get": {
        "callbacks": {},
        "description": "Lists all hubs in the workspace",
        "operationId": "hub-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hubs.HubsResponse"
                }
              }
            },
            "description": "Hubs.HubsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List hubs",
        "tags": [
          "Hubs"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Create a new hub in a workspace",
        "operationId": "hub-create",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hubs.CreateHubRequest"
              }
            }
          },
          "description": "Hubs.CreateHubRequest",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hubs.HubResponse"
                }
              }
            },
            "description": "Hubs.HubResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Create hub",
        "tags": [
          "Hubs"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/members/access_type": {
      "put": {
        "callbacks": {},
        "description": "Updates the access type of a project, which controls how permissions are inherited.\nValid values:\n- `public`: Roles are inherited normally\n- `private`: Non-owner/admin roles are not inherited\n- `read_only`: Non-owner/admin roles are inherited as reader\n",
        "operationId": "project-access-type-update",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.UpdateResourceAccessTypeRequest"
              }
            }
          },
          "description": "Users.UpdateResourceAccessTypeRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ListResourceMembersResponse"
                }
              }
            },
            "description": "Users.ListResourceMembersResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update a project's access type",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/billing/plans": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all plans in a given Workspace.\nThere are 3 types of plans shown:\n- Effective plan - the plan that is currently active for the workspace\n- Incomplete plans - plans that are not active at this moment, for example started upgrades or permanent \"free\" plan\n- Available plans - all plans that are available for the workspace to upgrade to\n\nUsage information within plans is only returned by the \"effective\" plan and only\nfor limits that are scoped to the workspace (not project).\n",
        "operationId": "billing-plan-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Billing.ListPlansResponse"
                }
              }
            },
            "description": "Billing.ListPlansResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List plans for current workspace",
        "tags": [
          "Billing"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "By providing details of any available plan (received from `GET /api/workspaces/:workspace_id/billing/plans`),\nyou can start the process of upgrading the plan for the workspace.\nThis API returns the details of the new plan and the URL to continue the upgrade process.\n",
        "operationId": "billing-plan-upgrade",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Billing.PlanUpgradeRequest"
              }
            }
          },
          "description": "Billing.PlanUpgradeRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Billing.PlanUpgradeResponse"
                }
              }
            },
            "description": "Billing.PlanUpgradeResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Starts process of plan upgrade",
        "tags": [
          "Billing"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/folders/{folder_id}/members/{user_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes a user's role in a Folder. After this operation user may loose access to resource, unless\nthey have inherited roles from parent resources. `user_id` parameter can either be valid user's UUID\nor `anyone_in_workspace` or `anyone_in_folder`. `anyone_in_workspace` and `anyone_in_folder`\nare special user IDs that can be used to revoke access from anyone in the Workspace and/or Folder\nrespectively that don't have any roles explicitly granted to them on Folder or parent resources.\n",
        "operationId": "user-folder-member-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Users.MemberId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ResourceMemberResponse"
                }
              }
            },
            "description": "Users.ResourceMemberResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete a user's role in a Folder.",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Returns details of a single user in a given Folder.",
        "operationId": "user-folder-member-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Users.MemberId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ResourceEffectiveMemberResponse"
                }
              }
            },
            "description": "Users.ResourceEffectiveMemberResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get a member of a Folder",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Adds a user's role in a Folder. This role will override any inherited roles from the Workspace (if any).\n`user_id` parameter can either be valid user's UUID or `anyone_in_workspace` or `anyone_in_folder`.\n`anyone_in_workspace` and `anyone_in_folder` are special user IDs that can be used to grant roles to anyone in\nthe Workspace and/or Folder respectively. Those permissions only apply to users that don't have any\nroles explicitly granted to them on Folder or parent resources.\n",
        "operationId": "user-folder-member-add",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Users.MemberId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.AddMemberRequest"
              }
            }
          },
          "description": "Users.AddMemberRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ResourceMemberResponse"
                }
              }
            },
            "description": "Users.ResourceMemberResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Adds a user's role in a Folder.",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "callbacks": {},
        "description": "Updates a user's role in a Folder (a role has to be already assigned). This role will override\nany inherited roles from the Workspace (if any). `user_id` parameter can either be valid user's UUID\nor `anyone_in_workspace` or `anyone_in_folder`. `anyone_in_workspace` and `anyone_in_folder`\nare special user IDs that can be used to grant roles to anyone in the Workspace and/or Folder\nrespectively. Those permissions only apply to users that don't have any roles explicitly granted to\nthem on Folder or parent resources.\n",
        "operationId": "user-folder-member-update",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Users.MemberId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.UpdateMemberRequest"
              }
            }
          },
          "description": "Users.UpdateMemberRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ResourceMemberResponse"
                }
              }
            },
            "description": "Users.ResourceMemberResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update a user's role in a Folder.",
        "tags": [
          "Users"
        ]
      }
    },
    "/oauth/token": {
      "post": {
        "callbacks": {},
        "description": "Forwards the token request to Auth0's token endpoint with mTLS support",
        "operationId": "auth0-oauth-token-proxy",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          },
          "description": "TokenRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            },
            "description": "TokenResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Exchange credentials for an access token",
        "tags": [
          "OAuth"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/integrations/{integration_id}/connections/{connection_id}/start_file_picker_session": {
      "post": {
        "callbacks": {},
        "description": "Starts a file picker session for the given connection.\nReturns all data required to open an integration-specific file picker.\n",
        "operationId": "integration-connection-start-file-picker-session",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "The type of the integration that Go supports.",
            "in": "path",
            "name": "integration_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Integrations.IntegrationId"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations.StartFilePickerSessionResponse"
                }
              }
            },
            "description": "Integrations.StartFilePickerSessionResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Start a file picker session",
        "tags": [
          "IntegrationConnections"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/properties/{property_id_or_slug}/confirm_file_upload": {
      "post": {
        "callbacks": {},
        "description": "Finish the file upload process for a given entity property",
        "operationId": "entity-confirm-file-upload",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Property ID or slug",
            "in": "path",
            "name": "property_id_or_slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Projects.PropertyIdOrSlug"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.Entities.FieldResponse"
                }
              }
            },
            "description": "Projects.Entities.FieldResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Confirm the file has been uploaded to a field",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/ask_go/{session_id}/message_metadata": {
      "put": {
        "callbacks": {},
        "description": "Sets metadata object onto the message within the session",
        "operationId": "ask-go-set-message-metadata",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "session_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AskGo.SetMessageMetadataRequest"
              }
            }
          },
          "description": "AskGo.SetMessageMetadataRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AskGo.SessionResponse"
                }
              }
            },
            "description": "AskGo.SessionResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Sets metadata object onto the message",
        "tags": [
          "AskGo"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/billing/effective-plan": {
      "get": {
        "callbacks": {},
        "description": "Returns details of the effective plan for a given Workspace.\nEffective plan is the plan that is currently active for the workspace.\n\nUsage information within the effective plan is only returned for limits that are scoped to the workspace (not project).\n",
        "operationId": "billing-get-effective-plan",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Billing.Plan"
                }
              }
            },
            "description": "Billing.Plan"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get effective plan for current workspace",
        "tags": [
          "Billing"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/properties/from_prompt": {
      "post": {
        "callbacks": {},
        "description": "Returns a property configuration based on a prompt, without saving it to the database",
        "operationId": "project-property-config-from-prompt",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.PropertyConfigFromPromptRequest"
              }
            }
          },
          "description": "Projects.PropertyConfigFromPromptRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.PropertyResponse"
                }
              }
            },
            "description": "Projects.PropertyResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Generate a property configuration from a prompt",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/invitations/accept": {
      "post": {
        "callbacks": {},
        "description": "Accepts the invitation, adding user to the project and its parent workspace",
        "operationId": "project-invitation-accept",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitations.AcceptInvitationRequest"
              }
            }
          },
          "description": "Invitations.AcceptInvitationRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitations.ProjectInvitationResponse"
                }
              }
            },
            "description": "Invitations.ProjectInvitationResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Accept an invitation",
        "tags": [
          "ProjectInvitations"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/properties/{property_id_or_slug}/skip": {
      "post": {
        "callbacks": {},
        "description": "Marks a field as skipped. This can only be used on fields that are in the 'idle' state.\n",
        "operationId": "entity-skip-field",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Property ID or slug",
            "in": "path",
            "name": "property_id_or_slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Projects.PropertyIdOrSlug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.SkipFieldRequest"
              }
            }
          },
          "description": "Projects.SkipFieldRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.Entities.FieldResponse"
                }
              }
            },
            "description": "Projects.Entities.FieldResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Skips a field",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/cases": {
      "get": {
        "callbacks": {},
        "description": "Lists cases",
        "operationId": "case-list-cases",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "agent_ids",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUIDList"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "name_contains",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.NullableString"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "owner_ids",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUIDList"
            }
          },
          {
            "description": "List of field names to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Cases.ListCasesOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cases.ListCasesResponse"
                }
              }
            },
            "description": "Cases.ListCasesResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Lists cases",
        "tags": [
          "Cases"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new case",
        "operationId": "case-create-case",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cases.CreateCaseRequest"
              }
            }
          },
          "description": "Cases.CreateCaseRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cases.CaseResponse"
                }
              }
            },
            "description": "Cases.CaseResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Creates a new case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/properties": {
      "get": {
        "callbacks": {},
        "description": "Lists properties in a project.",
        "operationId": "project-list-properties",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ListPropertiesResponse"
                }
              }
            },
            "description": "Projects.ListPropertiesResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List properties in a project",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Adds a property to a project",
        "operationId": "project-add-property",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.AddPropertyRequest"
              }
            }
          },
          "description": "Projects.AddPropertyRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.PropertyResponse"
                }
              }
            },
            "description": "Projects.PropertyResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Add a property to a project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/views/{view_id}": {
      "delete": {
        "callbacks": {},
        "description": "Delete a given project's view",
        "operationId": "project-delete-view",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete a project view",
        "tags": [
          "Projects"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Get a given project's view",
        "operationId": "project-get-view",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ViewResponse"
                }
              }
            },
            "description": "Projects.ViewResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get a project view",
        "tags": [
          "Projects"
        ]
      },
      "put": {
        "callbacks": {},
        "description": "Update a given project's view",
        "operationId": "project-update-view",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.UpdateViewRequest"
              }
            }
          },
          "description": "Projects.UpdateViewRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ViewResponse"
                }
              }
            },
            "description": "Projects.ViewResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update a project view",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/properties/{property_id_or_slug}/set_metadata": {
      "put": {
        "callbacks": {},
        "description": "Sets a metadata of a field",
        "operationId": "entity-set-metadata",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Property ID or slug",
            "in": "path",
            "name": "property_id_or_slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Projects.PropertyIdOrSlug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.SetFieldMetadataRequest"
              }
            }
          },
          "description": "Projects.SetFieldMetadataRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.Entities.FieldResponse"
                }
              }
            },
            "description": "Projects.Entities.FieldResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Sets a field metadata",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/api_keys/{api_key_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes an api key",
        "operationId": "api-key-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "api_key_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete an api key",
        "tags": [
          "ApiKeys"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Returns details of a single api key",
        "operationId": "api-key-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "api_key_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeys.ApiKeyResponse"
                }
              }
            },
            "description": "ApiKeys.ApiKeyResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Return an api key",
        "tags": [
          "ApiKeys"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/import_from_template": {
      "post": {
        "callbacks": {},
        "description": "Creates one or more new projects based on the provided template definition.",
        "operationId": "template-import-projects",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Templates.ImportProjectsRequest"
              }
            }
          },
          "description": "Templates.ImportProjectsRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Templates.ImportProjectsResponse"
                }
              }
            },
            "description": "Templates.ImportProjectsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Creates new projects from a template structure",
        "tags": [
          "Templates"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/library/entities": {
      "get": {
        "callbacks": {},
        "description": "Returns details of entities in a given Library project.",
        "operationId": "library-entity-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "parent_entity_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "deprecated": true,
            "description": "",
            "in": "query",
            "name": "active_view_ids",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUIDList"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "active_view_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of property slugs/ids to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Library.ListEntitiesOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Library.ListEntitiesResponse"
                }
              }
            },
            "description": "Library.ListEntitiesResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List all entities in a Library",
        "tags": [
          "Library"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/icon": {
      "delete": {
        "callbacks": {},
        "description": "Removes a workspace icon; the workspace icon URL will return 404.",
        "operationId": "workspace-remove-icon",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Removes a workspace icon",
        "tags": [
          "Projects",
          "Workspaces"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Updates a workspace icon to one uploaded with this API.",
        "operationId": "workspace-update-icon",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Workspaces.UpdateWorkspaceIconRequest"
              }
            }
          },
          "description": "Workspaces.UpdateWorkspaceIconRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspaces.WorkspaceResponse"
                }
              }
            },
            "description": "Workspaces.WorkspaceResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "415": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update a workspace icon",
        "tags": [
          "Projects",
          "Workspaces"
        ]
      }
    },
    "/api/api_keys": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all api keys for the current user. Supports pagination using limit/offset or cursors. Maximum page size is 1000.",
        "operationId": "api-keys-list",
        "parameters": [
          {
            "description": "List of field names to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ApiKeys.ListApiKeysOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeys.ListApiKeysResponse"
                }
              }
            },
            "description": "ApiKeys.ListApiKeysResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List api keys for a user",
        "tags": [
          "ApiKeys"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new api key",
        "operationId": "api-key-create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeys.CreateApiKeyRequest"
              }
            }
          },
          "description": "ApiKeys.CreateApiKeyRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeys.ApiKeyResponse"
                }
              }
            },
            "description": "ApiKeys.ApiKeyResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Create an api key",
        "tags": [
          "ApiKeys"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/exports/{export_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes an export",
        "operationId": "export-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "export_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete an export",
        "tags": [
          "Exports"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Returns details of a single export",
        "operationId": "export-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "export_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exports.ExportResponse"
                }
              }
            },
            "description": "Exports.ExportResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Return an Export",
        "tags": [
          "Exports"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/integrations/{integration_id}/connections": {
      "post": {
        "callbacks": {},
        "description": "Generates new connect session that includes a token that can be used to\ncreate new connection on the Integrator.\n",
        "operationId": "integration-connection-create",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "The type of the integration that Go supports.",
            "in": "path",
            "name": "integration_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Integrations.IntegrationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations.ConnectSessionResponse"
                }
              }
            },
            "description": "Integrations.ConnectSessionResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Create a new connect session",
        "tags": [
          "IntegrationConnections"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/previous": {
      "get": {
        "callbacks": {},
        "description": "Gets the previous entity in a project",
        "operationId": "get-previous-entity",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "deprecated": true,
            "description": "",
            "in": "query",
            "name": "active_view_ids",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUIDList"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "active_view_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of property slugs/ids to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Projects.ListEntities.ListEntitiesOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ListEntities.ListEntitiesResponse"
                }
              }
            },
            "description": "Projects.ListEntities.ListEntitiesResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Gets the previous entity",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/hubs/{hub_id}": {
      "delete": {
        "callbacks": {},
        "description": "Delete a hub by ID",
        "operationId": "hub-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "hub_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hubs.HubResponse"
                }
              }
            },
            "description": "Hubs.HubResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete hub",
        "tags": [
          "Hubs"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Get a specific hub by ID",
        "operationId": "hub-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "hub_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hubs.HubResponse"
                }
              }
            },
            "description": "Hubs.HubResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get hub",
        "tags": [
          "Hubs"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/folders/{folder_id}/members/access_type": {
      "put": {
        "callbacks": {},
        "description": "Updates the access type of a folder, which controls how permissions are inherited.\nValid values:\n- `public`: Roles are inherited normally\n- `private`: Non-owner/admin roles are not inherited\n- `read_only`: Non-owner/admin roles are inherited as reader\n",
        "operationId": "folder-access-type-update",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.UpdateResourceAccessTypeRequest"
              }
            }
          },
          "description": "Users.UpdateResourceAccessTypeRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ListResourceMembersResponse"
                }
              }
            },
            "description": "Users.ListResourceMembersResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update a folder's access type",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/properties/{property_id_or_slug}": {
      "delete": {
        "callbacks": {},
        "description": "Removes a property from a project",
        "operationId": "project-remove-property",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Property ID or slug",
            "in": "path",
            "name": "property_id_or_slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Projects.PropertyIdOrSlug"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Remove a property from a project",
        "tags": [
          "Projects"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Returns details of a project's property",
        "operationId": "project-get-property",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Property ID or slug",
            "in": "path",
            "name": "property_id_or_slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Projects.PropertyIdOrSlug"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.PropertyResponse"
                }
              }
            },
            "description": "Projects.PropertyResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get a property",
        "tags": [
          "Projects"
        ]
      },
      "put": {
        "callbacks": {},
        "description": "Updates a property in a project",
        "operationId": "project-update-property",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Property ID or slug",
            "in": "path",
            "name": "property_id_or_slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Projects.PropertyIdOrSlug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.UpdatePropertyRequest"
              }
            }
          },
          "description": "Projects.UpdatePropertyRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.PropertyResponse"
                }
              }
            },
            "description": "Projects.PropertyResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update a property in a project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/ask_go/{session_id}/start_file_upload": {
      "post": {
        "callbacks": {},
        "description": "Starts a file upload",
        "operationId": "ask-go-start-file-upload",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "session_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.StartFileUploadRequest"
              }
            }
          },
          "description": "Projects.StartFileUploadRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.StartFileUploadResponse"
                }
              }
            },
            "description": "Projects.StartFileUploadResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Starts a file upload",
        "tags": [
          "AskGo"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/billing/usage": {
      "get": {
        "callbacks": {},
        "description": "Returns limit usage information for a workspace, both for plan limit and system ones.\nThe plan usage is returned by the current effective plan of the workspace.\n",
        "operationId": "billing-workspace-usage",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Billing.WorkspaceUsageResponse"
                }
              }
            },
            "description": "Billing.WorkspaceUsageResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get limit usage for a workspace",
        "tags": [
          "Billing"
        ]
      }
    },
    "/api/users/{user_id}": {
      "get": {
        "callbacks": {},
        "description": "Returns details of a single user",
        "operationId": "user-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.UserResponse"
                }
              }
            },
            "description": "Users.UserResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Return a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/invitations/verify": {
      "get": {
        "callbacks": {},
        "description": "Checks if invitation token is valid for a given email address and workspace",
        "operationId": "workspace-invitation-verify",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "invite_token",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.String"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.String"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitations.WorkspaceInvitationVerifyResponse"
                }
              }
            },
            "description": "Invitations.WorkspaceInvitationVerifyResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Verify invitation",
        "tags": [
          "WorkspaceInvitations"
        ]
      }
    },
    "/api/workspaces": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all workspaces the user has access to",
        "operationId": "workspace-list",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspaces.ListWorkspacesResponse"
                }
              }
            },
            "description": "Workspaces.ListWorkspacesResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List workspaces",
        "tags": [
          "Projects",
          "Workspaces"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new workspace",
        "operationId": "workspace-create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workspaces.CreateWorkspaceRequest"
              }
            }
          },
          "description": "Workspaces.CreateWorkspaceRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspaces.WorkspaceResponse"
                }
              }
            },
            "description": "Workspaces.WorkspaceResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Create a workspace",
        "tags": [
          "Projects",
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/folders/{folder_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes a folder.\nBy default, will only delete empty folders.\nIf recursive=true, will delete the folder and all its contents (subfolders and projects).\n  Recursive deletion is asynchronous which means that while all relevant children will become inaccessible immediately,\n  only the parent folder will emit removal event. All clients need to assume all children are deleted based on that\n  top level notification.\nIf recursive=false, will only delete the folder if it is empty, erroring otherwise.\n",
        "operationId": "folder-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Whether to recursively delete all nested folders and projects",
            "in": "query",
            "name": "recursive",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Folders.Recursive"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete folder",
        "tags": [
          "Folders"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Returns details about a specific folder.\n",
        "operationId": "folder-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folders.FolderResponse"
                }
              }
            },
            "description": "Folders.FolderResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get folder details",
        "tags": [
          "Folders"
        ]
      },
      "put": {
        "callbacks": {},
        "description": "Updates the details of the folder.\nSupported updates:\n- name\n",
        "operationId": "folder-update",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folders.UpdateFolderRequest"
              }
            }
          },
          "description": "Folders.UpdateFolderRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folders.FolderResponse"
                }
              }
            },
            "description": "Folders.FolderResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update folder",
        "tags": [
          "Folders"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/ask_go/{session_id}/ask": {
      "post": {
        "callbacks": {},
        "description": "Ask a question",
        "operationId": "ask-go-ask",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "session_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AskGo.AskRequest"
              }
            }
          },
          "description": "AskGo.AskRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AskGo.SessionResponse"
                }
              }
            },
            "description": "AskGo.SessionResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Ask a question",
        "tags": [
          "AskGo"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/ask_go": {
      "get": {
        "callbacks": {},
        "description": "List sessions",
        "operationId": "ask-go-list-sessions",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AskGo.ListSessionsResponse"
                }
              }
            },
            "description": "AskGo.ListSessionsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List sessions",
        "tags": [
          "AskGo"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new session",
        "operationId": "ask-go-create-session",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AskGo.CreateSessionRequest"
              }
            }
          },
          "description": "AskGo.CreateSessionRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AskGo.SessionResponse"
                }
              }
            },
            "description": "AskGo.SessionResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Creates a new session",
        "tags": [
          "AskGo"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/cases/{case_id}/start_file_upload": {
      "post": {
        "callbacks": {},
        "description": "Start the file upload process for a given Case.\nUse the retrieved `file_upload_url` to upload the file to the storage.\nAfter file is uploaded, use `case-confirm-files-upload` to confirm the upload.\n",
        "operationId": "case-start-file-upload",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "case_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cases.StartFileUploadRequest"
              }
            }
          },
          "description": "Cases.StartFileUploadRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cases.StartFileUploadResponse"
                }
              }
            },
            "description": "Cases.StartFileUploadResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Retrieve a url to upload a file to a Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/cases/{case_id}/queries/{message_id}": {
      "put": {
        "callbacks": {},
        "description": "Edits a specific query message in a case and removes all subsequent messages",
        "operationId": "case-edit-case-query",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "case_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "message_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cases.EditCaseQueryRequest"
              }
            }
          },
          "description": "Cases.EditCaseQueryRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cases.CaseResponse"
                }
              }
            },
            "description": "Cases.CaseResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Edits a case query",
        "tags": [
          "Cases"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/next": {
      "get": {
        "callbacks": {},
        "description": "Gets the next entity in a project",
        "operationId": "get-next-entity",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "deprecated": true,
            "description": "",
            "in": "query",
            "name": "active_view_ids",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUIDList"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "active_view_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of property slugs/ids to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Projects.ListEntities.ListEntitiesOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ListEntities.ListEntitiesResponse"
                }
              }
            },
            "description": "Projects.ListEntities.ListEntitiesResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Gets the next entity",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/invitations/{invitation_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes an pending invitation from a Project.",
        "operationId": "project-invitation-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "invitation_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete an pending invitation from a Project",
        "tags": [
          "ProjectInvitations"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/imports/{import_id}/start": {
      "post": {
        "callbacks": {},
        "description": "Starts a new import that already has import file uploaded.\n",
        "operationId": "import-start",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "import_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imports.ImportResponse"
                }
              }
            },
            "description": "Imports.ImportResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Starts an Import",
        "tags": [
          "Imports"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/invitations": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all invitations in a given Workspace. Supports pagination using limit/offset or cursors. Maximum page size is 1000.\n",
        "operationId": "workspace-invitation-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of field names to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Invitations.OrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitations.ListWorkspaceInvitationsResponse"
                }
              }
            },
            "description": "Invitations.ListWorkspaceInvitationsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List invitations in a Workspace",
        "tags": [
          "WorkspaceInvitations"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new invitation into a Workspace. The invitation will be sent to the email address provided.\nIf the invitation is already pending or expired for this email/workspace combo,\nif will be updated with the new role and resend.\n",
        "operationId": "workspace-invitation-create",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitations.CreateInvitationRequest"
              }
            }
          },
          "description": "Invitations.CreateInvitationRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitations.CreateInvitationResponse"
                }
              }
            },
            "description": "Invitations.CreateInvitationResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Create new invitation into a Workspace",
        "tags": [
          "WorkspaceInvitations"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/cover_image": {
      "delete": {
        "callbacks": {},
        "description": "Removes a project's cover image; the cover image URLs will return 404.",
        "operationId": "project-remove-cover-image",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Removes a project's cover image",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Updates a project's cover image to one uploaded with this API.",
        "operationId": "project-update-cover-image",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Projects.UpdateProjectCoverImageRequest"
              }
            }
          },
          "description": "Projects.UpdateProjectCoverImageRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ProjectResponse"
                }
              }
            },
            "description": "Projects.ProjectResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "415": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update a project's cover image",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/users/me": {
      "get": {
        "callbacks": {},
        "description": "Returns details of a logged in user",
        "operationId": "user-get-me",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.UserMeResponse"
                }
              }
            },
            "description": "Users.UserMeResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Return a user",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "callbacks": {},
        "description": "Updates information of the currently logged in user",
        "operationId": "user-update-me",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.UserMeUpdateRequest"
              }
            }
          },
          "description": "Users.UserMeUpdateRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.UserMeResponse"
                }
              }
            },
            "description": "Users.UserMeResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/invitations/verify": {
      "get": {
        "callbacks": {},
        "description": "Checks if invitation token is valid for a given email address, project and workspace",
        "operationId": "project-invitation-verify",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "invite_token",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.String"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.String"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitations.ProjectInvitationVerifyResponse"
                }
              }
            },
            "description": "Invitations.ProjectInvitationVerifyResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Verify invitation",
        "tags": [
          "ProjectInvitations"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/imports": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all imports in a given project. Supports pagination using limit/offset or cursors. Maximum page size is 1000.",
        "operationId": "import-list-project",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of field names to order by.\nBy default the list is ordered by `created_at` in descending order.\n",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Imports.ListImportsOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imports.ListImportsResponse"
                }
              }
            },
            "description": "Imports.ListImportsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List imports in a project",
        "tags": [
          "Imports"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/ask_go/create_project_from_prompt": {
      "post": {
        "callbacks": {},
        "description": "From a user specific prompt a project is created",
        "operationId": "ask-go-create-project-from-prompt",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AskGo.CreateProjectFromPromptRequest"
              }
            }
          },
          "description": "AskGo.CreateProjectFromPromptRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AskGo.CreateProjectFromPromptResponse"
                }
              }
            },
            "description": "AskGo.CreateProjectFromPromptResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Creates a project from a user specified prompt",
        "tags": [
          "AskGo"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/hubs/{hub_id}/reindex": {
      "post": {
        "callbacks": {},
        "description": "Request reindexing of a hub",
        "operationId": "hub-reindex",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "hub_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hubs.HubResponse"
                }
              }
            },
            "description": "Hubs.HubResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Reindex hub",
        "tags": [
          "Hubs"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/cases/{case_id}/adopt_entity": {
      "post": {
        "callbacks": {},
        "description": "Adopts an existing Entity into the Case",
        "operationId": "case-adopt-entity",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "case_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cases.AdoptEntityRequest"
              }
            }
          },
          "description": "Cases.AdoptEntityRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cases.CaseResponse"
                }
              }
            },
            "description": "Cases.CaseResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Adopts an existing Entity into the Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/folders/{folder_id}/members": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all members in a given Folder.",
        "operationId": "user-folder-members-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Whether to show which resources users doesn't have access to,\npreventing them from accessing current resource.\n",
            "in": "query",
            "name": "show_missing_access",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Users.ShowMissingAccess"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ListResourceMembersResponse"
                }
              }
            },
            "description": "Users.ListResourceMembersResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List members in a Folder",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/export_to_template": {
      "post": {
        "callbacks": {},
        "description": "Exports one or more projects to a template definition.",
        "operationId": "template-export-projects",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Templates.ExportProjectsRequest"
              }
            }
          },
          "description": "Templates.ExportProjectsRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Templates.ExportProjectsResponse"
                }
              }
            },
            "description": "Templates.ExportProjectsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Exports projects to a template structure",
        "tags": [
          "Templates"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/imports/{import_id}": {
      "get": {
        "callbacks": {},
        "description": "Returns details of a single import",
        "operationId": "import-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "import_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imports.ImportResponse"
                }
              }
            },
            "description": "Imports.ImportResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Return an Import",
        "tags": [
          "Imports"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/bulk_delete": {
      "post": {
        "callbacks": {},
        "description": "Delete given list of entity IDs for given project ID",
        "operationId": "entity-bulk-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bulk_delete_entities"
              }
            }
          },
          "description": "bulk_delete_entities",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.EntityBulkRemoveResponse"
                }
              }
            },
            "description": "Projects.EntityBulkRemoveResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Bulk delete entities",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/recalculate": {
      "post": {
        "callbacks": {},
        "description": "Recalculate all entity fields for provided properties",
        "operationId": "entity-recalculate-all",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.RecalculateEntitiesRequest"
              }
            }
          },
          "description": "Projects.RecalculateEntitiesRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.RecalculateEntitiesResponse"
                }
              }
            },
            "description": "Projects.RecalculateEntitiesResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Recalculate all entities",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/invitations/{invitation_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes an pending invitation from a Workspace.",
        "operationId": "workspace-invitation-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "invitation_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete an pending invitation from a Workspace",
        "tags": [
          "WorkspaceInvitations"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/invitations/accept": {
      "post": {
        "callbacks": {},
        "description": "Accepts the invitation, adding user to the workspace",
        "operationId": "workspace-invitation-accept",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitations.AcceptInvitationRequest"
              }
            }
          },
          "description": "Invitations.AcceptInvitationRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitations.WorkspaceInvitationResponse"
                }
              }
            },
            "description": "Invitations.WorkspaceInvitationResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Accept an invitation",
        "tags": [
          "WorkspaceInvitations"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/cases/{case_id}/queries": {
      "post": {
        "callbacks": {},
        "description": "Adds a case query",
        "operationId": "case-add-case-query",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "case_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cases.AddCaseQueryRequest"
              }
            }
          },
          "description": "Cases.AddCaseQueryRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cases.CaseResponse"
                }
              }
            },
            "description": "Cases.CaseResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Adds a case query",
        "tags": [
          "Cases"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/spaces/{space_id}/messages": {
      "get": {
        "callbacks": {},
        "description": "Lists messages in a space.\n",
        "operationId": "space-list-messages",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "space_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Spaces.ListMessagesResponse"
                }
              }
            },
            "description": "Spaces.ListMessagesResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List messages in a space",
        "tags": [
          "Spaces"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Adds a query to a space.\n",
        "operationId": "space-add-query",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "space_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Spaces.DoQuery"
              }
            }
          },
          "description": "Spaces.DoQuery",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Spaces.Space"
                }
              }
            },
            "description": "Spaces.Space"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Add a query to a space",
        "tags": [
          "Spaces"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/tool_keys/{tool_key_id}/model_configs": {
      "get": {
        "callbacks": {},
        "description": "Returns all custom model configurations for a given tool key.\nThis list will always include all available tools and their (potentially empty/default)\nconfigurations.\n",
        "operationId": "tools-list-model-configs",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "tool_key_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tools.KeyManager.ListToolModelConfigsResponse"
                }
              }
            },
            "description": "Tools.KeyManager.ListToolModelConfigsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List model configs for a given tool key",
        "tags": [
          "Tools"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/folders": {
      "get": {
        "callbacks": {},
        "description": "Lists folders in the workspace, optionally filtered by a parent folder.\nSupports pagination with a maximum page size of 1000.\n",
        "operationId": "folder-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "parent_folder_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Include membership information for the calling user",
            "in": "query",
            "name": "include_membership_info",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Folders.IncludeMembershipInfo"
            }
          },
          {
            "description": "List of field names to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Folders.ListFoldersOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folders.ListFoldersResponse"
                }
              }
            },
            "description": "Folders.ListFoldersResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List folders",
        "tags": [
          "Folders"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new folder in a workspace.\nThe folder will be created as a subfolder of the `parent_folder_id` if provided.\n",
        "operationId": "folder-create",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folders.CreateFolderRequest"
              }
            }
          },
          "description": "Folders.CreateFolderRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folders.FolderResponse"
                }
              }
            },
            "description": "Folders.FolderResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Create folder",
        "tags": [
          "Folders"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/triggers": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all trigger in a given Workspace. Supports pagination using limit/offset or cursors. Maximum page size is 1000.",
        "operationId": "trigger-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of field names to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Automations.ListAutomationsOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automations.ListTriggersResponse"
                }
              }
            },
            "description": "Automations.ListTriggersResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List triggers in a workspace",
        "tags": [
          "Automations"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new trigger",
        "operationId": "trigger-create",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Automations.CreateTriggerRequest"
              }
            }
          },
          "description": "Automations.CreateTriggerRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automations.TriggerResponse"
                }
              }
            },
            "description": "Automations.TriggerResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Create a trigger",
        "tags": [
          "Automations"
        ]
      }
    },
    "/api/workspaces/{workspace_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes a workspace",
        "operationId": "workspace-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete a workspace",
        "tags": [
          "Projects",
          "Workspaces"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Returns details of a single workspace",
        "operationId": "workspace-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspaces.WorkspaceResponse"
                }
              }
            },
            "description": "Workspaces.WorkspaceResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Return a workspace",
        "tags": [
          "Projects",
          "Workspaces"
        ]
      },
      "put": {
        "callbacks": {},
        "description": "Updates a workspace",
        "operationId": "workspace-update",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workspaces.UpdateWorkspaceRequest"
              }
            }
          },
          "description": "Workspaces.UpdateWorkspaceRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspaces.WorkspaceResponse"
                }
              }
            },
            "description": "Workspaces.WorkspaceResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update a workspace",
        "tags": [
          "Projects",
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/cases/{case_id}/files/{file_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes a file linked to a Case removing it from its' context",
        "operationId": "case-delete-file",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "case_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.UUID"
                }
              }
            },
            "description": "Common.UUID"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete a file linked to a Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/cases/{case_id}/restart": {
      "post": {
        "callbacks": {},
        "description": "Restarts a case by preserving the most recent user query and setting the status to ready",
        "operationId": "case-restart-case",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "case_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cases.CaseResponse"
                }
              }
            },
            "description": "Cases.CaseResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Restarts a case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/recalculate": {
      "post": {
        "callbacks": {},
        "description": "Recalculate entity's fields for provided properties",
        "operationId": "entity-recalculate-single",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.RecalculateEntitiesRequest"
              }
            }
          },
          "description": "Projects.RecalculateEntitiesRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.RecalculateEntitiesResponse"
                }
              }
            },
            "description": "Projects.RecalculateEntitiesResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Recalculate entity fields",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/library/entities/{entity_id}": {
      "put": {
        "callbacks": {},
        "description": "Updates attributes of a Library item.",
        "operationId": "library-update-entity-attributes",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Library.UpsertEntityAttributesRequest"
              }
            }
          },
          "description": "Library.UpsertEntityAttributesRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Library.EntityResponse"
                }
              }
            },
            "description": "Library.EntityResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update Library's entity attributes",
        "tags": [
          "Library"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/members/{user_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes a user's role in a workspace",
        "operationId": "user-workspace-member-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Users.MemberId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ResourceMemberResponse"
                }
              }
            },
            "description": "Users.ResourceMemberResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete a user's role in a workspace",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Returns details of a single user in a given Workspace.",
        "operationId": "workspace-member-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Users.MemberId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ResourceEffectiveMemberResponse"
                }
              }
            },
            "description": "Users.ResourceEffectiveMemberResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get a member of a Workspace",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "callbacks": {},
        "description": "Updates a user's role in a workspace",
        "operationId": "user-workspace-member-update",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Users.MemberId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.UpdateMemberRequest"
              }
            }
          },
          "description": "Users.UpdateMemberRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ResourceMemberResponse"
                }
              }
            },
            "description": "Users.ResourceMemberResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update a user's role in a workspace",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/invitations": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all invitations in a given Project.\nSupports pagination using limit/offset or cursors. Maximum page size is 1000.\n",
        "operationId": "project-invitation-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of field names to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Invitations.OrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitations.ListProjectInvitationsResponse"
                }
              }
            },
            "description": "Invitations.ListProjectInvitationsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List invitations in a Project",
        "tags": [
          "ProjectInvitations"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new invitation into a Project. The invitation will be sent to the email address provided.\nInvitation will also add the user to the parent workspace with the role `reader`.\nIf the invitation is already pending or expired for this email/project combo,\nif will be updated with the new role and resend.\n",
        "operationId": "project-invitation-create",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitations.CreateInvitationRequest"
              }
            }
          },
          "description": "Invitations.CreateInvitationRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitations.CreateInvitationResponse"
                }
              }
            },
            "description": "Invitations.CreateInvitationResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Create new invitation into a Project",
        "tags": [
          "ProjectInvitations"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all projects in a given Workspace. Supports pagination using limit/offset or cursors. Maximum page size is 1000.",
        "operationId": "project-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "project_type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Projects.ProjectType"
            }
          },
          {
            "description": "Only return parent projects",
            "in": "query",
            "name": "only_parents",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Projects.OnlyParentProjects"
            }
          },
          {
            "description": "UUID to represent a folder, or null for the root folder (empty string)",
            "in": "query",
            "name": "parent_folder_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Projects.RootOrUUID"
            }
          },
          {
            "description": "Include membership information for the calling user",
            "in": "query",
            "name": "include_membership_info",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Projects.IncludeMembershipInfo"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "name_contains",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.NullableString"
            }
          },
          {
            "description": "List of field names to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Projects.ListProjectsOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ListProjectsResponse"
                }
              }
            },
            "description": "Projects.ListProjectsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List projects in a Workspace",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new project",
        "operationId": "project-create",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.CreateProjectRequest"
              }
            }
          },
          "description": "Projects.CreateProjectRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ProjectResponse"
                }
              }
            },
            "description": "Projects.ProjectResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Create a project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/integrations/{integration_id}/connections/{connection_id}/start": {
      "post": {
        "callbacks": {},
        "deprecated": true,
        "description": "Initiates syncing via the Integrator for the connection.\n",
        "operationId": "integration-connection-start",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "The type of the integration that Go supports.",
            "in": "path",
            "name": "integration_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Integrations.IntegrationId"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integrations.ConnectionStartSettings"
              }
            }
          },
          "description": "Integrations.ConnectionStartSettings",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integrations.NotStartedConnectionResponse"
                }
              }
            },
            "description": "Integrations.NotStartedConnectionResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Start the connection",
        "tags": [
          "IntegrationConnections"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/tool_keys": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all custom API keys set for a given workspace. No secrets are\nreturned in the response.\n",
        "operationId": "tools-list-keys",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tools.KeyManager.ListToolKeysResponse"
                }
              }
            },
            "description": "Tools.KeyManager.ListToolKeysResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List custom API keys set for a workspace",
        "tags": [
          "Tools"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Upserts custom API key for a given tool integration. Attached key\nwill be used by all models using that integration in the workspace.\nIf key already exists for this integration, it will be updated.\nOnly single API key can be set for each integration in the workspace.\n",
        "operationId": "tools-upsert-key",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tools.KeyManager.UpsertToolKeyRequest"
              }
            }
          },
          "description": "Tools.KeyManager.UpsertToolKeyRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tools.KeyManager.ToolKeyResponse"
                }
              }
            },
            "description": "Tools.KeyManager.ToolKeyResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Upserts custom API key for tool integration",
        "tags": [
          "Tools"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/clone": {
      "post": {
        "callbacks": {},
        "description": "Clones a project from a project template. \"Project template\" can be any project\nyou have access to, on any workspace given as `template_id` parameter (which should be that source project's ID).\nThe new project will be created in the workspace given as `workspace_id` parameter with a name given as `name` parameter.\nBy default all project structure and all entities will be cloned, however this operation is not designed to work with large\nsource projects.\nOptionally you can skip cloning entities by setting `clone_entities` to `false` in order to clone only\nproject structure.\n",
        "operationId": "project-clone",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.CloneProjectRequest"
              }
            }
          },
          "description": "Projects.CloneProjectRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ProjectResponse"
                }
              }
            },
            "description": "Projects.ProjectResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Clone a project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/imports/{import_id}/sign_upload": {
      "post": {
        "callbacks": {},
        "description": "Returns a signed URL for uploading the import file.\n",
        "operationId": "import-sign-upload",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "import_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imports.UploadUrlResponse"
                }
              }
            },
            "description": "Imports.UploadUrlResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get upload URL",
        "tags": [
          "Imports"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entity_ids/filter": {
      "post": {
        "callbacks": {},
        "description": "Returns entity IDs in a given Project",
        "operationId": "filtered-entity-id-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.ListEntitiesRequest"
              }
            }
          },
          "description": "Projects.ListEntitiesRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ListEntities.ListEntityIdsResponse"
                }
              }
            },
            "description": "Projects.ListEntities.ListEntityIdsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List all entity IDs in a Project (filtered)",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/ask_go/{session_id}": {
      "get": {
        "callbacks": {},
        "description": "Get a session",
        "operationId": "ask-go-get-session",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "session_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AskGo.SessionResponse"
                }
              }
            },
            "description": "AskGo.SessionResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get a session",
        "tags": [
          "AskGo"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/tool_keys/{tool_key_id}/model_configs/{tool}": {
      "post": {
        "callbacks": {},
        "description": "Insert or update custom configuration for a model brought to platform with a ToolKey.\nThis configuration is specific to the specific tool and its integration's API key.\nAllows to configure model parameters, such as available rate limits.\nCustom configuration cannot be removed, but can be updated to `null` values to reset\nto default (system) values.\n",
        "operationId": "tools-upsert-model-config",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "tool_key_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "tool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Tools.Integrations.ToolName"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tools.KeyManager.UpsertToolModelConfigRequest"
              }
            }
          },
          "description": "Tools.KeyManager.UpsertToolModelConfigRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tools.KeyManager.ToolModelConfigResponse"
                }
              }
            },
            "description": "Tools.KeyManager.ToolModelConfigResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Upserts custom model configuration for a given tool key / tool",
        "tags": [
          "Tools"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/library": {
      "get": {
        "callbacks": {},
        "description": "Returns a workspace-wide Library project. This project always exists",
        "operationId": "library-get-workspace",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Library.ProjectResponse"
                }
              }
            },
            "description": "Library.ProjectResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get a Library project for a workspace",
        "tags": [
          "Library"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/members": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all members in a given Workspace.",
        "operationId": "user-workspace-members-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ListResourceMembersResponse"
                }
              }
            },
            "description": "Users.ListResourceMembersResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List members in a Workspace",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/spaces/{space_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes a space by ID.\n",
        "operationId": "space-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "space_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete a space",
        "tags": [
          "Spaces"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Gets a space by ID.\n",
        "operationId": "space-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "space_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Spaces.Space"
                }
              }
            },
            "description": "Spaces.Space"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get a space",
        "tags": [
          "Spaces"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes an entity",
        "operationId": "entity-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete an entity",
        "tags": [
          "Entities"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Returns details of an entity",
        "operationId": "entity-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.Entities.EntityResponse"
                }
              }
            },
            "description": "Projects.Entities.EntityResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get an entity",
        "tags": [
          "Entities"
        ]
      },
      "put": {
        "callbacks": {},
        "description": "Updates the values of one or more fields for an entity.\nThe request body should contain a map of property ids or slugs to values.\n",
        "operationId": "entity-update-values",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "text_field": {
                  "summary": "Example of updating multiple fields",
                  "value": {
                    "fields": {
                      "field1": "value1",
                      "field2": [
                        "option3"
                      ]
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/update_entity"
              }
            }
          },
          "description": "update_entity",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.Entities.FieldResponse"
                }
              }
            },
            "description": "Projects.Entities.FieldResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Sets field values on an entity",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/cases/{case_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes a case",
        "operationId": "case-delete-case",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "case_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.UUID"
                }
              }
            },
            "description": "Common.UUID"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Deletes a case",
        "tags": [
          "Cases"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Gets a case",
        "operationId": "case-get-case",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "case_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cases.CaseResponse"
                }
              }
            },
            "description": "Cases.CaseResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Gets a case",
        "tags": [
          "Cases"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Updates a case",
        "operationId": "case-update-case",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "case_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cases.UpdateCaseRequest"
              }
            }
          },
          "description": "Cases.UpdateCaseRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cases.CaseResponse"
                }
              }
            },
            "description": "Cases.CaseResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Updates a case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes a project",
        "operationId": "project-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete a project",
        "tags": [
          "Projects"
        ]
      },
      "get": {
        "callbacks": {},
        "description": "Returns details of a project",
        "operationId": "project-get",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ProjectResponse"
                }
              }
            },
            "description": "Projects.ProjectResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Get a project",
        "tags": [
          "Projects"
        ]
      },
      "put": {
        "callbacks": {},
        "description": "Updates a project",
        "operationId": "project-update",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.UpdateProjectRequest"
              }
            }
          },
          "description": "Projects.UpdateProjectRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ProjectResponse"
                }
              }
            },
            "description": "Projects.ProjectResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Update a project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/move_to_folder": {
      "post": {
        "callbacks": {},
        "description": "Moves a project to a different folder within the workspace",
        "operationId": "project-move-to-folder",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.MoveProjectToFolderRequest"
              }
            }
          },
          "description": "Projects.MoveProjectToFolderRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ProjectResponse"
                }
              }
            },
            "description": "Projects.ProjectResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Move project to folder",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/properties/{property_id_or_slug}/ground_truth": {
      "put": {
        "callbacks": {},
        "description": "Sets the Ground Truth status of a field. When set to true the field will be immutable and can be used in benchmark and optimizations.",
        "operationId": "entity-set-ground-truth",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Property ID or slug",
            "in": "path",
            "name": "property_id_or_slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Projects.PropertyIdOrSlug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Projects.SetFieldGroundTruth"
              }
            }
          },
          "description": "Projects.SetFieldGroundTruth",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.Entities.FieldResponse"
                }
              }
            },
            "description": "Projects.Entities.FieldResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Sets the Ground Truth status of a field.",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities": {
      "get": {
        "callbacks": {},
        "description": "Returns details of entities in a given Project",
        "operationId": "entity-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "parent_entity_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "deprecated": true,
            "description": "",
            "in": "query",
            "name": "active_view_ids",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUIDList"
            }
          },
          {
            "description": "",
            "in": "query",
            "name": "active_view_id",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of property slugs/ids to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Projects.ListEntities.ListEntitiesOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ListEntities.ListEntitiesResponse"
                }
              }
            },
            "description": "Projects.ListEntities.ListEntitiesResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List all entities in a Project",
        "tags": [
          "Entities"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new entity.\nFor collection project, the `parent_entity_id` is required and has to be set to entity of a parent project.\n",
        "operationId": "entity-create",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of property ids and/or slugs, the endpoint will wait for these properties to be calculated before returning.\n            Note that after 45 seconds the endpoint will timeout and just return the entity.",
            "in": "query",
            "name": "wait_for",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Projects.PropertyIdOrSlugList"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "empty": {
                  "summary": "Example of creating an entity",
                  "value": {}
                },
                "with_text_fields": {
                  "summary": "Example of creating an entity with text fields",
                  "value": {
                    "fields": {
                      "field1": "value1",
                      "field2": "value2"
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Projects.CreateEntityRequest"
              }
            }
          },
          "description": "Projects.CreateEntityRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.Entities.EntityResponse"
                }
              }
            },
            "description": "Projects.Entities.EntityResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Create an entity",
        "tags": [
          "Entities"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/cases/{case_id}/confirm_files_uploaded": {
      "post": {
        "callbacks": {},
        "description": "Finish (multiple) file upload processes for a given Case",
        "operationId": "case-confirm-files-uploaded",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "case_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cases.ConfirmFilesUploadedRequest"
              }
            }
          },
          "description": "Cases.ConfirmFilesUploadedRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cases.ConfirmFilesUploadedResponse"
                }
              }
            },
            "description": "Cases.ConfirmFilesUploadedResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Confirm the files have been uploaded to a Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/cases/{case_id}/async_file_upload": {
      "post": {
        "callbacks": {},
        "description": "Asynchronously uploads a file to a Case.\nThis endpoint is used to upload a file to a Case from an Integration or a URL.\n",
        "operationId": "case-async-file-upload",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "case_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cases.AsyncFileUploadRequest"
              }
            }
          },
          "description": "Cases.AsyncFileUploadRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cases.AsyncFileUploadResponse"
                }
              }
            },
            "description": "Cases.AsyncFileUploadResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Asynchronously uploads a file to a Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/imports": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all imports in a given workspace. Supports pagination using limit/offset or cursors. Maximum page size is 1000.",
        "operationId": "import-list-workspace",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of field names to order by.\nBy default the list is ordered by `created_at` in descending order.\n",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Imports.ListImportsOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imports.ListImportsResponse"
                }
              }
            },
            "description": "Imports.ListImportsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List imports in a workspace",
        "tags": [
          "Imports"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Prepares a new import. Upload of the import file should be done after this step.\n",
        "operationId": "import-prepare",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Imports.PrepareImportRequest"
              }
            }
          },
          "description": "Imports.PrepareImportRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imports.ImportResponse"
                }
              }
            },
            "description": "Imports.ImportResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Prepares an Import",
        "tags": [
          "Imports"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/exports": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all exports in a given project. Supports pagination using limit/offset or cursors. Maximum page size is 1000.",
        "operationId": "export-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "List of field names to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Exports.ListExportsOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exports.ListExportsResponse"
                }
              }
            },
            "description": "Exports.ListExportsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List exports in a project",
        "tags": [
          "Exports"
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a new export",
        "operationId": "export-create",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Exports.CreateExportRequest"
              }
            }
          },
          "description": "Exports.CreateExportRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exports.ExportResponse"
                }
              }
            },
            "description": "Exports.ExportResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Create an Export",
        "tags": [
          "Exports"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/integrations/{integration_id}/connections/{connection_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes specified connection from the project and integrator.\n",
        "operationId": "integration-connection-delete",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "The type of the integration that Go supports.",
            "in": "path",
            "name": "integration_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Integrations.IntegrationId"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.DeleteResponse"
                }
              }
            },
            "description": "Common.DeleteResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Delete the connection",
        "tags": [
          "IntegrationConnections"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/tool_keys/{tool_key_id}": {
      "delete": {
        "callbacks": {},
        "description": "Removes existing custom API key for a given tool integration. Default system\nkey will be used by all models using that integration in the workspace.\n",
        "operationId": "tools-delete-key",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "tool_key_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tools.KeyManager.ToolKeyResponse"
                }
              }
            },
            "description": "Tools.KeyManager.ToolKeyResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "Removes existing custom API key for tool integration",
        "tags": [
          "Tools"
        ]
      }
    },
    "/api/workspaces/{workspace_id}/projects/{project_id}/members": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all members in a given Project.",
        "operationId": "user-project-members-list",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Common.UUID"
            }
          },
          {
            "description": "Whether to show which resources users doesn't have access to,\npreventing them from accessing current resource.\n",
            "in": "query",
            "name": "show_missing_access",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Users.ShowMissingAccess"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.ListResourceMembersResponse"
                }
              }
            },
            "description": "Users.ListResourceMembersResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List members in a Project",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/project_templates": {
      "get": {
        "callbacks": {},
        "description": "Returns details of all projects publicly available for cloning. Supports pagination using limit/offset or cursors. Maximum page size is 1000.",
        "operationId": "project-template-list",
        "parameters": [
          {
            "description": "List of field names to order by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Projects.ListProjectsOrderBy"
            }
          },
          {
            "description": "List of order directions for the fields in `order_by`",
            "in": "query",
            "name": "order_directions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.OrderDirections"
            }
          },
          {
            "description": "The maximum number of records to return when using `offset` pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Limit"
            }
          },
          {
            "description": "The offset to use when paginating records",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Offset"
            }
          },
          {
            "description": "The number of records to return after the provided cursor; used in combination with `after`",
            "in": "query",
            "name": "first",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.First"
            }
          },
          {
            "description": "The number of records to return for before the provided cursor; used in combination with `before`",
            "in": "query",
            "name": "last",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Last"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          },
          {
            "description": "A base64 encoded value representing a cursor, or an element ID if applicable",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Pagination.Cursor"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects.ListProjectsResponse"
                }
              }
            },
            "description": "Projects.ListProjectsResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.APIError"
                }
              }
            },
            "description": "Common.APIError"
          }
        },
        "summary": "List public template projects",
        "tags": [
          "Projects"
        ]
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    },
    {
      "ApiKeyAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://go.v7labs.com",
      "variables": {}
    }
  ],
  "tags": [
    {
      "name": "ApiKeys",
      "description": "Operations related to ApiKeys"
    },
    {
      "name": "AskGo",
      "description": "Operations related to AskGo"
    },
    {
      "name": "Automations",
      "description": "Operations related to Automations"
    },
    {
      "name": "Billing",
      "description": "Operations related to Billing"
    },
    {
      "name": "Cases",
      "description": "Operations related to Cases"
    },
    {
      "name": "Entities",
      "description": "Operations related to Entities"
    },
    {
      "name": "Exports",
      "description": "Operations related to Exports"
    },
    {
      "name": "Folders",
      "description": "Operations related to Folders"
    },
    {
      "name": "Hubs",
      "description": "Operations related to Hubs"
    },
    {
      "name": "Imports",
      "description": "Operations related to Imports"
    },
    {
      "name": "IntegrationConnections",
      "description": "Operations related to IntegrationConnections"
    },
    {
      "name": "Library",
      "description": "Operations related to Library"
    },
    {
      "name": "OAuth",
      "description": "Operations related to OAuth"
    },
    {
      "name": "ProjectInvitations",
      "description": "Operations related to ProjectInvitations"
    },
    {
      "name": "Projects",
      "description": "Operations related to Projects"
    },
    {
      "name": "Spaces",
      "description": "Operations related to Spaces"
    },
    {
      "name": "Templates",
      "description": "Operations related to Templates"
    },
    {
      "name": "Tools",
      "description": "Operations related to Tools"
    },
    {
      "name": "Users",
      "description": "Operations related to Users"
    },
    {
      "name": "WorkspaceInvitations",
      "description": "Operations related to WorkspaceInvitations"
    },
    {
      "name": "Workspaces",
      "description": "Operations related to Workspaces"
    }
  ],
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true
  }
}